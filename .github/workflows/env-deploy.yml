name: Environment-Aware Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

env:
  AWS_DEFAULT_REGION: ap-northeast-1
  NODE_VERSION: '20'

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deploy: ${{ steps.set-env.outputs.deploy }}
    steps:
      - id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint || true
      
      - name: Run unit tests
        run: npm test -- --coverage
      
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [determine-environment, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Copy environment file
        run: |
          if [[ "${{ needs.determine-environment.outputs.environment }}" == "production" ]]; then
            cp .env.production .env
          else
            cp .env.development .env
          fi
      
      - name: Build frontend
        run: |
          cd public
          npm run build || echo "No frontend build script"
      
      - name: Build server
        run: |
          cd server
          npm run build || echo "No server build script"
      
      - name: Create deployment package
        run: |
          mkdir -p dist
          cp -r public dist/
          cp -r server dist/
          cp package*.json dist/
          cp -r cdk dist/
          tar -czf deployment-${{ needs.determine-environment.outputs.environment }}.tar.gz dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package-${{ needs.determine-environment.outputs.environment }}
          path: deployment-${{ needs.determine-environment.outputs.environment }}.tar.gz

  deploy-development:
    name: Deploy to Development (dev.発表.com)
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    if: needs.determine-environment.outputs.environment == 'development' && needs.determine-environment.outputs.deploy == 'true'
    environment:
      name: development
      url: https://dev.xn--6wym69a.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci
      
      - name: Deploy CDK stack
        run: |
          cd cdk
          npm run cdk:deploy:dev -- --require-approval never
      
      - name: Deploy static assets to S3
        run: |
          aws s3 sync public/ s3://lightningtalk-dev-static-${{ secrets.AWS_ACCOUNT_ID }}/ \
            --delete \
            --exclude "*.env*" \
            --cache-control "public, max-age=3600"
      
      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='Development CloudFront Distribution'].Id" \
            --output text)
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi
      
      - name: Update Route53 for dev.発表.com
        run: |
          echo "Route53 configuration for dev.発表.com is managed by CDK"

  deploy-production:
    name: Deploy to Production (発表.com)
    runs-on: ubuntu-latest
    needs: [determine-environment, build]
    if: needs.determine-environment.outputs.environment == 'production' && needs.determine-environment.outputs.deploy == 'true'
    environment:
      name: production
      url: https://xn--6wym69a.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install CDK dependencies
        run: |
          cd cdk
          npm ci
      
      - name: Deploy CDK stack
        run: |
          cd cdk
          npm run cdk:deploy:prod -- --require-approval never
      
      - name: Deploy static assets to S3
        run: |
          aws s3 sync public/ s3://lightningtalk-static-prod/ \
            --delete \
            --exclude "*.env*" \
            --cache-control "public, max-age=86400"
      
      - name: Invalidate CloudFront cache
        run: |
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='Lightning Talk Circle CloudFront Distribution'].Id" \
            --output text)
          if [ ! -z "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi
      
      - name: Create deployment tag
        if: success()
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "prod-$(date +%Y%m%d-%H%M%S)" -m "Production deployment"
          git push origin --tags

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-development, deploy-production]
    if: always()
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.deploy-development.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Deployment successful to ${{ needs.determine-environment.outputs.environment }}"
          elif [[ "${{ needs.deploy-development.result }}" == "failure" ]] || [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
            echo "❌ Deployment failed to ${{ needs.determine-environment.outputs.environment }}"
          else
            echo "ℹ️ Deployment skipped for ${{ needs.determine-environment.outputs.environment }}"
          fi
      
      - name: Create GitHub deployment
        if: needs.determine-environment.outputs.deploy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ needs.determine-environment.outputs.environment }}';
            const url = environment === 'production' 
              ? 'https://xn--6wym69a.com' 
              : 'https://dev.xn--6wym69a.com';
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              required_contexts: [],
              auto_merge: false
            });
            
            const status = '${{ needs.deploy-development.result }}' === 'success' || 
                          '${{ needs.deploy-production.result }}' === 'success' 
                          ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: status,
              environment_url: url,
              description: `Deployment to ${environment}`
            });