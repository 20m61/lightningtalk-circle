name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      skip_tests:
        description: "Skip tests (not recommended for production)"
        required: false
        default: false
        type: boolean
      pre_release:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release

    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: |
          npm run test:unit
          npm run test:integration

      - name: Run quality gates
        if: ${{ !inputs.skip_tests }}
        run: |
          npm run quality:workflow
          echo "Quality gates passed"

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Determine version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          CURRENT_VERSION=${LATEST_TAG#v}

          echo "Current version: $CURRENT_VERSION"
          echo "Release type: ${{ inputs.release_type }}"

          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case "${{ inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          npm version ${NEW_VERSION#v} --no-git-tag-version

          if [ -f "lightningtalk-modern/package.json" ]; then
            cd lightningtalk-modern
            npm version ${NEW_VERSION#v} --no-git-tag-version
            cd ..
          fi

      - name: Build all packages
        run: |
          # WordPress Child Theme
          npm run build:theme
          THEME_ZIP=$(ls dist/themes/lightningtalk-child_*.zip | head -1)

          # Static Site
          npm run package:static
          mv dist/lightningtalk-static.zip "dist/lightningtalk-static_${{ steps.version.outputs.new-version }}.zip"

          # Modern Theme
          if [ -d "lightningtalk-modern" ]; then
            cd lightningtalk-modern
            npm ci --silent
            npm run build --silent
            npm run theme:package --silent
            MODERN_ZIP=$(ls packages/theme/dist/*.zip | head -1 2>/dev/null || echo "")
            if [ -n "$MODERN_ZIP" ]; then
              cp "$MODERN_ZIP" "../dist/lightningtalk-modern_${{ steps.version.outputs.new-version }}.zip"
            fi
            cd ..
          fi

          # List generated files
          echo "Generated release files:"
          ls -la dist/*.zip || echo "No ZIP files found"

      - name: Generate release notes
        id: release-notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $NEW_VERSION^ 2>/dev/null || echo "")

          cat > release-notes.md << 'EOF'
          # 🚀 Lightning Talk Circle ${{ steps.version.outputs.new-version }}

          ## 📦 パッケージ

          このリリースには以下のパッケージが含まれています：

          ### WordPress テーマ
          - **lightningtalk-child-theme**: Cocoon ベースの子テーマ（完全機能版）
          - **lightningtalk-modern-theme**: TypeScript/React ベースの次世代テーマ

          ### スタンドアロン版
          - **lightningtalk-static**: サーバー不要の静的HTML版

          ## ✨ 変更内容
          EOF

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "" >> release-notes.md
            echo "### コミット履歴" >> release-notes.md
            git log $PREVIOUS_TAG..$NEW_VERSION --pretty=format:"- %s (%an)" --no-merges | head -20 >> release-notes.md
          fi

          cat >> release-notes.md << 'EOF'

          ## 📥 インストール方法

          ### 1. WordPress テーマとして使用

          ```bash
          # 従来版（推奨）
          1. lightningtalk-child-theme_*.zip をダウンロード
          2. WordPress管理画面 → 外観 → テーマ → 新規追加
          3. ZIPファイルをアップロード・有効化

          # 次世代版（開発者向け）
          1. lightningtalk-modern-theme_*.zip をダウンロード
          2. 同様の手順でインストール
          ```

          ### 2. 静的サイトとして使用

          ```bash
          1. lightningtalk-static_*.zip をダウンロード
          2. Webサーバーにファイルを展開
          3. index.html にアクセス
          ```

          ## 🔧 必要環境

          - **WordPress版**: WordPress 6.0+ (PHP 8.0+)
          - **Modern版**: Node.js 18+ (開発時)
          - **Static版**: 任意のWebサーバー

          ## 🆘 サポート

          - [ドキュメント](https://github.com/${{ github.repository }}/tree/main/docs)
          - [Issue報告](https://github.com/${{ github.repository }}/issues)
          - [Discussion](https://github.com/${{ github.repository }}/discussions)

          ---

          **リリース日**: $(date '+%Y年%m月%d日')  
          **ビルド**: GitHub Actions  
          **リリース種別**: ${{ inputs.release_type }}${{ inputs.pre_release && ' (プレリリース)' || '' }}
          EOF

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          git add package.json lightningtalk-modern/package.json
          git commit -m "chore: release $NEW_VERSION

          Release type: ${{ inputs.release_type }}
          Generated by: GitHub Actions
          Pre-release: ${{ inputs.pre_release }}
          "
          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push origin main
          git push origin $NEW_VERSION

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.new-version }}
          release_name: Lightning Talk Circle ${{ steps.version.outputs.new-version }}
          body_path: ./release-notes.md
          draft: false
          prerelease: ${{ inputs.pre_release }}

      - name: Upload WordPress Child Theme
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/themes/lightningtalk-child_*.zip
          asset_name: lightningtalk-child-theme_${{ steps.version.outputs.new-version }}.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Static Site
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/lightningtalk-static_${{ steps.version.outputs.new-version }}.zip
          asset_name: lightningtalk-static_${{ steps.version.outputs.new-version }}.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Upload Modern Theme
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/lightningtalk-modern_${{ steps.version.outputs.new-version }}.zip
          asset_name: lightningtalk-modern-theme_${{ steps.version.outputs.new-version }}.zip
          asset_content_type: application/zip
        continue-on-error: true

      - name: Summary
        run: |
          echo "## 🎉 リリース完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**バージョン**: ${{ steps.version.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**リリースURL**: ${{ steps.create-release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**リリース種別**: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 生成されたパッケージ" >> $GITHUB_STEP_SUMMARY
          echo "- WordPress Child Theme" >> $GITHUB_STEP_SUMMARY
          echo "- Static Site Package" >> $GITHUB_STEP_SUMMARY
          echo "- Modern WordPress Theme" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 クイックリンク" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](${{ steps.create-release.outputs.html_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- [ダウンロードページ](https://github.com/${{ github.repository }}/releases/latest)" >> $GITHUB_STEP_SUMMARY

  notify:
    runs-on: ubuntu-latest
    needs: release
    if: always()

    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            MESSAGE="🎉 Lightning Talk Circle ${{ needs.release.outputs.new-version }} のリリースが完了しました！\n\n📦 GitHub Releases: ${{ needs.release.outputs.release-url }}\n🔄 リリース種別: ${{ inputs.release_type }}"
          else
            MESSAGE="❌ Lightning Talk Circle のリリースが失敗しました\n\nワークフロー: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MESSAGE\"}" \
            "$SLACK_WEBHOOK_URL"

      - name: Create Issue on Failure
        if: needs.release.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Release ${{ needs.release.outputs.new-version }} Failed`,
              body: `リリースワークフローが失敗しました。
              
              **詳細**:
              - バージョン: ${{ needs.release.outputs.new-version }}
              - リリース種別: ${{ inputs.release_type }}
              - ワークフロー: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              **次のアクション**:
              - [ ] エラーログを確認
              - [ ] 問題を修正
              - [ ] リリースを再実行
              `,
              labels: ['bug', 'release', 'automation']
            });
