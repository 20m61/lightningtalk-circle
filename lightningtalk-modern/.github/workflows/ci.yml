name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18

jobs:
  # 依存関係とビルドテスト
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check
        
      - name: Lint
        run: npm run lint
        
      - name: Build components
        run: cd packages/components && npm run build
        
      - name: Build theme
        run: cd packages/theme && npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            packages/*/build/

  # Unit・Integration テスト
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm run test:unit
        
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests

  # WordPress統合テスト
  wordpress-integration:
    name: WordPress Integration Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: root
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Start WordPress environment
        run: |
          docker-compose -f docker-compose.test.yml up -d wordpress
          
      - name: Wait for WordPress
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080/wp-admin/install.php; do sleep 5; done'
          
      - name: Install WordPress
        run: |
          docker-compose exec -T wordpress wp core install \
            --url=http://localhost:8080 \
            --title="Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=admin@test.local \
            --allow-root
            
      - name: Activate theme
        run: |
          docker-compose exec -T wordpress wp theme activate lightningtalk-child --allow-root
          
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Cleanup
        run: docker-compose -f docker-compose.test.yml down

  # E2Eテスト
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          npm run dev &
          
      - name: Wait for services
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:8080; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
          
      - name: Run E2E tests
        run: npm run test:e2e
        
      - name: Upload E2E results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          
      - name: Cleanup
        run: docker-compose -f docker-compose.test.yml down

  # Storybook ビルド・テスト
  storybook:
    name: Storybook Build & Visual Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build Storybook
        run: cd packages/components && npm run build-storybook
        
      - name: Run visual tests
        run: cd packages/components && npm run test:visual
        
      - name: Upload Storybook build
        uses: actions/upload-artifact@v3
        with:
          name: storybook-static
          path: packages/components/storybook-static/

  # セキュリティ・品質チェック
  security:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        
      - name: Check for vulnerabilities
        run: npx audit-ci --moderate
        
      - name: Bundle size check
        run: |
          cd packages/theme && npm run build
          npx bundlesize

  # デプロイ (メインブランチのみ)
  deploy:
    name: Deploy
    needs: [build, test, wordpress-integration, e2e, storybook, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build all packages
        run: npm run build
        
      - name: Package theme
        run: cd packages/theme && npm run package
        
      - name: Deploy Storybook
        run: |
          cd packages/components
          npm run build-storybook
          # Storybook デプロイ (GitHub Pages、Netlify等)
          
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false