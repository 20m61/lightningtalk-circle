f75aceb01e221d84d4dd5d8f8ae3ed9d
"use strict";

/**
 * Jest テスト環境のセットアップファイル
 */

const fs = require('fs-extra');
const path = require('path');

// テスト環境変数の設定
process.env.NODE_ENV = 'test';
process.env.PORT = '3001';
process.env.GITHUB_TOKEN = 'test-token';
process.env.GITHUB_OWNER = 'test-owner';
process.env.GITHUB_REPO = 'test-repo';

// グローバルタイムアウト設定
jest.setTimeout(10000);

// グローバルセットアップ
beforeAll(async () => {
  // テスト用データディレクトリの作成
  const testDataDir = path.join(process.cwd(), 'tests', 'data');
  await fs.ensureDir(testDataDir);
  console.log('🧪 Test environment setup completed');
});

// 各テスト後のクリーンアップ
afterEach(() => {
  // モックのクリア
  jest.clearAllMocks();
});

// 全テスト後のクリーンアップ
afterAll(async () => {
  // テスト用ファイルのクリーンアップ
  const testDataDir = path.join(process.cwd(), 'tests', 'data');
  if (await fs.pathExists(testDataDir)) {
    await fs.remove(testDataDir);
  }
  console.log('🧹 Test environment cleanup completed');
});

// グローバルモック設定
global.mockConsole = {
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  info: jest.fn()
};

// console.log をモック化（必要に応じて）
if (process.env.SILENCE_CONSOLE === 'true') {
  global.console = global.mockConsole;
}

// カスタムマッチャーの追加
expect.extend({
  toBeValidIssue(received) {
    const pass = received && typeof received.title === 'string' && received.title.length > 0 && Array.isArray(received.labels) && received.labels.length > 0;
    if (pass) {
      return {
        message: () => `expected ${received} not to be a valid issue`,
        pass: true
      };
    } else {
      return {
        message: () => `expected ${received} to be a valid issue with title and labels`,
        pass: false
      };
    }
  },
  toHaveGitHubIssueStructure(received) {
    const requiredFields = ['number', 'title', 'state', 'html_url'];
    const hasAllFields = requiredFields.every(field => received.hasOwnProperty(field));
    if (hasAllFields) {
      return {
        message: () => `expected ${received} not to have GitHub issue structure`,
        pass: true
      };
    } else {
      return {
        message: () => `expected ${received} to have GitHub issue structure with fields: ${requiredFields.join(', ')}`,
        pass: false
      };
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiUE9SVCIsIkdJVEhVQl9UT0tFTiIsIkdJVEhVQl9PV05FUiIsIkdJVEhVQl9SRVBPIiwiamVzdCIsInNldFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJ0ZXN0RGF0YURpciIsImpvaW4iLCJjd2QiLCJlbnN1cmVEaXIiLCJjb25zb2xlIiwibG9nIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImFmdGVyQWxsIiwicGF0aEV4aXN0cyIsInJlbW92ZSIsImdsb2JhbCIsIm1vY2tDb25zb2xlIiwiZm4iLCJlcnJvciIsIndhcm4iLCJpbmZvIiwiU0lMRU5DRV9DT05TT0xFIiwiZXhwZWN0IiwiZXh0ZW5kIiwidG9CZVZhbGlkSXNzdWUiLCJyZWNlaXZlZCIsInBhc3MiLCJ0aXRsZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImxhYmVscyIsIm1lc3NhZ2UiLCJ0b0hhdmVHaXRIdWJJc3N1ZVN0cnVjdHVyZSIsInJlcXVpcmVkRmllbGRzIiwiaGFzQWxsRmllbGRzIiwiZXZlcnkiLCJmaWVsZCIsImhhc093blByb3BlcnR5Il0sInNvdXJjZXMiOlsic2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBKZXN0IOODhuOCueODiOeSsOWig+OBruOCu+ODg+ODiOOCouODg+ODl+ODleOCoeOCpOODq1xuICovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8vIOODhuOCueODiOeSsOWig+WkieaVsOOBruioreWumlxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG5wcm9jZXNzLmVudi5QT1JUID0gJzMwMDEnO1xucHJvY2Vzcy5lbnYuR0lUSFVCX1RPS0VOID0gJ3Rlc3QtdG9rZW4nO1xucHJvY2Vzcy5lbnYuR0lUSFVCX09XTkVSID0gJ3Rlc3Qtb3duZXInO1xucHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE8gPSAndGVzdC1yZXBvJztcblxuLy8g44Kw44Ot44O844OQ44Or44K/44Kk44Og44Ki44Km44OI6Kit5a6aXG5qZXN0LnNldFRpbWVvdXQoMTAwMDApO1xuXG4vLyDjgrDjg63jg7zjg5Djg6vjgrvjg4Pjg4jjgqLjg4Pjg5dcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIC8vIOODhuOCueODiOeUqOODh+ODvOOCv+ODh+OCo+ODrOOCr+ODiOODquOBruS9nOaIkFxuICBjb25zdCB0ZXN0RGF0YURpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGVzdHMnLCAnZGF0YScpO1xuICBhd2FpdCBmcy5lbnN1cmVEaXIodGVzdERhdGFEaXIpO1xuICBcbiAgY29uc29sZS5sb2coJ/Cfp6ogVGVzdCBlbnZpcm9ubWVudCBzZXR1cCBjb21wbGV0ZWQnKTtcbn0pO1xuXG4vLyDlkITjg4bjgrnjg4jlvozjga7jgq/jg6rjg7zjg7PjgqLjg4Pjg5dcbmFmdGVyRWFjaCgoKSA9PiB7XG4gIC8vIOODouODg+OCr+OBruOCr+ODquOColxuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbn0pO1xuXG4vLyDlhajjg4bjgrnjg4jlvozjga7jgq/jg6rjg7zjg7PjgqLjg4Pjg5dcbmFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgLy8g44OG44K544OI55So44OV44Kh44Kk44Or44Gu44Kv44Oq44O844Oz44Ki44OD44OXXG4gIGNvbnN0IHRlc3REYXRhRGlyID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICd0ZXN0cycsICdkYXRhJyk7XG4gIGlmIChhd2FpdCBmcy5wYXRoRXhpc3RzKHRlc3REYXRhRGlyKSkge1xuICAgIGF3YWl0IGZzLnJlbW92ZSh0ZXN0RGF0YURpcik7XG4gIH1cbiAgXG4gIGNvbnNvbGUubG9nKCfwn6e5IFRlc3QgZW52aXJvbm1lbnQgY2xlYW51cCBjb21wbGV0ZWQnKTtcbn0pO1xuXG4vLyDjgrDjg63jg7zjg5Djg6vjg6Ljg4Pjgq/oqK3lrppcbmdsb2JhbC5tb2NrQ29uc29sZSA9IHtcbiAgbG9nOiBqZXN0LmZuKCksXG4gIGVycm9yOiBqZXN0LmZuKCksXG4gIHdhcm46IGplc3QuZm4oKSxcbiAgaW5mbzogamVzdC5mbigpXG59O1xuXG4vLyBjb25zb2xlLmxvZyDjgpLjg6Ljg4Pjgq/ljJbvvIjlv4XopoHjgavlv5zjgZjjgabvvIlcbmlmIChwcm9jZXNzLmVudi5TSUxFTkNFX0NPTlNPTEUgPT09ICd0cnVlJykge1xuICBnbG9iYWwuY29uc29sZSA9IGdsb2JhbC5tb2NrQ29uc29sZTtcbn1cblxuLy8g44Kr44K544K/44Og44Oe44OD44OB44Oj44O844Gu6L+95YqgXG5leHBlY3QuZXh0ZW5kKHtcbiAgdG9CZVZhbGlkSXNzdWUocmVjZWl2ZWQpIHtcbiAgICBjb25zdCBwYXNzID0gcmVjZWl2ZWQgJiZcbiAgICAgICAgICAgICAgICAgdHlwZW9mIHJlY2VpdmVkLnRpdGxlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICByZWNlaXZlZC50aXRsZS5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkocmVjZWl2ZWQubGFiZWxzKSAmJlxuICAgICAgICAgICAgICAgICByZWNlaXZlZC5sYWJlbHMubGVuZ3RoID4gMDtcbiAgICBcbiAgICBpZiAocGFzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9IG5vdCB0byBiZSBhIHZhbGlkIGlzc3VlYCxcbiAgICAgICAgcGFzczogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBiZSBhIHZhbGlkIGlzc3VlIHdpdGggdGl0bGUgYW5kIGxhYmVsc2AsXG4gICAgICAgIHBhc3M6IGZhbHNlLFxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIFxuICB0b0hhdmVHaXRIdWJJc3N1ZVN0cnVjdHVyZShyZWNlaXZlZCkge1xuICAgIGNvbnN0IHJlcXVpcmVkRmllbGRzID0gWydudW1iZXInLCAndGl0bGUnLCAnc3RhdGUnLCAnaHRtbF91cmwnXTtcbiAgICBjb25zdCBoYXNBbGxGaWVsZHMgPSByZXF1aXJlZEZpZWxkcy5ldmVyeShmaWVsZCA9PiByZWNlaXZlZC5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpO1xuICAgIFxuICAgIGlmIChoYXNBbGxGaWVsZHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSBub3QgdG8gaGF2ZSBHaXRIdWIgaXNzdWUgc3RydWN0dXJlYCxcbiAgICAgICAgcGFzczogdHJ1ZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+IGBleHBlY3RlZCAke3JlY2VpdmVkfSB0byBoYXZlIEdpdEh1YiBpc3N1ZSBzdHJ1Y3R1cmUgd2l0aCBmaWVsZHM6ICR7cmVxdWlyZWRGaWVsZHMuam9pbignLCAnKX1gLFxuICAgICAgICBwYXNzOiBmYWxzZSxcbiAgICAgIH07XG4gICAgfVxuICB9XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBOztBQUVBLE1BQU1BLEVBQUUsR0FBR0MsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUM5QixNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFNLENBQUM7O0FBRTVCO0FBQ0FFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEdBQUcsTUFBTTtBQUM3QkYsT0FBTyxDQUFDQyxHQUFHLENBQUNFLElBQUksR0FBRyxNQUFNO0FBQ3pCSCxPQUFPLENBQUNDLEdBQUcsQ0FBQ0csWUFBWSxHQUFHLFlBQVk7QUFDdkNKLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSSxZQUFZLEdBQUcsWUFBWTtBQUN2Q0wsT0FBTyxDQUFDQyxHQUFHLENBQUNLLFdBQVcsR0FBRyxXQUFXOztBQUVyQztBQUNB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