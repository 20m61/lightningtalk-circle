{"version":3,"names":["cov_niunzr5w6","actualCoverage","fs","path","fileURLToPath","EventEmitter","__filename","s","import","meta","url","__dirname","dirname","DatabaseService","constructor","f","dataDir","join","cache","Map","initialized","saveQueue","saveTimeout","initialize","mkdir","recursive","collections","events","participants","talks","settings","analytics","collection","filename","Object","entries","initializeCollection","initializeSettings","emit","console","log","error","filePath","data","readFile","set","JSON","parse","code","b","emptyData","saveCollection","defaultSettings","siteName","siteUrl","process","env","SITE_URL","adminEmail","ADMIN_EMAIL","emailEnabled","EMAIL_ENABLED","analyticsEnabled","registrationSettings","requireApproval","allowWalkIn","maxParticipants","autoConfirmation","talkSettings","allowLastMinute","maxDuration","categories","notificationSettings","emailOnRegistration","emailOnTalkSubmission","reminderEmails","reminderDays","createdAt","Date","toISOString","updatedAt","existingSettings","get","length","waitForConnection","Promise","resolve","once","findAll","filter","validateCollection","keys","item","matchesFilter","findById","id","find","findOne","create","document","now","newDocument","generateId","push","queueSave","update","updates","index","findIndex","Error","updatedDocument","delete","deletedDocument","splice","count","results","countByField","field","counts","forEach","value","getStats","total","createdToday","created","today","toDateString","createdThisWeek","weekAgo","setDate","getDate","lastUpdated","Math","max","map","getCurrentEvent","status","sort","a","date","getEventParticipants","eventId","getEventTalks","getEventAnalytics","participantCount","speakerCount","participationTypes","talkCategories","registrationTrend","getRegistrationTrend","avgRating","calculateAverageRating","trend","participant","ratingsArray","talk","rating","reduce","sum","getSettings","updateSettings","updatedSettings","seed","seedData","exportData","exportedAt","version","importData","Array","isArray","every","key","operator","operatorValue","includes","random","toString","substr","clearTimeout","setTimeout","collectionsToSave","from","clear","writeFile","stringify","close"],"sources":["database.js"],"sourcesContent":["/**\n * Database Service for Lightning Talk Event Management\n * File-based JSON database with in-memory caching for development\n * Can be easily replaced with PostgreSQL/MongoDB for production\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { EventEmitter } from 'events';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport class DatabaseService extends EventEmitter {\n    constructor() {\n        super();\n        this.dataDir = path.join(__dirname, '../data');\n        this.cache = new Map();\n        this.initialized = false;\n        this.saveQueue = new Map();\n        this.saveTimeout = null;\n    }\n\n    async initialize() {\n        try {\n            // Ensure data directory exists\n            await fs.mkdir(this.dataDir, { recursive: true });\n\n            // Initialize collections\n            this.collections = {\n                events: 'events.json',\n                participants: 'participants.json',\n                talks: 'talks.json',\n                settings: 'settings.json',\n                analytics: 'analytics.json'\n            };\n\n            // Load or create each collection\n            for (const [collection, filename] of Object.entries(this.collections)) {\n                await this.initializeCollection(collection, filename);\n            }\n\n            // Initialize settings\n            await this.initializeSettings();\n\n            this.initialized = true;\n            this.emit('ready');\n            \n            console.log('📦 Database service initialized');\n        } catch (error) {\n            console.error('Failed to initialize database:', error);\n            throw error;\n        }\n    }\n\n    async initializeCollection(collection, filename) {\n        const filePath = path.join(this.dataDir, filename);\n        \n        try {\n            const data = await fs.readFile(filePath, 'utf8');\n            this.cache.set(collection, JSON.parse(data));\n        } catch (error) {\n            if (error.code === 'ENOENT') {\n                // File doesn't exist, create empty collection\n                const emptyData = [];\n                this.cache.set(collection, emptyData);\n                await this.saveCollection(collection);\n                console.log(`📝 Created new collection: ${collection}`);\n            } else {\n                throw error;\n            }\n        }\n    }\n\n    async initializeSettings() {\n        const defaultSettings = {\n            siteName: 'なんでもライトニングトーク',\n            siteUrl: process.env.SITE_URL || 'http://localhost:3000',\n            adminEmail: process.env.ADMIN_EMAIL || 'admin@example.com',\n            emailEnabled: process.env.EMAIL_ENABLED === 'true',\n            analyticsEnabled: true,\n            registrationSettings: {\n                requireApproval: false,\n                allowWalkIn: true,\n                maxParticipants: 100,\n                autoConfirmation: true\n            },\n            talkSettings: {\n                requireApproval: false,\n                allowLastMinute: true,\n                maxDuration: 5,\n                categories: [\n                    'tech', 'hobby', 'learning', 'travel', 'food', \n                    'game', 'lifehack', 'pet', 'garden', 'money', \n                    'sports', 'music', 'other'\n                ]\n            },\n            notificationSettings: {\n                emailOnRegistration: true,\n                emailOnTalkSubmission: true,\n                reminderEmails: true,\n                reminderDays: [7, 1]\n            },\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        const existingSettings = this.cache.get('settings');\n        if (!existingSettings || existingSettings.length === 0) {\n            this.cache.set('settings', [defaultSettings]);\n            await this.saveCollection('settings');\n        }\n    }\n\n    async waitForConnection() {\n        if (this.initialized) return;\n        \n        return new Promise((resolve) => {\n            this.once('ready', resolve);\n        });\n    }\n\n    // CRUD Operations\n    async findAll(collection, filter = {}) {\n        this.validateCollection(collection);\n        const data = this.cache.get(collection) || [];\n        \n        if (Object.keys(filter).length === 0) {\n            return data;\n        }\n\n        return data.filter(item => this.matchesFilter(item, filter));\n    }\n\n    async findById(collection, id) {\n        this.validateCollection(collection);\n        const data = this.cache.get(collection) || [];\n        return data.find(item => item.id === id);\n    }\n\n    async findOne(collection, filter) {\n        this.validateCollection(collection);\n        const data = this.cache.get(collection) || [];\n        return data.find(item => this.matchesFilter(item, filter));\n    }\n\n    async create(collection, document) {\n        this.validateCollection(collection);\n        \n        // Add metadata\n        const now = new Date().toISOString();\n        const newDocument = {\n            id: this.generateId(),\n            ...document,\n            createdAt: now,\n            updatedAt: now\n        };\n\n        // Add to cache\n        const data = this.cache.get(collection) || [];\n        data.push(newDocument);\n        this.cache.set(collection, data);\n\n        // Queue save\n        this.queueSave(collection);\n\n        // Emit event\n        this.emit('created', { collection, document: newDocument });\n\n        return newDocument;\n    }\n\n    async update(collection, id, updates) {\n        this.validateCollection(collection);\n        \n        const data = this.cache.get(collection) || [];\n        const index = data.findIndex(item => item.id === id);\n        \n        if (index === -1) {\n            throw new Error(`Document with id ${id} not found in ${collection}`);\n        }\n\n        // Apply updates\n        const updatedDocument = {\n            ...data[index],\n            ...updates,\n            updatedAt: new Date().toISOString()\n        };\n\n        data[index] = updatedDocument;\n        this.cache.set(collection, data);\n\n        // Queue save\n        this.queueSave(collection);\n\n        // Emit event\n        this.emit('updated', { collection, document: updatedDocument });\n\n        return updatedDocument;\n    }\n\n    async delete(collection, id) {\n        this.validateCollection(collection);\n        \n        const data = this.cache.get(collection) || [];\n        const index = data.findIndex(item => item.id === id);\n        \n        if (index === -1) {\n            throw new Error(`Document with id ${id} not found in ${collection}`);\n        }\n\n        const deletedDocument = data[index];\n        data.splice(index, 1);\n        this.cache.set(collection, data);\n\n        // Queue save\n        this.queueSave(collection);\n\n        // Emit event\n        this.emit('deleted', { collection, document: deletedDocument });\n\n        return deletedDocument;\n    }\n\n    // Aggregation methods\n    async count(collection, filter = {}) {\n        const results = await this.findAll(collection, filter);\n        return results.length;\n    }\n\n    async countByField(collection, field) {\n        const data = await this.findAll(collection);\n        const counts = {};\n        \n        data.forEach(item => {\n            const value = item[field] || 'unknown';\n            counts[value] = (counts[value] || 0) + 1;\n        });\n\n        return counts;\n    }\n\n    async getStats(collection) {\n        const data = await this.findAll(collection);\n        \n        return {\n            total: data.length,\n            createdToday: data.filter(item => {\n                const created = new Date(item.createdAt);\n                const today = new Date();\n                return created.toDateString() === today.toDateString();\n            }).length,\n            createdThisWeek: data.filter(item => {\n                const created = new Date(item.createdAt);\n                const weekAgo = new Date();\n                weekAgo.setDate(weekAgo.getDate() - 7);\n                return created >= weekAgo;\n            }).length,\n            lastUpdated: data.length > 0 ? \n                Math.max(...data.map(item => new Date(item.updatedAt))) : \n                null\n        };\n    }\n\n    // Event-specific methods\n    async getCurrentEvent() {\n        const events = await this.findAll('events', { status: 'upcoming' });\n        return events.sort((a, b) => new Date(a.date) - new Date(b.date))[0];\n    }\n\n    async getEventParticipants(eventId) {\n        return await this.findAll('participants', { eventId });\n    }\n\n    async getEventTalks(eventId) {\n        return await this.findAll('talks', { eventId });\n    }\n\n    async getEventAnalytics(eventId) {\n        const participants = await this.getEventParticipants(eventId);\n        const talks = await this.getEventTalks(eventId);\n\n        return {\n            participantCount: participants.length,\n            speakerCount: talks.length,\n            participationTypes: await this.countByField('participants', 'participationType'),\n            talkCategories: await this.countByField('talks', 'category'),\n            registrationTrend: this.getRegistrationTrend(participants),\n            avgRating: this.calculateAverageRating(talks)\n        };\n    }\n\n    getRegistrationTrend(participants) {\n        const trend = {};\n        participants.forEach(participant => {\n            const date = new Date(participant.createdAt).toDateString();\n            trend[date] = (trend[date] || 0) + 1;\n        });\n        return trend;\n    }\n\n    calculateAverageRating(talks) {\n        const ratingsArray = talks\n            .filter(talk => talk.rating)\n            .map(talk => talk.rating);\n        \n        if (ratingsArray.length === 0) return null;\n        \n        return ratingsArray.reduce((sum, rating) => sum + rating, 0) / ratingsArray.length;\n    }\n\n    // Settings management\n    async getSettings() {\n        const settings = this.cache.get('settings') || [];\n        return settings[0] || {};\n    }\n\n    async updateSettings(updates) {\n        const settings = await this.getSettings();\n        const updatedSettings = {\n            ...settings,\n            ...updates,\n            updatedAt: new Date().toISOString()\n        };\n\n        this.cache.set('settings', [updatedSettings]);\n        await this.queueSave('settings');\n\n        return updatedSettings;\n    }\n\n    // Data seeding for development\n    async seed(seedData) {\n        for (const [collection, data] of Object.entries(seedData)) {\n            if (this.collections[collection]) {\n                this.cache.set(collection, data);\n                await this.saveCollection(collection);\n                console.log(`🌱 Seeded ${collection} with ${data.length} items`);\n            }\n        }\n    }\n\n    // Data export/backup\n    async exportData() {\n        const exportData = {};\n        \n        for (const collection of Object.keys(this.collections)) {\n            exportData[collection] = this.cache.get(collection) || [];\n        }\n\n        return {\n            ...exportData,\n            exportedAt: new Date().toISOString(),\n            version: '1.0.0'\n        };\n    }\n\n    async importData(importData) {\n        for (const [collection, data] of Object.entries(importData)) {\n            if (this.collections[collection] && Array.isArray(data)) {\n                this.cache.set(collection, data);\n                await this.saveCollection(collection);\n                console.log(`📥 Imported ${collection} with ${data.length} items`);\n            }\n        }\n    }\n\n    // Helper methods\n    validateCollection(collection) {\n        if (!this.collections[collection]) {\n            throw new Error(`Invalid collection: ${collection}`);\n        }\n    }\n\n    matchesFilter(item, filter) {\n        return Object.entries(filter).every(([key, value]) => {\n            if (typeof value === 'object' && value !== null) {\n                // Handle operators like { $gte: value }\n                return Object.entries(value).every(([operator, operatorValue]) => {\n                    switch (operator) {\n                        case '$gte':\n                            return item[key] >= operatorValue;\n                        case '$lte':\n                            return item[key] <= operatorValue;\n                        case '$gt':\n                            return item[key] > operatorValue;\n                        case '$lt':\n                            return item[key] < operatorValue;\n                        case '$ne':\n                            return item[key] !== operatorValue;\n                        case '$in':\n                            return Array.isArray(operatorValue) && operatorValue.includes(item[key]);\n                        case '$nin':\n                            return Array.isArray(operatorValue) && !operatorValue.includes(item[key]);\n                        default:\n                            return false;\n                    }\n                });\n            }\n            return item[key] === value;\n        });\n    }\n\n    generateId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    queueSave(collection) {\n        this.saveQueue.set(collection, true);\n        \n        if (this.saveTimeout) {\n            clearTimeout(this.saveTimeout);\n        }\n\n        this.saveTimeout = setTimeout(async () => {\n            const collectionsToSave = Array.from(this.saveQueue.keys());\n            this.saveQueue.clear();\n\n            for (const collection of collectionsToSave) {\n                await this.saveCollection(collection);\n            }\n        }, 1000); // Batch saves every 1 second\n    }\n\n    async saveCollection(collection) {\n        try {\n            const filename = this.collections[collection];\n            const filePath = path.join(this.dataDir, filename);\n            const data = this.cache.get(collection) || [];\n            \n            await fs.writeFile(filePath, JSON.stringify(data, null, 2));\n        } catch (error) {\n            console.error(`Failed to save collection ${collection}:`, error);\n            throw error;\n        }\n    }\n\n    async close() {\n        // Save all pending changes\n        if (this.saveTimeout) {\n            clearTimeout(this.saveTimeout);\n        }\n\n        const collectionsToSave = Array.from(this.saveQueue.keys());\n        for (const collection of collectionsToSave) {\n            await this.saveCollection(collection);\n        }\n\n        console.log('📦 Database service closed');\n    }\n}"],"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","ignoreList":[]}