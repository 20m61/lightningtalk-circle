{"version":3,"names":["cov_m3jq3zvhv","actualCoverage","validationResult","rateLimit","s","validateRequest","req","res","next","f","errors","isEmpty","b","formattedErrors","array","map","error","field","path","param","message","msg","value","location","console","warn","ip","userAgent","get","method","url","originalUrl","timestamp","Date","toISOString","status","json","success","requestId","id","sanitizeInput","removeNullBytes","obj","replace","Object","keys","forEach","key","body","query","params","validateContentType","includes","is","received","validateFileUpload","maxSize","parseInt","process","env","MAX_FILE_SIZE","allowedTypes","ALLOWED_FILE_TYPES","split","file","size","fileExt","originalname","pop","toLowerCase","suspiciousPatterns","some","pattern","test","createRateLimiter","options","defaultOptions","windowMs","max","retryAfter","Math","ceil","standardHeaders","legacyHeaders","handler","rateLimiters","api","registration","email","admin","validateApiKey","apiKey","validApiKeys","API_KEYS","filter","length","startsWith","substring","securityHeaders","removeHeader","set","requestLogger","startTime","now","requestString","JSON","stringify","isSuspicious","on","duration"],"sources":["validation-enhanced.js"],"sourcesContent":["/**\n * Enhanced Validation Middleware for Lightning Talk Event Management\n * Uses express-validator for comprehensive input validation with security features\n */\n\nimport { validationResult } from 'express-validator';\nimport rateLimit from 'express-rate-limit';\n\n/**\n * Enhanced validation middleware with detailed error handling\n * @param {Object} req - Express request object\n * @param {Object} res - Express response object\n * @param {Function} next - Express next function\n */\nexport const validateRequest = (req, res, next) => {\n    const errors = validationResult(req);\n    \n    if (!errors.isEmpty()) {\n        const formattedErrors = errors.array().map(error => ({\n            field: error.path || error.param,\n            message: error.msg,\n            value: error.value,\n            location: error.location\n        }));\n\n        // Log validation failures for security monitoring\n        console.warn('Validation failed:', {\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            method: req.method,\n            url: req.originalUrl,\n            errors: formattedErrors,\n            timestamp: new Date().toISOString()\n        });\n\n        return res.status(400).json({\n            success: false,\n            message: 'Validation failed',\n            errors: formattedErrors,\n            timestamp: new Date().toISOString(),\n            requestId: req.id || 'unknown'\n        });\n    }\n\n    next();\n};\n\n/**\n * Sanitize and normalize input data\n */\nexport const sanitizeInput = (req, res, next) => {\n    // Remove null byte characters (security)\n    const removeNullBytes = (obj) => {\n        if (typeof obj === 'string') {\n            return obj.replace(/\\0/g, '');\n        }\n        if (typeof obj === 'object' && obj !== null) {\n            Object.keys(obj).forEach(key => {\n                obj[key] = removeNullBytes(obj[key]);\n            });\n        }\n        return obj;\n    };\n\n    req.body = removeNullBytes(req.body);\n    req.query = removeNullBytes(req.query);\n    req.params = removeNullBytes(req.params);\n\n    next();\n};\n\n/**\n * Check content type for JSON endpoints\n */\nexport const validateContentType = (req, res, next) => {\n    if (['POST', 'PUT', 'PATCH'].includes(req.method)) {\n        if (!req.is('application/json')) {\n            return res.status(415).json({\n                success: false,\n                message: 'Content-Type must be application/json',\n                received: req.get('Content-Type'),\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n    next();\n};\n\n/**\n * Validate file upload constraints\n */\nexport const validateFileUpload = (req, res, next) => {\n    const maxSize = parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024; // 10MB default\n    const allowedTypes = (process.env.ALLOWED_FILE_TYPES || '.jpg,.jpeg,.png,.pdf,.doc,.docx').split(',');\n\n    if (req.file) {\n        // Check file size\n        if (req.file.size > maxSize) {\n            return res.status(413).json({\n                success: false,\n                message: `File size exceeds maximum limit of ${maxSize} bytes`,\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        // Check file type\n        const fileExt = '.' + req.file.originalname.split('.').pop().toLowerCase();\n        if (!allowedTypes.includes(fileExt)) {\n            return res.status(400).json({\n                success: false,\n                message: `File type ${fileExt} is not allowed`,\n                allowedTypes: allowedTypes,\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        // Check for malicious file patterns\n        const suspiciousPatterns = [\n            /\\.php$/i, /\\.asp$/i, /\\.jsp$/i, /\\.exe$/i,\n            /\\.sh$/i, /\\.bat$/i, /\\.cmd$/i, /\\.scr$/i\n        ];\n\n        if (suspiciousPatterns.some(pattern => pattern.test(req.file.originalname))) {\n            return res.status(400).json({\n                success: false,\n                message: 'File type is not allowed for security reasons',\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n\n    next();\n};\n\n/**\n * Create rate limiter with custom options\n */\nexport const createRateLimiter = (options = {}) => {\n    const defaultOptions = {\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100,\n        message: {\n            success: false,\n            message: 'Too many requests from this IP, please try again later.',\n            retryAfter: Math.ceil(options.windowMs / 1000) || 900\n        },\n        standardHeaders: true,\n        legacyHeaders: false,\n        handler: (req, res) => {\n            console.warn('Rate limit exceeded:', {\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                method: req.method,\n                url: req.originalUrl,\n                timestamp: new Date().toISOString()\n            });\n\n            res.status(429).json(options.message);\n        }\n    };\n\n    return rateLimit({ ...defaultOptions, ...options });\n};\n\n/**\n * Specific rate limiters for different endpoints\n */\nexport const rateLimiters = {\n    // General API rate limiting\n    api: createRateLimiter({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100,\n        message: {\n            success: false,\n            message: 'Too many API requests from this IP',\n            retryAfter: 900\n        }\n    }),\n\n    // Registration endpoints (stricter)\n    registration: createRateLimiter({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 5,\n        message: {\n            success: false,\n            message: 'Too many registration attempts from this IP',\n            retryAfter: 3600\n        }\n    }),\n\n    // Email sending (very strict)\n    email: createRateLimiter({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 10,\n        message: {\n            success: false,\n            message: 'Too many email requests from this IP',\n            retryAfter: 3600\n        }\n    }),\n\n    // Admin endpoints\n    admin: createRateLimiter({\n        windowMs: 10 * 60 * 1000, // 10 minutes\n        max: 50,\n        message: {\n            success: false,\n            message: 'Too many admin requests from this IP',\n            retryAfter: 600\n        }\n    })\n};\n\n/**\n * Validate API key for protected endpoints\n */\nexport const validateApiKey = (req, res, next) => {\n    const apiKey = req.get('X-API-Key') || req.query.apiKey;\n    const validApiKeys = (process.env.API_KEYS || '').split(',').filter(key => key.length > 0);\n\n    if (req.path.startsWith('/api/admin') || req.path.startsWith('/api/protected')) {\n        if (!apiKey) {\n            return res.status(401).json({\n                success: false,\n                message: 'API key is required',\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        if (!validApiKeys.includes(apiKey)) {\n            console.warn('Invalid API key attempt:', {\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                path: req.path,\n                apiKey: apiKey?.substring(0, 8) + '...',\n                timestamp: new Date().toISOString()\n            });\n\n            return res.status(403).json({\n                success: false,\n                message: 'Invalid API key',\n                timestamp: new Date().toISOString()\n            });\n        }\n    }\n\n    next();\n};\n\n/**\n * Security headers middleware\n */\nexport const securityHeaders = (req, res, next) => {\n    // Remove server signature\n    res.removeHeader('X-Powered-By');\n    \n    // Add security headers\n    res.set({\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'SAMEORIGIN',\n        'X-XSS-Protection': '1; mode=block',\n        'Referrer-Policy': 'strict-origin-when-cross-origin',\n        'Permissions-Policy': 'camera=(), microphone=(), geolocation=()'\n    });\n\n    next();\n};\n\n/**\n * Request logging middleware for security monitoring\n */\nexport const requestLogger = (req, res, next) => {\n    const startTime = Date.now();\n    \n    // Log suspicious activity\n    const suspiciousPatterns = [\n        /\\.\\.\\//, // Path traversal\n        /<script/i, // XSS attempts\n        /union.*select/i, // SQL injection\n        /javascript:/i, // Javascript protocol\n        /data:/i // Data URI scheme\n    ];\n\n    const requestString = `${req.method} ${req.url} ${JSON.stringify(req.body)}`;\n    const isSuspicious = suspiciousPatterns.some(pattern => pattern.test(requestString));\n\n    if (isSuspicious) {\n        console.warn('Suspicious request detected:', {\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            method: req.method,\n            url: req.originalUrl,\n            body: req.body,\n            timestamp: new Date().toISOString()\n        });\n    }\n\n    // Log response time\n    res.on('finish', () => {\n        const duration = Date.now() - startTime;\n        if (duration > 5000) { // Log slow requests\n            console.warn('Slow request:', {\n                method: req.method,\n                url: req.originalUrl,\n                duration,\n                timestamp: new Date().toISOString()\n            });\n        }\n    });\n\n    next();\n};\n\nexport default { \n    validateRequest, \n    sanitizeInput,\n    validateContentType,\n    validateFileUpload,\n    createRateLimiter,\n    rateLimiters,\n    validateApiKey,\n    securityHeaders,\n    requestLogger\n};"],"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","ignoreList":[]}