9d324376c08a183b6e09be614aa1d819
"use strict";

var _globals = require("@jest/globals");
var _rest = require("@octokit/rest");
var _issues = require("../fixtures/issues.js");
/**
 * GitHub API統合テスト
 */

// GitHub API サービス（実装予定）
class GitHubService {
  constructor(token) {
    this.octokit = new _rest.Octokit({
      auth: token
    });
    this.owner = process.env.GITHUB_OWNER || 'test-owner';
    this.repo = process.env.GITHUB_REPO || 'test-repo';
  }
  async createIssue(issueData) {
    const response = await this.octokit.rest.issues.create({
      owner: this.owner,
      repo: this.repo,
      title: issueData.title,
      body: issueData.description,
      labels: issueData.labels || [],
      assignees: issueData.assignees || []
    });
    return response.data;
  }
  async getIssues(state = 'open') {
    const response = await this.octokit.rest.issues.listForRepo({
      owner: this.owner,
      repo: this.repo,
      state
    });
    return response.data;
  }
  async updateIssue(issueNumber, updates) {
    const response = await this.octokit.rest.issues.update({
      owner: this.owner,
      repo: this.repo,
      issue_number: issueNumber,
      ...updates
    });
    return response.data;
  }
  async closeIssue(issueNumber) {
    return this.updateIssue(issueNumber, {
      state: 'closed'
    });
  }
  async addLabelsToIssue(issueNumber, labels) {
    const response = await this.octokit.rest.issues.addLabels({
      owner: this.owner,
      repo: this.repo,
      issue_number: issueNumber,
      labels
    });
    return response.data;
  }
}
(0, _globals.describe)('GitHub API Integration', () => {
  let githubService;
  const createdIssues = []; // テスト中に作成されたIssueを追跡

  (0, _globals.beforeAll)(() => {
    const token = process.env.GITHUB_TOKEN;
    if (!token) {
      throw new Error('GITHUB_TOKEN environment variable is required for integration tests');
    }
    githubService = new GitHubService(token);
  });
  (0, _globals.afterAll)(async () => {
    // テスト中に作成されたIssueをクリーンアップ
    console.log(`Cleaning up ${createdIssues.length} test issues...`);
    for (const issueNumber of createdIssues) {
      try {
        await githubService.closeIssue(issueNumber);
        console.log(`Closed test issue #${issueNumber}`);
      } catch (error) {
        console.warn(`Failed to close test issue #${issueNumber}:`, error.message);
      }
    }
  });
  (0, _globals.beforeEach)(() => {
    // テスト前の準備
    console.log('Setting up test environment...');
  });
  (0, _globals.afterEach)(() => {
    // 各テスト後のクリーンアップ
    console.log('Test completed');
  });
  (0, _globals.describe)('Issue Creation', () => {
    (0, _globals.it)('should create a new issue successfully', async () => {
      const testIssue = {
        ..._issues.issueFixtures.valid.infrastructure,
        title: `[TEST] ${_issues.issueFixtures.valid.infrastructure.title} - ${Date.now()}`
      };
      const createdIssue = await githubService.createIssue(testIssue);
      createdIssues.push(createdIssue.number);
      (0, _globals.expect)(createdIssue).toHaveGitHubIssueStructure();
      (0, _globals.expect)(createdIssue.title).toBe(testIssue.title);
      (0, _globals.expect)(createdIssue.body).toBe(testIssue.description);
      (0, _globals.expect)(createdIssue.state).toBe('open');
      (0, _globals.expect)(createdIssue.labels).toEqual(_globals.expect.arrayContaining(testIssue.labels.map(label => _globals.expect.objectContaining({
        name: label
      }))));
    });
    (0, _globals.it)('should create multiple issues in batch', async () => {
      const batchIssues = _issues.issueFixtures.batch.map(issue => ({
        ...issue,
        title: `[TEST BATCH] ${issue.title} - ${Date.now()}`
      }));
      const createdIssuesData = [];
      for (const issueData of batchIssues) {
        const createdIssue = await githubService.createIssue(issueData);
        createdIssuesData.push(createdIssue);
        createdIssues.push(createdIssue.number);

        // API制限を考慮して少し待機
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      (0, _globals.expect)(createdIssuesData).toHaveLength(batchIssues.length);
      for (let i = 0; i < createdIssuesData.length; i++) {
        (0, _globals.expect)(createdIssuesData[i].title).toBe(batchIssues[i].title);
        (0, _globals.expect)(createdIssuesData[i].state).toBe('open');
      }
    });
    (0, _globals.it)('should handle invalid issue data gracefully', async () => {
      const invalidIssue = {
        title: '',
        // 空のタイトル
        description: 'Invalid issue test'
      };
      await (0, _globals.expect)(githubService.createIssue(invalidIssue)).rejects.toThrow();
    });
  });
  (0, _globals.describe)('Issue Retrieval', () => {
    (0, _globals.it)('should retrieve open issues', async () => {
      const openIssues = await githubService.getIssues('open');
      (0, _globals.expect)(Array.isArray(openIssues)).toBe(true);
      if (openIssues.length > 0) {
        openIssues.forEach(issue => {
          (0, _globals.expect)(issue).toHaveGitHubIssueStructure();
          (0, _globals.expect)(issue.state).toBe('open');
        });
      }
    });
    (0, _globals.it)('should retrieve closed issues', async () => {
      const closedIssues = await githubService.getIssues('closed');
      (0, _globals.expect)(Array.isArray(closedIssues)).toBe(true);
      if (closedIssues.length > 0) {
        closedIssues.forEach(issue => {
          (0, _globals.expect)(issue).toHaveGitHubIssueStructure();
          (0, _globals.expect)(issue.state).toBe('closed');
        });
      }
    });
    (0, _globals.it)('should retrieve all issues', async () => {
      const allIssues = await githubService.getIssues('all');
      (0, _globals.expect)(Array.isArray(allIssues)).toBe(true);
      if (allIssues.length > 0) {
        allIssues.forEach(issue => {
          (0, _globals.expect)(issue).toHaveGitHubIssueStructure();
          (0, _globals.expect)(['open', 'closed']).toContain(issue.state);
        });
      }
    });
  });
  (0, _globals.describe)('Issue Updates', () => {
    let testIssueNumber;
    (0, _globals.beforeEach)(async () => {
      // テスト用のIssueを作成
      const testIssue = {
        title: `[TEST UPDATE] Test Issue - ${Date.now()}`,
        description: 'This issue is created for update testing'
      };
      const createdIssue = await githubService.createIssue(testIssue);
      testIssueNumber = createdIssue.number;
      createdIssues.push(testIssueNumber);
    });
    (0, _globals.it)('should update issue title and body', async () => {
      const updates = {
        title: `[TEST UPDATE] Updated Title - ${Date.now()}`,
        body: 'Updated description for testing'
      };
      const updatedIssue = await githubService.updateIssue(testIssueNumber, updates);
      (0, _globals.expect)(updatedIssue.title).toBe(updates.title);
      (0, _globals.expect)(updatedIssue.body).toBe(updates.body);
      (0, _globals.expect)(updatedIssue.number).toBe(testIssueNumber);
    });
    (0, _globals.it)('should add labels to existing issue', async () => {
      const labelsToAdd = ['test-label', 'integration-test'];
      const updatedLabels = await githubService.addLabelsToIssue(testIssueNumber, labelsToAdd);
      (0, _globals.expect)(Array.isArray(updatedLabels)).toBe(true);
      (0, _globals.expect)(updatedLabels.length).toBeGreaterThanOrEqual(labelsToAdd.length);
      const labelNames = updatedLabels.map(label => label.name);
      labelsToAdd.forEach(label => {
        (0, _globals.expect)(labelNames).toContain(label);
      });
    });
    (0, _globals.it)('should close an issue', async () => {
      const closedIssue = await githubService.closeIssue(testIssueNumber);
      (0, _globals.expect)(closedIssue.state).toBe('closed');
      (0, _globals.expect)(closedIssue.number).toBe(testIssueNumber);
    });
  });
  (0, _globals.describe)('Error Handling', () => {
    (0, _globals.it)('should handle network errors gracefully', async () => {
      // 無効なトークンでサービスを作成
      const invalidService = new GitHubService('invalid-token');
      await (0, _globals.expect)(invalidService.getIssues()).rejects.toThrow();
    });
    (0, _globals.it)('should handle non-existent repository', async () => {
      const invalidService = new GitHubService(process.env.GITHUB_TOKEN);
      invalidService.owner = 'non-existent-owner';
      invalidService.repo = 'non-existent-repo';
      await (0, _globals.expect)(invalidService.getIssues()).rejects.toThrow();
    });
    (0, _globals.it)('should handle API rate limiting', async () => {
      // 大量のリクエストを送信してレート制限をテスト
      const promises = Array.from({
        length: 5
      }, () => githubService.getIssues());

      // 全てのリクエストが完了するか、適切にエラーハンドリングされることを確認
      const results = await Promise.allSettled(promises);
      results.forEach(result => {
        if (result.status === 'rejected') {
          // レート制限エラーが含まれる可能性があることを確認
          (0, _globals.expect)(result.reason.message).toMatch(/rate limit|API rate limit/i);
        }
      });
    });
  });
  (0, _globals.describe)('Performance Tests', () => {
    (0, _globals.it)('should handle concurrent issue creation', async () => {
      const concurrentIssues = Array.from({
        length: 3
      }, (_, index) => ({
        title: `[TEST CONCURRENT] Issue ${index + 1} - ${Date.now()}`,
        description: `Concurrent test issue ${index + 1}`
      }));
      const startTime = Date.now();
      const promises = concurrentIssues.map(issue => githubService.createIssue(issue));
      const createdIssuesData = await Promise.all(promises);
      const endTime = Date.now();

      // 作成されたIssueをクリーンアップリストに追加
      createdIssuesData.forEach(issue => {
        createdIssues.push(issue.number);
      });
      (0, _globals.expect)(createdIssuesData).toHaveLength(concurrentIssues.length);
      (0, _globals.expect)(endTime - startTime).toBeLessThan(10000); // 10秒以内

      console.log(`Created ${concurrentIssues.length} issues concurrently in ${endTime - startTime}ms`);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,