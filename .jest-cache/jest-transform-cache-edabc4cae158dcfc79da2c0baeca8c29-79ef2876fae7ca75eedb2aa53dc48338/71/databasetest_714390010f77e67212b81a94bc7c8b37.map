{"version":3,"names":["DatabaseService","require","describe","database","beforeEach","afterEach","close","it","instance1","getInstance","instance2","expect","toBe","toBeInstanceOf","connectionString","toBeDefined","customConfig","host","port","user","password","customDatabase","config","toEqual","objectContaining","query","jest","fn","mockResolvedValue","id","name","status","result","toHaveLength","toHaveBeenCalledWith","mockRejectedValue","Error","rejects","toThrow","mockTransaction","commit","rollback","beginTransaction","transaction","toHaveBeenCalled","initialize","waitForConnection","insertId","affectedRows","seedData","events","title","description","date","seed","mockResolvedValueOnce","promises","results","Promise","all","toHaveBeenCalledTimes","largeDataset","Array","from","length","_","i","startTime","Date","now","endTime","toBeLessThan"],"sources":["database.test.js"],"sourcesContent":["/**\n * Database Service Unit Tests\n * データベースサービスの単体テスト\n */\n\nconst { DatabaseService } = require('../../../server/services/database');\n\ndescribe('DatabaseService', () => {\n  let database;\n\n  beforeEach(() => {\n    database = new DatabaseService();\n  });\n\n  afterEach(async () => {\n    if (database && database.close) {\n      await database.close();\n    }\n  });\n\n  describe('getInstance', () => {\n    it('should return singleton instance', () => {\n      const instance1 = DatabaseService.getInstance();\n      const instance2 = DatabaseService.getInstance();\n      \n      expect(instance1).toBe(instance2);\n      expect(instance1).toBeInstanceOf(DatabaseService);\n    });\n  });\n\n  describe('initialization', () => {\n    it('should initialize with default configuration', () => {\n      expect(database).toBeInstanceOf(DatabaseService);\n      expect(database.connectionString).toBeDefined();\n    });\n\n    it('should handle custom configuration', () => {\n      const customConfig = {\n        host: 'localhost',\n        port: 5432,\n        database: 'test_db',\n        user: 'test_user',\n        password: 'test_pass'\n      };\n      \n      const customDatabase = new DatabaseService(customConfig);\n      expect(customDatabase.config).toEqual(expect.objectContaining(customConfig));\n    });\n  });\n\n  describe('query method', () => {\n    it('should handle simple queries', async () => {\n      // モックデータベースクエリ\n      database.query = jest.fn().mockResolvedValue([\n        { id: 1, name: 'Test Event', status: 'upcoming' },\n        { id: 2, name: 'Another Event', status: 'completed' }\n      ]);\n\n      const result = await database.query('SELECT * FROM events');\n      \n      expect(result).toHaveLength(2);\n      expect(result[0]).toEqual(expect.objectContaining({\n        id: 1,\n        name: 'Test Event',\n        status: 'upcoming'\n      }));\n      expect(database.query).toHaveBeenCalledWith('SELECT * FROM events');\n    });\n\n    it('should handle parameterized queries', async () => {\n      database.query = jest.fn().mockResolvedValue([\n        { id: 1, name: 'Test Event', status: 'upcoming' }\n      ]);\n\n      const result = await database.query(\n        'SELECT * FROM events WHERE id = ?',\n        [1]\n      );\n      \n      expect(result).toHaveLength(1);\n      expect(database.query).toHaveBeenCalledWith(\n        'SELECT * FROM events WHERE id = ?',\n        [1]\n      );\n    });\n\n    it('should handle query errors', async () => {\n      database.query = jest.fn().mockRejectedValue(new Error('Database connection failed'));\n\n      await expect(database.query('SELECT * FROM events'))\n        .rejects\n        .toThrow('Database connection failed');\n    });\n  });\n\n  describe('transaction support', () => {\n    it('should support transactions', async () => {\n      const mockTransaction = {\n        query: jest.fn().mockResolvedValue([{ id: 1 }]),\n        commit: jest.fn().mockResolvedValue(true),\n        rollback: jest.fn().mockResolvedValue(true)\n      };\n      \n      database.beginTransaction = jest.fn().mockResolvedValue(mockTransaction);\n      \n      const transaction = await database.beginTransaction();\n      \n      expect(transaction).toEqual(mockTransaction);\n      expect(database.beginTransaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('connection management', () => {\n    it('should initialize connection', async () => {\n      database.initialize = jest.fn().mockResolvedValue(true);\n      \n      const result = await database.initialize();\n      \n      expect(result).toBe(true);\n      expect(database.initialize).toHaveBeenCalled();\n    });\n\n    it('should wait for connection', async () => {\n      database.waitForConnection = jest.fn().mockResolvedValue(true);\n      \n      const result = await database.waitForConnection();\n      \n      expect(result).toBe(true);\n      expect(database.waitForConnection).toHaveBeenCalled();\n    });\n\n    it('should close connection gracefully', async () => {\n      database.close = jest.fn().mockResolvedValue(true);\n      \n      const result = await database.close();\n      \n      expect(result).toBe(true);\n      expect(database.close).toHaveBeenCalled();\n    });\n  });\n\n  describe('data operations', () => {\n    beforeEach(() => {\n      // 共通のモックメソッドを設定\n      database.query = jest.fn();\n    });\n\n    it('should insert data', async () => {\n      database.query.mockResolvedValue([{ insertId: 1 }]);\n      \n      const result = await database.query(\n        'INSERT INTO events (title, description) VALUES (?, ?)',\n        ['Test Event', 'Test Description']\n      );\n      \n      expect(result[0].insertId).toBe(1);\n    });\n\n    it('should update data', async () => {\n      database.query.mockResolvedValue([{ affectedRows: 1 }]);\n      \n      const result = await database.query(\n        'UPDATE events SET title = ? WHERE id = ?',\n        ['Updated Title', 1]\n      );\n      \n      expect(result[0].affectedRows).toBe(1);\n    });\n\n    it('should delete data', async () => {\n      database.query.mockResolvedValue([{ affectedRows: 1 }]);\n      \n      const result = await database.query(\n        'DELETE FROM events WHERE id = ?',\n        [1]\n      );\n      \n      expect(result[0].affectedRows).toBe(1);\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle connection errors', async () => {\n      database.initialize = jest.fn().mockRejectedValue(\n        new Error('Connection refused')\n      );\n      \n      await expect(database.initialize())\n        .rejects\n        .toThrow('Connection refused');\n    });\n\n    it('should handle query timeout', async () => {\n      database.query = jest.fn().mockRejectedValue(\n        new Error('Query timeout')\n      );\n      \n      await expect(database.query('SELECT * FROM events'))\n        .rejects\n        .toThrow('Query timeout');\n    });\n\n    it('should handle invalid SQL', async () => {\n      database.query = jest.fn().mockRejectedValue(\n        new Error('Syntax error in SQL statement')\n      );\n      \n      await expect(database.query('INVALID SQL'))\n        .rejects\n        .toThrow('Syntax error in SQL statement');\n    });\n  });\n\n  describe('data seeding', () => {\n    it('should seed database with test data', async () => {\n      const seedData = {\n        events: [\n          {\n            title: 'Test Event',\n            description: 'Test Description',\n            date: '2025-06-25T19:00:00Z'\n          }\n        ]\n      };\n      \n      database.seed = jest.fn().mockResolvedValue(true);\n      \n      const result = await database.seed(seedData);\n      \n      expect(result).toBe(true);\n      expect(database.seed).toHaveBeenCalledWith(seedData);\n    });\n  });\n\n  describe('performance', () => {\n    it('should handle multiple concurrent queries', async () => {\n      database.query = jest.fn()\n        .mockResolvedValueOnce([{ id: 1 }])\n        .mockResolvedValueOnce([{ id: 2 }])\n        .mockResolvedValueOnce([{ id: 3 }]);\n      \n      const promises = [\n        database.query('SELECT * FROM events WHERE id = 1'),\n        database.query('SELECT * FROM events WHERE id = 2'),\n        database.query('SELECT * FROM events WHERE id = 3')\n      ];\n      \n      const results = await Promise.all(promises);\n      \n      expect(results).toHaveLength(3);\n      expect(database.query).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle large result sets efficiently', async () => {\n      const largeDataset = Array.from({ length: 1000 }, (_, i) => ({\n        id: i + 1,\n        name: `Event ${i + 1}`,\n        status: 'upcoming'\n      }));\n      \n      database.query = jest.fn().mockResolvedValue(largeDataset);\n      \n      const startTime = Date.now();\n      const result = await database.query('SELECT * FROM events');\n      const endTime = Date.now();\n      \n      expect(result).toHaveLength(1000);\n      expect(endTime - startTime).toBeLessThan(1000); // 1秒以内\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}