{"version":3,"names":["analyticsService","require","describe","mockDatabase","beforeEach","query","jest","fn","db","afterEach","clearAllMocks","it","eventId","mockBasicStats","id","title","total_participants","total_talks","online_participants","offline_participants","getBasicEventStats","mockResolvedValue","eventInfo","summary","totalParticipants","totalTalks","onlineParticipants","offlineParticipants","getParticipantStats","distribution","byType","type","count","percentage","getTalkStats","byCategory","category","result","getEventStatistics","expect","toHaveProperty","statistics","basic","toBe","options","includeTrends","getEventTrends","registrations","daily","date","cumulative","total","trends","toBeDefined","toHaveBeenCalledWith","mockRejectedValue","Error","rejects","toThrow","mockQueryResult","venue","status","confirmed_talks","pending_talks","avg_talk_duration","stringContaining","mockDistribution","participation_type","mockTimeline","mockGeographic","location","mockAttributes","organization_type","avg_experience_level","mockResolvedValueOnce","processRegistrationTimeline","mockReturnValue","online","offline","calculateAveragePerDay","findPeakRegistrationDay","toHaveLength","timeline","averagePerDay","mockTalkDistribution","avg_duration","mockSpeakerAnalysis","unique_speakers","talks_per_speaker","first_time_speakers","experienced_speakers","mockSubmissionTimeline","submissions","mockCategoryPopularity","groupByStatus","confirmed","averageDuration","processSubmissionTimeline","pending","calculateAverageDuration","analyzeDurationDistribution","speakers","uniqueSpeakers","firstTimeSpeakers","duration","average","reportType","mockStats","participants","generateSummaryReport","keyMetrics","talks","onlineRatio","generateReport","objectContaining","includeDetails","toEqual","toBeNull","data","value","linearRegression","nextWeek","toBeGreaterThan","confidence","toBeGreaterThanOrEqual","toBeLessThanOrEqual","largeDataset","Array","from","length","_","i","created_at","Date","startTime","now","endTime","toBeLessThan"],"sources":["analytics.test.js"],"sourcesContent":["/**\n * Analytics Service Unit Tests\n * 分析サービスの単体テスト\n */\n\nconst analyticsService = require('../../../server/services/analyticsService');\n\ndescribe('AnalyticsService', () => {\n  let mockDatabase;\n\n  beforeEach(() => {\n    // データベースのモックを設定\n    mockDatabase = {\n      query: jest.fn()\n    };\n    \n    analyticsService.db = mockDatabase;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getEventStatistics', () => {\n    it('should return basic event statistics', async () => {\n      const eventId = 'event-001';\n      const mockBasicStats = {\n        id: 'event-001',\n        title: 'Test Event',\n        total_participants: 25,\n        total_talks: 8,\n        online_participants: 15,\n        offline_participants: 10\n      };\n\n      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({\n        eventInfo: {\n          id: eventId,\n          title: 'Test Event'\n        },\n        summary: {\n          totalParticipants: 25,\n          totalTalks: 8,\n          onlineParticipants: 15,\n          offlineParticipants: 10\n        }\n      });\n\n      analyticsService.getParticipantStats = jest.fn().mockResolvedValue({\n        distribution: {\n          byType: [\n            { type: 'online', count: 15, percentage: 60 },\n            { type: 'offline', count: 10, percentage: 40 }\n          ]\n        }\n      });\n\n      analyticsService.getTalkStats = jest.fn().mockResolvedValue({\n        distribution: {\n          byCategory: [\n            { category: '技術', count: 5, percentage: 62.5 },\n            { category: '趣味', count: 3, percentage: 37.5 }\n          ]\n        }\n      });\n\n      const result = await analyticsService.getEventStatistics(eventId);\n\n      expect(result).toHaveProperty('eventId', eventId);\n      expect(result).toHaveProperty('generatedAt');\n      expect(result.statistics.basic.summary.totalParticipants).toBe(25);\n      expect(result.statistics.basic.summary.totalTalks).toBe(8);\n    });\n\n    it('should include trends when requested', async () => {\n      const eventId = 'event-001';\n      const options = { includeTrends: true };\n\n      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({\n        eventInfo: { id: eventId },\n        summary: { totalParticipants: 25 }\n      });\n      analyticsService.getParticipantStats = jest.fn().mockResolvedValue({ distribution: {} });\n      analyticsService.getTalkStats = jest.fn().mockResolvedValue({ distribution: {} });\n      analyticsService.getEventTrends = jest.fn().mockResolvedValue({\n        registrations: {\n          daily: [{ date: '2025-06-20', count: 5 }],\n          cumulative: [{ date: '2025-06-20', total: 5 }]\n        }\n      });\n\n      const result = await analyticsService.getEventStatistics(eventId, options);\n\n      expect(result.trends).toBeDefined();\n      expect(analyticsService.getEventTrends).toHaveBeenCalledWith(eventId, options);\n    });\n\n    it('should handle errors gracefully', async () => {\n      const eventId = 'invalid-event';\n      \n      analyticsService.getBasicEventStats = jest.fn().mockRejectedValue(\n        new Error('Event not found')\n      );\n\n      await expect(analyticsService.getEventStatistics(eventId))\n        .rejects\n        .toThrow('Failed to generate event statistics');\n    });\n  });\n\n  describe('getBasicEventStats', () => {\n    it('should query and return basic event statistics', async () => {\n      const eventId = 'event-001';\n      const mockQueryResult = [{\n        id: 'event-001',\n        title: 'Test Event',\n        date: '2025-06-25T19:00:00Z',\n        venue: 'Test Venue',\n        status: 'upcoming',\n        total_participants: 25,\n        total_talks: 8,\n        online_participants: 15,\n        offline_participants: 10,\n        confirmed_talks: 6,\n        pending_talks: 2,\n        avg_talk_duration: 5.5\n      }];\n\n      mockDatabase.query.mockResolvedValue(mockQueryResult);\n\n      const result = await analyticsService.getBasicEventStats(eventId);\n\n      expect(result.eventInfo.id).toBe(eventId);\n      expect(result.eventInfo.title).toBe('Test Event');\n      expect(result.summary.totalParticipants).toBe(25);\n      expect(result.summary.totalTalks).toBe(8);\n      expect(result.summary.onlineParticipants).toBe(15);\n      expect(result.summary.offlineParticipants).toBe(10);\n      expect(mockDatabase.query).toHaveBeenCalledWith(\n        expect.stringContaining('SELECT'),\n        [eventId]\n      );\n    });\n\n    it('should throw error when event not found', async () => {\n      const eventId = 'nonexistent';\n      mockDatabase.query.mockResolvedValue([]);\n\n      await expect(analyticsService.getBasicEventStats(eventId))\n        .rejects\n        .toThrow('Event not found');\n    });\n  });\n\n  describe('getParticipantStats', () => {\n    it('should return participant distribution statistics', async () => {\n      const eventId = 'event-001';\n      const mockDistribution = [\n        { participation_type: 'online', count: 15, percentage: 60.0 },\n        { participation_type: 'offline', count: 10, percentage: 40.0 }\n      ];\n      const mockTimeline = [\n        { date: '2025-06-20', registrations: 5, participation_type: 'online' },\n        { date: '2025-06-20', registrations: 3, participation_type: 'offline' }\n      ];\n      const mockGeographic = [\n        { location: '東京都', count: 12 },\n        { location: '大阪府', count: 8 }\n      ];\n      const mockAttributes = [\n        { organization_type: 'Individual', count: 18, avg_experience_level: 2.1 },\n        { organization_type: 'Company', count: 7, avg_experience_level: 2.8 }\n      ];\n\n      mockDatabase.query\n        .mockResolvedValueOnce(mockDistribution)\n        .mockResolvedValueOnce(mockTimeline)\n        .mockResolvedValueOnce(mockGeographic)\n        .mockResolvedValueOnce(mockAttributes);\n\n      analyticsService.processRegistrationTimeline = jest.fn().mockReturnValue([\n        { date: '2025-06-20', online: 5, offline: 3, total: 8 }\n      ]);\n      analyticsService.calculateAveragePerDay = jest.fn().mockReturnValue(4.2);\n      analyticsService.findPeakRegistrationDay = jest.fn().mockReturnValue({\n        date: '2025-06-20',\n        registrations: 8\n      });\n\n      const result = await analyticsService.getParticipantStats(eventId);\n\n      expect(result.distribution.byType).toHaveLength(2);\n      expect(result.distribution.byType[0].type).toBe('online');\n      expect(result.distribution.byType[0].count).toBe(15);\n      expect(result.distribution.byType[0].percentage).toBe(60);\n      expect(result.timeline).toHaveLength(1);\n      expect(result.summary.averagePerDay).toBe(4.2);\n    });\n  });\n\n  describe('getTalkStats', () => {\n    it('should return talk distribution and speaker statistics', async () => {\n      const eventId = 'event-001';\n      const mockTalkDistribution = [\n        { category: '技術', status: 'confirmed', count: 5, avg_duration: 5.2 },\n        { category: '趣味', status: 'confirmed', count: 3, avg_duration: 4.8 }\n      ];\n      const mockSpeakerAnalysis = [{\n        unique_speakers: 8,\n        total_talks: 8,\n        talks_per_speaker: 1.0,\n        first_time_speakers: 3,\n        experienced_speakers: 5\n      }];\n      const mockSubmissionTimeline = [\n        { date: '2025-06-15', submissions: 3, status: 'confirmed' },\n        { date: '2025-06-16', submissions: 2, status: 'pending' }\n      ];\n      const mockCategoryPopularity = [\n        { category: '技術', count: 5, percentage: 62.5, avg_duration: 5.2 },\n        { category: '趣味', count: 3, percentage: 37.5, avg_duration: 4.8 }\n      ];\n\n      mockDatabase.query\n        .mockResolvedValueOnce(mockTalkDistribution)\n        .mockResolvedValueOnce(mockSpeakerAnalysis)\n        .mockResolvedValueOnce(mockSubmissionTimeline)\n        .mockResolvedValueOnce(mockCategoryPopularity);\n\n      analyticsService.groupByStatus = jest.fn().mockReturnValue({\n        confirmed: [\n          { category: '技術', count: 5, averageDuration: 5.2 },\n          { category: '趣味', count: 3, averageDuration: 4.8 }\n        ]\n      });\n      analyticsService.processSubmissionTimeline = jest.fn().mockReturnValue([\n        { date: '2025-06-15', confirmed: 3, pending: 0, total: 3 }\n      ]);\n      analyticsService.calculateAverageDuration = jest.fn().mockReturnValue(5.0);\n      analyticsService.analyzeDurationDistribution = jest.fn().mockReturnValue({\n        '5min': 6,\n        '10min': 2\n      });\n\n      const result = await analyticsService.getTalkStats(eventId);\n\n      expect(result.distribution.byCategory).toHaveLength(2);\n      expect(result.distribution.byCategory[0].category).toBe('技術');\n      expect(result.speakers.uniqueSpeakers).toBe(8);\n      expect(result.speakers.totalTalks).toBe(8);\n      expect(result.speakers.firstTimeSpeakers).toBe(3);\n      expect(result.duration.average).toBe(5.0);\n    });\n  });\n\n  describe('generateReport', () => {\n    it('should generate summary report', async () => {\n      const eventId = 'event-001';\n      const reportType = 'summary';\n      const mockStats = {\n        statistics: {\n          basic: {\n            eventInfo: {\n              title: 'Test Event'\n            },\n            summary: {\n              totalParticipants: 25,\n              totalTalks: 8\n            }\n          },\n          participants: {\n            distribution: {\n              byType: [\n                { type: 'online', percentage: 60 }\n              ]\n            }\n          }\n        }\n      };\n\n      analyticsService.getEventStatistics = jest.fn().mockResolvedValue(mockStats);\n      analyticsService.generateSummaryReport = jest.fn().mockReturnValue({\n        type: 'summary',\n        title: 'Test Event - サマリーレポート',\n        keyMetrics: {\n          participants: 25,\n          talks: 8,\n          onlineRatio: 60\n        }\n      });\n\n      const result = await analyticsService.generateReport(eventId, reportType);\n\n      expect(result.type).toBe('summary');\n      expect(result.keyMetrics.participants).toBe(25);\n      expect(analyticsService.getEventStatistics).toHaveBeenCalledWith(\n        eventId,\n        expect.objectContaining({\n          includeDetails: true,\n          includeTrends: true\n        })\n      );\n    });\n\n    it('should throw error for invalid report type', async () => {\n      const eventId = 'event-001';\n      const reportType = 'invalid';\n\n      analyticsService.getEventStatistics = jest.fn().mockResolvedValue({});\n\n      await expect(analyticsService.generateReport(eventId, reportType))\n        .rejects\n        .toThrow('Invalid report type');\n    });\n  });\n\n  describe('helper methods', () => {\n    describe('processRegistrationTimeline', () => {\n      it('should process timeline data correctly', () => {\n        const timeline = [\n          { date: '2025-06-20', registrations: 5, participation_type: 'online' },\n          { date: '2025-06-20', registrations: 3, participation_type: 'offline' },\n          { date: '2025-06-21', registrations: 7, participation_type: 'online' }\n        ];\n\n        const result = analyticsService.processRegistrationTimeline(timeline);\n\n        expect(result).toHaveLength(2);\n        expect(result[0]).toEqual({\n          date: '2025-06-20',\n          online: 5,\n          offline: 3,\n          total: 8\n        });\n        expect(result[1]).toEqual({\n          date: '2025-06-21',\n          online: 7,\n          offline: 0,\n          total: 7\n        });\n      });\n    });\n\n    describe('calculateAveragePerDay', () => {\n      it('should calculate average registrations per day', () => {\n        const timeline = [\n          { date: '2025-06-20', registrations: 5 },\n          { date: '2025-06-21', registrations: 7 },\n          { date: '2025-06-21', registrations: 3 }\n        ];\n\n        const result = analyticsService.calculateAveragePerDay(timeline);\n\n        expect(result).toBe(7.5); // 15 registrations / 2 unique days\n      });\n\n      it('should return 0 for empty timeline', () => {\n        const result = analyticsService.calculateAveragePerDay([]);\n        expect(result).toBe(0);\n      });\n    });\n\n    describe('findPeakRegistrationDay', () => {\n      it('should find day with highest registrations', () => {\n        const timeline = [\n          { date: '2025-06-20', registrations: 5 },\n          { date: '2025-06-21', registrations: 12 },\n          { date: '2025-06-22', registrations: 7 }\n        ];\n\n        const result = analyticsService.findPeakRegistrationDay(timeline);\n\n        expect(result).toEqual({\n          date: '2025-06-21',\n          registrations: 12\n        });\n      });\n\n      it('should return null for empty timeline', () => {\n        const result = analyticsService.findPeakRegistrationDay([]);\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('linearRegression', () => {\n      it('should calculate linear regression for predictions', () => {\n        const data = [\n          { value: 2 },\n          { value: 4 },\n          { value: 6 },\n          { value: 8 }\n        ];\n\n        const result = analyticsService.linearRegression(data);\n\n        expect(result).toHaveProperty('nextWeek');\n        expect(result).toHaveProperty('confidence');\n        expect(result.nextWeek).toBeGreaterThan(0);\n        expect(result.confidence).toBeGreaterThanOrEqual(0);\n        expect(result.confidence).toBeLessThanOrEqual(1);\n      });\n\n      it('should handle insufficient data', () => {\n        const data = [{ value: 5 }];\n\n        const result = analyticsService.linearRegression(data);\n\n        expect(result.nextWeek).toBe(0);\n        expect(result.confidence).toBe(0);\n      });\n    });\n  });\n\n  describe('performance tests', () => {\n    it('should handle large datasets efficiently', async () => {\n      const eventId = 'large-event';\n      const largeDataset = Array.from({ length: 1000 }, (_, i) => ({\n        id: i + 1,\n        participation_type: i % 2 === 0 ? 'online' : 'offline',\n        created_at: new Date(2025, 5, 20 + (i % 7))\n      }));\n\n      mockDatabase.query.mockResolvedValue(largeDataset);\n      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({\n        eventInfo: { id: eventId },\n        summary: { totalParticipants: 1000 }\n      });\n      analyticsService.getTalkStats = jest.fn().mockResolvedValue({ distribution: {} });\n\n      const startTime = Date.now();\n      await analyticsService.getParticipantStats(eventId);\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(1000); // 1秒以内\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}