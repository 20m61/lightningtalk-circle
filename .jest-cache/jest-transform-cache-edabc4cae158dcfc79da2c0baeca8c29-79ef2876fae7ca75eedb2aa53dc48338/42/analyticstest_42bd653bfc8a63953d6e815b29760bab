7c119f0a7fc11f585819221cb6d7553e
/**
 * Analytics Service Unit Tests
 * 分析サービスの単体テスト
 */

const analyticsService = require('../../../server/services/analyticsService');
describe('AnalyticsService', () => {
  let mockDatabase;
  beforeEach(() => {
    // データベースのモックを設定
    mockDatabase = {
      query: jest.fn()
    };
    analyticsService.db = mockDatabase;
  });
  afterEach(() => {
    jest.clearAllMocks();
  });
  describe('getEventStatistics', () => {
    it('should return basic event statistics', async () => {
      const eventId = 'event-001';
      const mockBasicStats = {
        id: 'event-001',
        title: 'Test Event',
        total_participants: 25,
        total_talks: 8,
        online_participants: 15,
        offline_participants: 10
      };
      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({
        eventInfo: {
          id: eventId,
          title: 'Test Event'
        },
        summary: {
          totalParticipants: 25,
          totalTalks: 8,
          onlineParticipants: 15,
          offlineParticipants: 10
        }
      });
      analyticsService.getParticipantStats = jest.fn().mockResolvedValue({
        distribution: {
          byType: [{
            type: 'online',
            count: 15,
            percentage: 60
          }, {
            type: 'offline',
            count: 10,
            percentage: 40
          }]
        }
      });
      analyticsService.getTalkStats = jest.fn().mockResolvedValue({
        distribution: {
          byCategory: [{
            category: '技術',
            count: 5,
            percentage: 62.5
          }, {
            category: '趣味',
            count: 3,
            percentage: 37.5
          }]
        }
      });
      const result = await analyticsService.getEventStatistics(eventId);
      expect(result).toHaveProperty('eventId', eventId);
      expect(result).toHaveProperty('generatedAt');
      expect(result.statistics.basic.summary.totalParticipants).toBe(25);
      expect(result.statistics.basic.summary.totalTalks).toBe(8);
    });
    it('should include trends when requested', async () => {
      const eventId = 'event-001';
      const options = {
        includeTrends: true
      };
      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({
        eventInfo: {
          id: eventId
        },
        summary: {
          totalParticipants: 25
        }
      });
      analyticsService.getParticipantStats = jest.fn().mockResolvedValue({
        distribution: {}
      });
      analyticsService.getTalkStats = jest.fn().mockResolvedValue({
        distribution: {}
      });
      analyticsService.getEventTrends = jest.fn().mockResolvedValue({
        registrations: {
          daily: [{
            date: '2025-06-20',
            count: 5
          }],
          cumulative: [{
            date: '2025-06-20',
            total: 5
          }]
        }
      });
      const result = await analyticsService.getEventStatistics(eventId, options);
      expect(result.trends).toBeDefined();
      expect(analyticsService.getEventTrends).toHaveBeenCalledWith(eventId, options);
    });
    it('should handle errors gracefully', async () => {
      const eventId = 'invalid-event';
      analyticsService.getBasicEventStats = jest.fn().mockRejectedValue(new Error('Event not found'));
      await expect(analyticsService.getEventStatistics(eventId)).rejects.toThrow('Failed to generate event statistics');
    });
  });
  describe('getBasicEventStats', () => {
    it('should query and return basic event statistics', async () => {
      const eventId = 'event-001';
      const mockQueryResult = [{
        id: 'event-001',
        title: 'Test Event',
        date: '2025-06-25T19:00:00Z',
        venue: 'Test Venue',
        status: 'upcoming',
        total_participants: 25,
        total_talks: 8,
        online_participants: 15,
        offline_participants: 10,
        confirmed_talks: 6,
        pending_talks: 2,
        avg_talk_duration: 5.5
      }];
      mockDatabase.query.mockResolvedValue(mockQueryResult);
      const result = await analyticsService.getBasicEventStats(eventId);
      expect(result.eventInfo.id).toBe(eventId);
      expect(result.eventInfo.title).toBe('Test Event');
      expect(result.summary.totalParticipants).toBe(25);
      expect(result.summary.totalTalks).toBe(8);
      expect(result.summary.onlineParticipants).toBe(15);
      expect(result.summary.offlineParticipants).toBe(10);
      expect(mockDatabase.query).toHaveBeenCalledWith(expect.stringContaining('SELECT'), [eventId]);
    });
    it('should throw error when event not found', async () => {
      const eventId = 'nonexistent';
      mockDatabase.query.mockResolvedValue([]);
      await expect(analyticsService.getBasicEventStats(eventId)).rejects.toThrow('Event not found');
    });
  });
  describe('getParticipantStats', () => {
    it('should return participant distribution statistics', async () => {
      const eventId = 'event-001';
      const mockDistribution = [{
        participation_type: 'online',
        count: 15,
        percentage: 60.0
      }, {
        participation_type: 'offline',
        count: 10,
        percentage: 40.0
      }];
      const mockTimeline = [{
        date: '2025-06-20',
        registrations: 5,
        participation_type: 'online'
      }, {
        date: '2025-06-20',
        registrations: 3,
        participation_type: 'offline'
      }];
      const mockGeographic = [{
        location: '東京都',
        count: 12
      }, {
        location: '大阪府',
        count: 8
      }];
      const mockAttributes = [{
        organization_type: 'Individual',
        count: 18,
        avg_experience_level: 2.1
      }, {
        organization_type: 'Company',
        count: 7,
        avg_experience_level: 2.8
      }];
      mockDatabase.query.mockResolvedValueOnce(mockDistribution).mockResolvedValueOnce(mockTimeline).mockResolvedValueOnce(mockGeographic).mockResolvedValueOnce(mockAttributes);
      analyticsService.processRegistrationTimeline = jest.fn().mockReturnValue([{
        date: '2025-06-20',
        online: 5,
        offline: 3,
        total: 8
      }]);
      analyticsService.calculateAveragePerDay = jest.fn().mockReturnValue(4.2);
      analyticsService.findPeakRegistrationDay = jest.fn().mockReturnValue({
        date: '2025-06-20',
        registrations: 8
      });
      const result = await analyticsService.getParticipantStats(eventId);
      expect(result.distribution.byType).toHaveLength(2);
      expect(result.distribution.byType[0].type).toBe('online');
      expect(result.distribution.byType[0].count).toBe(15);
      expect(result.distribution.byType[0].percentage).toBe(60);
      expect(result.timeline).toHaveLength(1);
      expect(result.summary.averagePerDay).toBe(4.2);
    });
  });
  describe('getTalkStats', () => {
    it('should return talk distribution and speaker statistics', async () => {
      const eventId = 'event-001';
      const mockTalkDistribution = [{
        category: '技術',
        status: 'confirmed',
        count: 5,
        avg_duration: 5.2
      }, {
        category: '趣味',
        status: 'confirmed',
        count: 3,
        avg_duration: 4.8
      }];
      const mockSpeakerAnalysis = [{
        unique_speakers: 8,
        total_talks: 8,
        talks_per_speaker: 1.0,
        first_time_speakers: 3,
        experienced_speakers: 5
      }];
      const mockSubmissionTimeline = [{
        date: '2025-06-15',
        submissions: 3,
        status: 'confirmed'
      }, {
        date: '2025-06-16',
        submissions: 2,
        status: 'pending'
      }];
      const mockCategoryPopularity = [{
        category: '技術',
        count: 5,
        percentage: 62.5,
        avg_duration: 5.2
      }, {
        category: '趣味',
        count: 3,
        percentage: 37.5,
        avg_duration: 4.8
      }];
      mockDatabase.query.mockResolvedValueOnce(mockTalkDistribution).mockResolvedValueOnce(mockSpeakerAnalysis).mockResolvedValueOnce(mockSubmissionTimeline).mockResolvedValueOnce(mockCategoryPopularity);
      analyticsService.groupByStatus = jest.fn().mockReturnValue({
        confirmed: [{
          category: '技術',
          count: 5,
          averageDuration: 5.2
        }, {
          category: '趣味',
          count: 3,
          averageDuration: 4.8
        }]
      });
      analyticsService.processSubmissionTimeline = jest.fn().mockReturnValue([{
        date: '2025-06-15',
        confirmed: 3,
        pending: 0,
        total: 3
      }]);
      analyticsService.calculateAverageDuration = jest.fn().mockReturnValue(5.0);
      analyticsService.analyzeDurationDistribution = jest.fn().mockReturnValue({
        '5min': 6,
        '10min': 2
      });
      const result = await analyticsService.getTalkStats(eventId);
      expect(result.distribution.byCategory).toHaveLength(2);
      expect(result.distribution.byCategory[0].category).toBe('技術');
      expect(result.speakers.uniqueSpeakers).toBe(8);
      expect(result.speakers.totalTalks).toBe(8);
      expect(result.speakers.firstTimeSpeakers).toBe(3);
      expect(result.duration.average).toBe(5.0);
    });
  });
  describe('generateReport', () => {
    it('should generate summary report', async () => {
      const eventId = 'event-001';
      const reportType = 'summary';
      const mockStats = {
        statistics: {
          basic: {
            eventInfo: {
              title: 'Test Event'
            },
            summary: {
              totalParticipants: 25,
              totalTalks: 8
            }
          },
          participants: {
            distribution: {
              byType: [{
                type: 'online',
                percentage: 60
              }]
            }
          }
        }
      };
      analyticsService.getEventStatistics = jest.fn().mockResolvedValue(mockStats);
      analyticsService.generateSummaryReport = jest.fn().mockReturnValue({
        type: 'summary',
        title: 'Test Event - サマリーレポート',
        keyMetrics: {
          participants: 25,
          talks: 8,
          onlineRatio: 60
        }
      });
      const result = await analyticsService.generateReport(eventId, reportType);
      expect(result.type).toBe('summary');
      expect(result.keyMetrics.participants).toBe(25);
      expect(analyticsService.getEventStatistics).toHaveBeenCalledWith(eventId, expect.objectContaining({
        includeDetails: true,
        includeTrends: true
      }));
    });
    it('should throw error for invalid report type', async () => {
      const eventId = 'event-001';
      const reportType = 'invalid';
      analyticsService.getEventStatistics = jest.fn().mockResolvedValue({});
      await expect(analyticsService.generateReport(eventId, reportType)).rejects.toThrow('Invalid report type');
    });
  });
  describe('helper methods', () => {
    describe('processRegistrationTimeline', () => {
      it('should process timeline data correctly', () => {
        const timeline = [{
          date: '2025-06-20',
          registrations: 5,
          participation_type: 'online'
        }, {
          date: '2025-06-20',
          registrations: 3,
          participation_type: 'offline'
        }, {
          date: '2025-06-21',
          registrations: 7,
          participation_type: 'online'
        }];
        const result = analyticsService.processRegistrationTimeline(timeline);
        expect(result).toHaveLength(2);
        expect(result[0]).toEqual({
          date: '2025-06-20',
          online: 5,
          offline: 3,
          total: 8
        });
        expect(result[1]).toEqual({
          date: '2025-06-21',
          online: 7,
          offline: 0,
          total: 7
        });
      });
    });
    describe('calculateAveragePerDay', () => {
      it('should calculate average registrations per day', () => {
        const timeline = [{
          date: '2025-06-20',
          registrations: 5
        }, {
          date: '2025-06-21',
          registrations: 7
        }, {
          date: '2025-06-21',
          registrations: 3
        }];
        const result = analyticsService.calculateAveragePerDay(timeline);
        expect(result).toBe(7.5); // 15 registrations / 2 unique days
      });
      it('should return 0 for empty timeline', () => {
        const result = analyticsService.calculateAveragePerDay([]);
        expect(result).toBe(0);
      });
    });
    describe('findPeakRegistrationDay', () => {
      it('should find day with highest registrations', () => {
        const timeline = [{
          date: '2025-06-20',
          registrations: 5
        }, {
          date: '2025-06-21',
          registrations: 12
        }, {
          date: '2025-06-22',
          registrations: 7
        }];
        const result = analyticsService.findPeakRegistrationDay(timeline);
        expect(result).toEqual({
          date: '2025-06-21',
          registrations: 12
        });
      });
      it('should return null for empty timeline', () => {
        const result = analyticsService.findPeakRegistrationDay([]);
        expect(result).toBeNull();
      });
    });
    describe('linearRegression', () => {
      it('should calculate linear regression for predictions', () => {
        const data = [{
          value: 2
        }, {
          value: 4
        }, {
          value: 6
        }, {
          value: 8
        }];
        const result = analyticsService.linearRegression(data);
        expect(result).toHaveProperty('nextWeek');
        expect(result).toHaveProperty('confidence');
        expect(result.nextWeek).toBeGreaterThan(0);
        expect(result.confidence).toBeGreaterThanOrEqual(0);
        expect(result.confidence).toBeLessThanOrEqual(1);
      });
      it('should handle insufficient data', () => {
        const data = [{
          value: 5
        }];
        const result = analyticsService.linearRegression(data);
        expect(result.nextWeek).toBe(0);
        expect(result.confidence).toBe(0);
      });
    });
  });
  describe('performance tests', () => {
    it('should handle large datasets efficiently', async () => {
      const eventId = 'large-event';
      const largeDataset = Array.from({
        length: 1000
      }, (_, i) => ({
        id: i + 1,
        participation_type: i % 2 === 0 ? 'online' : 'offline',
        created_at: new Date(2025, 5, 20 + i % 7)
      }));
      mockDatabase.query.mockResolvedValue(largeDataset);
      analyticsService.getBasicEventStats = jest.fn().mockResolvedValue({
        eventInfo: {
          id: eventId
        },
        summary: {
          totalParticipants: 1000
        }
      });
      analyticsService.getTalkStats = jest.fn().mockResolvedValue({
        distribution: {}
      });
      const startTime = Date.now();
      await analyticsService.getParticipantStats(eventId);
      const endTime = Date.now();
      expect(endTime - startTime).toBeLessThan(1000); // 1秒以内
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhbmFseXRpY3NTZXJ2aWNlIiwicmVxdWlyZSIsImRlc2NyaWJlIiwibW9ja0RhdGFiYXNlIiwiYmVmb3JlRWFjaCIsInF1ZXJ5IiwiamVzdCIsImZuIiwiZGIiLCJhZnRlckVhY2giLCJjbGVhckFsbE1vY2tzIiwiaXQiLCJldmVudElkIiwibW9ja0Jhc2ljU3RhdHMiLCJpZCIsInRpdGxlIiwidG90YWxfcGFydGljaXBhbnRzIiwidG90YWxfdGFsa3MiLCJvbmxpbmVfcGFydGljaXBhbnRzIiwib2ZmbGluZV9wYXJ0aWNpcGFudHMiLCJnZXRCYXNpY0V2ZW50U3RhdHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV2ZW50SW5mbyIsInN1bW1hcnkiLCJ0b3RhbFBhcnRpY2lwYW50cyIsInRvdGFsVGFsa3MiLCJvbmxpbmVQYXJ0aWNpcGFudHMiLCJvZmZsaW5lUGFydGljaXBhbnRzIiwiZ2V0UGFydGljaXBhbnRTdGF0cyIsImRpc3RyaWJ1dGlvbiIsImJ5VHlwZSIsInR5cGUiLCJjb3VudCIsInBlcmNlbnRhZ2UiLCJnZXRUYWxrU3RhdHMiLCJieUNhdGVnb3J5IiwiY2F0ZWdvcnkiLCJyZXN1bHQiLCJnZXRFdmVudFN0YXRpc3RpY3MiLCJleHBlY3QiLCJ0b0hhdmVQcm9wZXJ0eSIsInN0YXRpc3RpY3MiLCJiYXNpYyIsInRvQmUiLCJvcHRpb25zIiwiaW5jbHVkZVRyZW5kcyIsImdldEV2ZW50VHJlbmRzIiwicmVnaXN0cmF0aW9ucyIsImRhaWx5IiwiZGF0ZSIsImN1bXVsYXRpdmUiLCJ0b3RhbCIsInRyZW5kcyIsInRvQmVEZWZpbmVkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsIkVycm9yIiwicmVqZWN0cyIsInRvVGhyb3ciLCJtb2NrUXVlcnlSZXN1bHQiLCJ2ZW51ZSIsInN0YXR1cyIsImNvbmZpcm1lZF90YWxrcyIsInBlbmRpbmdfdGFsa3MiLCJhdmdfdGFsa19kdXJhdGlvbiIsInN0cmluZ0NvbnRhaW5pbmciLCJtb2NrRGlzdHJpYnV0aW9uIiwicGFydGljaXBhdGlvbl90eXBlIiwibW9ja1RpbWVsaW5lIiwibW9ja0dlb2dyYXBoaWMiLCJsb2NhdGlvbiIsIm1vY2tBdHRyaWJ1dGVzIiwib3JnYW5pemF0aW9uX3R5cGUiLCJhdmdfZXhwZXJpZW5jZV9sZXZlbCIsIm1vY2tSZXNvbHZlZFZhbHVlT25jZSIsInByb2Nlc3NSZWdpc3RyYXRpb25UaW1lbGluZSIsIm1vY2tSZXR1cm5WYWx1ZSIsIm9ubGluZSIsIm9mZmxpbmUiLCJjYWxjdWxhdGVBdmVyYWdlUGVyRGF5IiwiZmluZFBlYWtSZWdpc3RyYXRpb25EYXkiLCJ0b0hhdmVMZW5ndGgiLCJ0aW1lbGluZSIsImF2ZXJhZ2VQZXJEYXkiLCJtb2NrVGFsa0Rpc3RyaWJ1dGlvbiIsImF2Z19kdXJhdGlvbiIsIm1vY2tTcGVha2VyQW5hbHlzaXMiLCJ1bmlxdWVfc3BlYWtlcnMiLCJ0YWxrc19wZXJfc3BlYWtlciIsImZpcnN0X3RpbWVfc3BlYWtlcnMiLCJleHBlcmllbmNlZF9zcGVha2VycyIsIm1vY2tTdWJtaXNzaW9uVGltZWxpbmUiLCJzdWJtaXNzaW9ucyIsIm1vY2tDYXRlZ29yeVBvcHVsYXJpdHkiLCJncm91cEJ5U3RhdHVzIiwiY29uZmlybWVkIiwiYXZlcmFnZUR1cmF0aW9uIiwicHJvY2Vzc1N1Ym1pc3Npb25UaW1lbGluZSIsInBlbmRpbmciLCJjYWxjdWxhdGVBdmVyYWdlRHVyYXRpb24iLCJhbmFseXplRHVyYXRpb25EaXN0cmlidXRpb24iLCJzcGVha2VycyIsInVuaXF1ZVNwZWFrZXJzIiwiZmlyc3RUaW1lU3BlYWtlcnMiLCJkdXJhdGlvbiIsImF2ZXJhZ2UiLCJyZXBvcnRUeXBlIiwibW9ja1N0YXRzIiwicGFydGljaXBhbnRzIiwiZ2VuZXJhdGVTdW1tYXJ5UmVwb3J0Iiwia2V5TWV0cmljcyIsInRhbGtzIiwib25saW5lUmF0aW8iLCJnZW5lcmF0ZVJlcG9ydCIsIm9iamVjdENvbnRhaW5pbmciLCJpbmNsdWRlRGV0YWlscyIsInRvRXF1YWwiLCJ0b0JlTnVsbCIsImRhdGEiLCJ2YWx1ZSIsImxpbmVhclJlZ3Jlc3Npb24iLCJuZXh0V2VlayIsInRvQmVHcmVhdGVyVGhhbiIsImNvbmZpZGVuY2UiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIiwidG9CZUxlc3NUaGFuT3JFcXVhbCIsImxhcmdlRGF0YXNldCIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsIl8iLCJpIiwiY3JlYXRlZF9hdCIsIkRhdGUiLCJzdGFydFRpbWUiLCJub3ciLCJlbmRUaW1lIiwidG9CZUxlc3NUaGFuIl0sInNvdXJjZXMiOlsiYW5hbHl0aWNzLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBbmFseXRpY3MgU2VydmljZSBVbml0IFRlc3RzXG4gKiDliIbmnpDjgrXjg7zjg5Pjgrnjga7ljZjkvZPjg4bjgrnjg4hcbiAqL1xuXG5jb25zdCBhbmFseXRpY3NTZXJ2aWNlID0gcmVxdWlyZSgnLi4vLi4vLi4vc2VydmVyL3NlcnZpY2VzL2FuYWx5dGljc1NlcnZpY2UnKTtcblxuZGVzY3JpYmUoJ0FuYWx5dGljc1NlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBtb2NrRGF0YWJhc2U7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8g44OH44O844K/44OZ44O844K544Gu44Oi44OD44Kv44KS6Kit5a6aXG4gICAgbW9ja0RhdGFiYXNlID0ge1xuICAgICAgcXVlcnk6IGplc3QuZm4oKVxuICAgIH07XG4gICAgXG4gICAgYW5hbHl0aWNzU2VydmljZS5kYiA9IG1vY2tEYXRhYmFzZTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldEV2ZW50U3RhdGlzdGljcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBiYXNpYyBldmVudCBzdGF0aXN0aWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdldmVudC0wMDEnO1xuICAgICAgY29uc3QgbW9ja0Jhc2ljU3RhdHMgPSB7XG4gICAgICAgIGlkOiAnZXZlbnQtMDAxJyxcbiAgICAgICAgdGl0bGU6ICdUZXN0IEV2ZW50JyxcbiAgICAgICAgdG90YWxfcGFydGljaXBhbnRzOiAyNSxcbiAgICAgICAgdG90YWxfdGFsa3M6IDgsXG4gICAgICAgIG9ubGluZV9wYXJ0aWNpcGFudHM6IDE1LFxuICAgICAgICBvZmZsaW5lX3BhcnRpY2lwYW50czogMTBcbiAgICAgIH07XG5cbiAgICAgIGFuYWx5dGljc1NlcnZpY2UuZ2V0QmFzaWNFdmVudFN0YXRzID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZXZlbnRJbmZvOiB7XG4gICAgICAgICAgaWQ6IGV2ZW50SWQsXG4gICAgICAgICAgdGl0bGU6ICdUZXN0IEV2ZW50J1xuICAgICAgICB9LFxuICAgICAgICBzdW1tYXJ5OiB7XG4gICAgICAgICAgdG90YWxQYXJ0aWNpcGFudHM6IDI1LFxuICAgICAgICAgIHRvdGFsVGFsa3M6IDgsXG4gICAgICAgICAgb25saW5lUGFydGljaXBhbnRzOiAxNSxcbiAgICAgICAgICBvZmZsaW5lUGFydGljaXBhbnRzOiAxMFxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRQYXJ0aWNpcGFudFN0YXRzID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGlzdHJpYnV0aW9uOiB7XG4gICAgICAgICAgYnlUeXBlOiBbXG4gICAgICAgICAgICB7IHR5cGU6ICdvbmxpbmUnLCBjb3VudDogMTUsIHBlcmNlbnRhZ2U6IDYwIH0sXG4gICAgICAgICAgICB7IHR5cGU6ICdvZmZsaW5lJywgY291bnQ6IDEwLCBwZXJjZW50YWdlOiA0MCB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRUYWxrU3RhdHMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkaXN0cmlidXRpb246IHtcbiAgICAgICAgICBieUNhdGVnb3J5OiBbXG4gICAgICAgICAgICB7IGNhdGVnb3J5OiAn5oqA6KGTJywgY291bnQ6IDUsIHBlcmNlbnRhZ2U6IDYyLjUgfSxcbiAgICAgICAgICAgIHsgY2F0ZWdvcnk6ICfotqPlkbMnLCBjb3VudDogMywgcGVyY2VudGFnZTogMzcuNSB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRFdmVudFN0YXRpc3RpY3MoZXZlbnRJZCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdldmVudElkJywgZXZlbnRJZCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnZ2VuZXJhdGVkQXQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdGlzdGljcy5iYXNpYy5zdW1tYXJ5LnRvdGFsUGFydGljaXBhbnRzKS50b0JlKDI1KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3RhdGlzdGljcy5iYXNpYy5zdW1tYXJ5LnRvdGFsVGFsa3MpLnRvQmUoOCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgdHJlbmRzIHdoZW4gcmVxdWVzdGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdldmVudC0wMDEnO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgaW5jbHVkZVRyZW5kczogdHJ1ZSB9O1xuXG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmdldEJhc2ljRXZlbnRTdGF0cyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGV2ZW50SW5mbzogeyBpZDogZXZlbnRJZCB9LFxuICAgICAgICBzdW1tYXJ5OiB7IHRvdGFsUGFydGljaXBhbnRzOiAyNSB9XG4gICAgICB9KTtcbiAgICAgIGFuYWx5dGljc1NlcnZpY2UuZ2V0UGFydGljaXBhbnRTdGF0cyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRpc3RyaWJ1dGlvbjoge30gfSk7XG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmdldFRhbGtTdGF0cyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRpc3RyaWJ1dGlvbjoge30gfSk7XG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmdldEV2ZW50VHJlbmRzID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgcmVnaXN0cmF0aW9uczoge1xuICAgICAgICAgIGRhaWx5OiBbeyBkYXRlOiAnMjAyNS0wNi0yMCcsIGNvdW50OiA1IH1dLFxuICAgICAgICAgIGN1bXVsYXRpdmU6IFt7IGRhdGU6ICcyMDI1LTA2LTIwJywgdG90YWw6IDUgfV1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0RXZlbnRTdGF0aXN0aWNzKGV2ZW50SWQsIG9wdGlvbnMpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnRyZW5kcykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChhbmFseXRpY3NTZXJ2aWNlLmdldEV2ZW50VHJlbmRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChldmVudElkLCBvcHRpb25zKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdpbnZhbGlkLWV2ZW50JztcbiAgICAgIFxuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRCYXNpY0V2ZW50U3RhdHMgPSBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBFcnJvcignRXZlbnQgbm90IGZvdW5kJylcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChhbmFseXRpY3NTZXJ2aWNlLmdldEV2ZW50U3RhdGlzdGljcyhldmVudElkKSlcbiAgICAgICAgLnJlamVjdHNcbiAgICAgICAgLnRvVGhyb3coJ0ZhaWxlZCB0byBnZW5lcmF0ZSBldmVudCBzdGF0aXN0aWNzJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRCYXNpY0V2ZW50U3RhdHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBxdWVyeSBhbmQgcmV0dXJuIGJhc2ljIGV2ZW50IHN0YXRpc3RpY3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudElkID0gJ2V2ZW50LTAwMSc7XG4gICAgICBjb25zdCBtb2NrUXVlcnlSZXN1bHQgPSBbe1xuICAgICAgICBpZDogJ2V2ZW50LTAwMScsXG4gICAgICAgIHRpdGxlOiAnVGVzdCBFdmVudCcsXG4gICAgICAgIGRhdGU6ICcyMDI1LTA2LTI1VDE5OjAwOjAwWicsXG4gICAgICAgIHZlbnVlOiAnVGVzdCBWZW51ZScsXG4gICAgICAgIHN0YXR1czogJ3VwY29taW5nJyxcbiAgICAgICAgdG90YWxfcGFydGljaXBhbnRzOiAyNSxcbiAgICAgICAgdG90YWxfdGFsa3M6IDgsXG4gICAgICAgIG9ubGluZV9wYXJ0aWNpcGFudHM6IDE1LFxuICAgICAgICBvZmZsaW5lX3BhcnRpY2lwYW50czogMTAsXG4gICAgICAgIGNvbmZpcm1lZF90YWxrczogNixcbiAgICAgICAgcGVuZGluZ190YWxrczogMixcbiAgICAgICAgYXZnX3RhbGtfZHVyYXRpb246IDUuNVxuICAgICAgfV07XG5cbiAgICAgIG1vY2tEYXRhYmFzZS5xdWVyeS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUXVlcnlSZXN1bHQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdldEJhc2ljRXZlbnRTdGF0cyhldmVudElkKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5ldmVudEluZm8uaWQpLnRvQmUoZXZlbnRJZCk7XG4gICAgICBleHBlY3QocmVzdWx0LmV2ZW50SW5mby50aXRsZSkudG9CZSgnVGVzdCBFdmVudCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdW1tYXJ5LnRvdGFsUGFydGljaXBhbnRzKS50b0JlKDI1KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3VtbWFyeS50b3RhbFRhbGtzKS50b0JlKDgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdW1tYXJ5Lm9ubGluZVBhcnRpY2lwYW50cykudG9CZSgxNSk7XG4gICAgICBleHBlY3QocmVzdWx0LnN1bW1hcnkub2ZmbGluZVBhcnRpY2lwYW50cykudG9CZSgxMCk7XG4gICAgICBleHBlY3QobW9ja0RhdGFiYXNlLnF1ZXJ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoJ1NFTEVDVCcpLFxuICAgICAgICBbZXZlbnRJZF1cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIHdoZW4gZXZlbnQgbm90IGZvdW5kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdub25leGlzdGVudCc7XG4gICAgICBtb2NrRGF0YWJhc2UucXVlcnkubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoYW5hbHl0aWNzU2VydmljZS5nZXRCYXNpY0V2ZW50U3RhdHMoZXZlbnRJZCkpXG4gICAgICAgIC5yZWplY3RzXG4gICAgICAgIC50b1Rocm93KCdFdmVudCBub3QgZm91bmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFBhcnRpY2lwYW50U3RhdHMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcGFydGljaXBhbnQgZGlzdHJpYnV0aW9uIHN0YXRpc3RpY3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudElkID0gJ2V2ZW50LTAwMSc7XG4gICAgICBjb25zdCBtb2NrRGlzdHJpYnV0aW9uID0gW1xuICAgICAgICB7IHBhcnRpY2lwYXRpb25fdHlwZTogJ29ubGluZScsIGNvdW50OiAxNSwgcGVyY2VudGFnZTogNjAuMCB9LFxuICAgICAgICB7IHBhcnRpY2lwYXRpb25fdHlwZTogJ29mZmxpbmUnLCBjb3VudDogMTAsIHBlcmNlbnRhZ2U6IDQwLjAgfVxuICAgICAgXTtcbiAgICAgIGNvbnN0IG1vY2tUaW1lbGluZSA9IFtcbiAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMCcsIHJlZ2lzdHJhdGlvbnM6IDUsIHBhcnRpY2lwYXRpb25fdHlwZTogJ29ubGluZScgfSxcbiAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMCcsIHJlZ2lzdHJhdGlvbnM6IDMsIHBhcnRpY2lwYXRpb25fdHlwZTogJ29mZmxpbmUnIH1cbiAgICAgIF07XG4gICAgICBjb25zdCBtb2NrR2VvZ3JhcGhpYyA9IFtcbiAgICAgICAgeyBsb2NhdGlvbjogJ+adseS6rOmDvScsIGNvdW50OiAxMiB9LFxuICAgICAgICB7IGxvY2F0aW9uOiAn5aSn6Ziq5bqcJywgY291bnQ6IDggfVxuICAgICAgXTtcbiAgICAgIGNvbnN0IG1vY2tBdHRyaWJ1dGVzID0gW1xuICAgICAgICB7IG9yZ2FuaXphdGlvbl90eXBlOiAnSW5kaXZpZHVhbCcsIGNvdW50OiAxOCwgYXZnX2V4cGVyaWVuY2VfbGV2ZWw6IDIuMSB9LFxuICAgICAgICB7IG9yZ2FuaXphdGlvbl90eXBlOiAnQ29tcGFueScsIGNvdW50OiA3LCBhdmdfZXhwZXJpZW5jZV9sZXZlbDogMi44IH1cbiAgICAgIF07XG5cbiAgICAgIG1vY2tEYXRhYmFzZS5xdWVyeVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tEaXN0cmlidXRpb24pXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1RpbWVsaW5lKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tHZW9ncmFwaGljKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tBdHRyaWJ1dGVzKTtcblxuICAgICAgYW5hbHl0aWNzU2VydmljZS5wcm9jZXNzUmVnaXN0cmF0aW9uVGltZWxpbmUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKFtcbiAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMCcsIG9ubGluZTogNSwgb2ZmbGluZTogMywgdG90YWw6IDggfVxuICAgICAgXSk7XG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmNhbGN1bGF0ZUF2ZXJhZ2VQZXJEYXkgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKDQuMik7XG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmZpbmRQZWFrUmVnaXN0cmF0aW9uRGF5ID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIGRhdGU6ICcyMDI1LTA2LTIwJyxcbiAgICAgICAgcmVnaXN0cmF0aW9uczogOFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFuYWx5dGljc1NlcnZpY2UuZ2V0UGFydGljaXBhbnRTdGF0cyhldmVudElkKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5kaXN0cmlidXRpb24uYnlUeXBlKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocmVzdWx0LmRpc3RyaWJ1dGlvbi5ieVR5cGVbMF0udHlwZSkudG9CZSgnb25saW5lJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmRpc3RyaWJ1dGlvbi5ieVR5cGVbMF0uY291bnQpLnRvQmUoMTUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kaXN0cmlidXRpb24uYnlUeXBlWzBdLnBlcmNlbnRhZ2UpLnRvQmUoNjApO1xuICAgICAgZXhwZWN0KHJlc3VsdC50aW1lbGluZSkudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zdW1tYXJ5LmF2ZXJhZ2VQZXJEYXkpLnRvQmUoNC4yKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFRhbGtTdGF0cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0YWxrIGRpc3RyaWJ1dGlvbiBhbmQgc3BlYWtlciBzdGF0aXN0aWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdldmVudC0wMDEnO1xuICAgICAgY29uc3QgbW9ja1RhbGtEaXN0cmlidXRpb24gPSBbXG4gICAgICAgIHsgY2F0ZWdvcnk6ICfmioDooZMnLCBzdGF0dXM6ICdjb25maXJtZWQnLCBjb3VudDogNSwgYXZnX2R1cmF0aW9uOiA1LjIgfSxcbiAgICAgICAgeyBjYXRlZ29yeTogJ+i2o+WRsycsIHN0YXR1czogJ2NvbmZpcm1lZCcsIGNvdW50OiAzLCBhdmdfZHVyYXRpb246IDQuOCB9XG4gICAgICBdO1xuICAgICAgY29uc3QgbW9ja1NwZWFrZXJBbmFseXNpcyA9IFt7XG4gICAgICAgIHVuaXF1ZV9zcGVha2VyczogOCxcbiAgICAgICAgdG90YWxfdGFsa3M6IDgsXG4gICAgICAgIHRhbGtzX3Blcl9zcGVha2VyOiAxLjAsXG4gICAgICAgIGZpcnN0X3RpbWVfc3BlYWtlcnM6IDMsXG4gICAgICAgIGV4cGVyaWVuY2VkX3NwZWFrZXJzOiA1XG4gICAgICB9XTtcbiAgICAgIGNvbnN0IG1vY2tTdWJtaXNzaW9uVGltZWxpbmUgPSBbXG4gICAgICAgIHsgZGF0ZTogJzIwMjUtMDYtMTUnLCBzdWJtaXNzaW9uczogMywgc3RhdHVzOiAnY29uZmlybWVkJyB9LFxuICAgICAgICB7IGRhdGU6ICcyMDI1LTA2LTE2Jywgc3VibWlzc2lvbnM6IDIsIHN0YXR1czogJ3BlbmRpbmcnIH1cbiAgICAgIF07XG4gICAgICBjb25zdCBtb2NrQ2F0ZWdvcnlQb3B1bGFyaXR5ID0gW1xuICAgICAgICB7IGNhdGVnb3J5OiAn5oqA6KGTJywgY291bnQ6IDUsIHBlcmNlbnRhZ2U6IDYyLjUsIGF2Z19kdXJhdGlvbjogNS4yIH0sXG4gICAgICAgIHsgY2F0ZWdvcnk6ICfotqPlkbMnLCBjb3VudDogMywgcGVyY2VudGFnZTogMzcuNSwgYXZnX2R1cmF0aW9uOiA0LjggfVxuICAgICAgXTtcblxuICAgICAgbW9ja0RhdGFiYXNlLnF1ZXJ5XG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1RhbGtEaXN0cmlidXRpb24pXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja1NwZWFrZXJBbmFseXNpcylcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrU3VibWlzc2lvblRpbWVsaW5lKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tDYXRlZ29yeVBvcHVsYXJpdHkpO1xuXG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmdyb3VwQnlTdGF0dXMgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgY29uZmlybWVkOiBbXG4gICAgICAgICAgeyBjYXRlZ29yeTogJ+aKgOihkycsIGNvdW50OiA1LCBhdmVyYWdlRHVyYXRpb246IDUuMiB9LFxuICAgICAgICAgIHsgY2F0ZWdvcnk6ICfotqPlkbMnLCBjb3VudDogMywgYXZlcmFnZUR1cmF0aW9uOiA0LjggfVxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIGFuYWx5dGljc1NlcnZpY2UucHJvY2Vzc1N1Ym1pc3Npb25UaW1lbGluZSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoW1xuICAgICAgICB7IGRhdGU6ICcyMDI1LTA2LTE1JywgY29uZmlybWVkOiAzLCBwZW5kaW5nOiAwLCB0b3RhbDogMyB9XG4gICAgICBdKTtcbiAgICAgIGFuYWx5dGljc1NlcnZpY2UuY2FsY3VsYXRlQXZlcmFnZUR1cmF0aW9uID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSg1LjApO1xuICAgICAgYW5hbHl0aWNzU2VydmljZS5hbmFseXplRHVyYXRpb25EaXN0cmlidXRpb24gPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgJzVtaW4nOiA2LFxuICAgICAgICAnMTBtaW4nOiAyXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRUYWxrU3RhdHMoZXZlbnRJZCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzdHJpYnV0aW9uLmJ5Q2F0ZWdvcnkpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzdHJpYnV0aW9uLmJ5Q2F0ZWdvcnlbMF0uY2F0ZWdvcnkpLnRvQmUoJ+aKgOihkycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5zcGVha2Vycy51bmlxdWVTcGVha2VycykudG9CZSg4KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3BlYWtlcnMudG90YWxUYWxrcykudG9CZSg4KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc3BlYWtlcnMuZmlyc3RUaW1lU3BlYWtlcnMpLnRvQmUoMyk7XG4gICAgICBleHBlY3QocmVzdWx0LmR1cmF0aW9uLmF2ZXJhZ2UpLnRvQmUoNS4wKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dlbmVyYXRlUmVwb3J0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgc3VtbWFyeSByZXBvcnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudElkID0gJ2V2ZW50LTAwMSc7XG4gICAgICBjb25zdCByZXBvcnRUeXBlID0gJ3N1bW1hcnknO1xuICAgICAgY29uc3QgbW9ja1N0YXRzID0ge1xuICAgICAgICBzdGF0aXN0aWNzOiB7XG4gICAgICAgICAgYmFzaWM6IHtcbiAgICAgICAgICAgIGV2ZW50SW5mbzoge1xuICAgICAgICAgICAgICB0aXRsZTogJ1Rlc3QgRXZlbnQnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VtbWFyeToge1xuICAgICAgICAgICAgICB0b3RhbFBhcnRpY2lwYW50czogMjUsXG4gICAgICAgICAgICAgIHRvdGFsVGFsa3M6IDhcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHBhcnRpY2lwYW50czoge1xuICAgICAgICAgICAgZGlzdHJpYnV0aW9uOiB7XG4gICAgICAgICAgICAgIGJ5VHlwZTogW1xuICAgICAgICAgICAgICAgIHsgdHlwZTogJ29ubGluZScsIHBlcmNlbnRhZ2U6IDYwIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRFdmVudFN0YXRpc3RpY3MgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUobW9ja1N0YXRzKTtcbiAgICAgIGFuYWx5dGljc1NlcnZpY2UuZ2VuZXJhdGVTdW1tYXJ5UmVwb3J0ID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHR5cGU6ICdzdW1tYXJ5JyxcbiAgICAgICAgdGl0bGU6ICdUZXN0IEV2ZW50IC0g44K144Oe44Oq44O844Os44Od44O844OIJyxcbiAgICAgICAga2V5TWV0cmljczoge1xuICAgICAgICAgIHBhcnRpY2lwYW50czogMjUsXG4gICAgICAgICAgdGFsa3M6IDgsXG4gICAgICAgICAgb25saW5lUmF0aW86IDYwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhbmFseXRpY3NTZXJ2aWNlLmdlbmVyYXRlUmVwb3J0KGV2ZW50SWQsIHJlcG9ydFR5cGUpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnR5cGUpLnRvQmUoJ3N1bW1hcnknKTtcbiAgICAgIGV4cGVjdChyZXN1bHQua2V5TWV0cmljcy5wYXJ0aWNpcGFudHMpLnRvQmUoMjUpO1xuICAgICAgZXhwZWN0KGFuYWx5dGljc1NlcnZpY2UuZ2V0RXZlbnRTdGF0aXN0aWNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXZlbnRJZCxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIGluY2x1ZGVEZXRhaWxzOiB0cnVlLFxuICAgICAgICAgIGluY2x1ZGVUcmVuZHM6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IGVycm9yIGZvciBpbnZhbGlkIHJlcG9ydCB0eXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRJZCA9ICdldmVudC0wMDEnO1xuICAgICAgY29uc3QgcmVwb3J0VHlwZSA9ICdpbnZhbGlkJztcblxuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRFdmVudFN0YXRpc3RpY3MgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe30pO1xuXG4gICAgICBhd2FpdCBleHBlY3QoYW5hbHl0aWNzU2VydmljZS5nZW5lcmF0ZVJlcG9ydChldmVudElkLCByZXBvcnRUeXBlKSlcbiAgICAgICAgLnJlamVjdHNcbiAgICAgICAgLnRvVGhyb3coJ0ludmFsaWQgcmVwb3J0IHR5cGUnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2hlbHBlciBtZXRob2RzJywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCdwcm9jZXNzUmVnaXN0cmF0aW9uVGltZWxpbmUnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIHByb2Nlc3MgdGltZWxpbmUgZGF0YSBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpbWVsaW5lID0gW1xuICAgICAgICAgIHsgZGF0ZTogJzIwMjUtMDYtMjAnLCByZWdpc3RyYXRpb25zOiA1LCBwYXJ0aWNpcGF0aW9uX3R5cGU6ICdvbmxpbmUnIH0sXG4gICAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMCcsIHJlZ2lzdHJhdGlvbnM6IDMsIHBhcnRpY2lwYXRpb25fdHlwZTogJ29mZmxpbmUnIH0sXG4gICAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMScsIHJlZ2lzdHJhdGlvbnM6IDcsIHBhcnRpY2lwYXRpb25fdHlwZTogJ29ubGluZScgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGFuYWx5dGljc1NlcnZpY2UucHJvY2Vzc1JlZ2lzdHJhdGlvblRpbWVsaW5lKHRpbWVsaW5lKTtcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVMZW5ndGgoMik7XG4gICAgICAgIGV4cGVjdChyZXN1bHRbMF0pLnRvRXF1YWwoe1xuICAgICAgICAgIGRhdGU6ICcyMDI1LTA2LTIwJyxcbiAgICAgICAgICBvbmxpbmU6IDUsXG4gICAgICAgICAgb2ZmbGluZTogMyxcbiAgICAgICAgICB0b3RhbDogOFxuICAgICAgICB9KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdFsxXSkudG9FcXVhbCh7XG4gICAgICAgICAgZGF0ZTogJzIwMjUtMDYtMjEnLFxuICAgICAgICAgIG9ubGluZTogNyxcbiAgICAgICAgICBvZmZsaW5lOiAwLFxuICAgICAgICAgIHRvdGFsOiA3XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY2FsY3VsYXRlQXZlcmFnZVBlckRheScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIGF2ZXJhZ2UgcmVnaXN0cmF0aW9ucyBwZXIgZGF5JywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lbGluZSA9IFtcbiAgICAgICAgICB7IGRhdGU6ICcyMDI1LTA2LTIwJywgcmVnaXN0cmF0aW9uczogNSB9LFxuICAgICAgICAgIHsgZGF0ZTogJzIwMjUtMDYtMjEnLCByZWdpc3RyYXRpb25zOiA3IH0sXG4gICAgICAgICAgeyBkYXRlOiAnMjAyNS0wNi0yMScsIHJlZ2lzdHJhdGlvbnM6IDMgfVxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGFuYWx5dGljc1NlcnZpY2UuY2FsY3VsYXRlQXZlcmFnZVBlckRheSh0aW1lbGluZSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSg3LjUpOyAvLyAxNSByZWdpc3RyYXRpb25zIC8gMiB1bmlxdWUgZGF5c1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIDAgZm9yIGVtcHR5IHRpbWVsaW5lJywgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmFseXRpY3NTZXJ2aWNlLmNhbGN1bGF0ZUF2ZXJhZ2VQZXJEYXkoW10pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlKDApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZmluZFBlYWtSZWdpc3RyYXRpb25EYXknLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGZpbmQgZGF5IHdpdGggaGlnaGVzdCByZWdpc3RyYXRpb25zJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aW1lbGluZSA9IFtcbiAgICAgICAgICB7IGRhdGU6ICcyMDI1LTA2LTIwJywgcmVnaXN0cmF0aW9uczogNSB9LFxuICAgICAgICAgIHsgZGF0ZTogJzIwMjUtMDYtMjEnLCByZWdpc3RyYXRpb25zOiAxMiB9LFxuICAgICAgICAgIHsgZGF0ZTogJzIwMjUtMDYtMjInLCByZWdpc3RyYXRpb25zOiA3IH1cbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmFseXRpY3NTZXJ2aWNlLmZpbmRQZWFrUmVnaXN0cmF0aW9uRGF5KHRpbWVsaW5lKTtcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgICBkYXRlOiAnMjAyNS0wNi0yMScsXG4gICAgICAgICAgcmVnaXN0cmF0aW9uczogMTJcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gbnVsbCBmb3IgZW1wdHkgdGltZWxpbmUnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGFuYWx5dGljc1NlcnZpY2UuZmluZFBlYWtSZWdpc3RyYXRpb25EYXkoW10pO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnbGluZWFyUmVncmVzc2lvbicsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIGxpbmVhciByZWdyZXNzaW9uIGZvciBwcmVkaWN0aW9ucycsICgpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFtcbiAgICAgICAgICB7IHZhbHVlOiAyIH0sXG4gICAgICAgICAgeyB2YWx1ZTogNCB9LFxuICAgICAgICAgIHsgdmFsdWU6IDYgfSxcbiAgICAgICAgICB7IHZhbHVlOiA4IH1cbiAgICAgICAgXTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmFseXRpY3NTZXJ2aWNlLmxpbmVhclJlZ3Jlc3Npb24oZGF0YSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9IYXZlUHJvcGVydHkoJ25leHRXZWVrJyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvSGF2ZVByb3BlcnR5KCdjb25maWRlbmNlJyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQubmV4dFdlZWspLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDApO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbmZpZGVuY2UpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgaW5zdWZmaWNpZW50IGRhdGEnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBbeyB2YWx1ZTogNSB9XTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhbmFseXRpY3NTZXJ2aWNlLmxpbmVhclJlZ3Jlc3Npb24oZGF0YSk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdC5uZXh0V2VlaykudG9CZSgwKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jb25maWRlbmNlKS50b0JlKDApO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwZXJmb3JtYW5jZSB0ZXN0cycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSBkYXRhc2V0cyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50SWQgPSAnbGFyZ2UtZXZlbnQnO1xuICAgICAgY29uc3QgbGFyZ2VEYXRhc2V0ID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwMCB9LCAoXywgaSkgPT4gKHtcbiAgICAgICAgaWQ6IGkgKyAxLFxuICAgICAgICBwYXJ0aWNpcGF0aW9uX3R5cGU6IGkgJSAyID09PSAwID8gJ29ubGluZScgOiAnb2ZmbGluZScsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKDIwMjUsIDUsIDIwICsgKGkgJSA3KSlcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0RhdGFiYXNlLnF1ZXJ5Lm1vY2tSZXNvbHZlZFZhbHVlKGxhcmdlRGF0YXNldCk7XG4gICAgICBhbmFseXRpY3NTZXJ2aWNlLmdldEJhc2ljRXZlbnRTdGF0cyA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGV2ZW50SW5mbzogeyBpZDogZXZlbnRJZCB9LFxuICAgICAgICBzdW1tYXJ5OiB7IHRvdGFsUGFydGljaXBhbnRzOiAxMDAwIH1cbiAgICAgIH0pO1xuICAgICAgYW5hbHl0aWNzU2VydmljZS5nZXRUYWxrU3RhdHMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBkaXN0cmlidXRpb246IHt9IH0pO1xuXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgYXdhaXQgYW5hbHl0aWNzU2VydmljZS5nZXRQYXJ0aWNpcGFudFN0YXRzKGV2ZW50SWQpO1xuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIGV4cGVjdChlbmRUaW1lIC0gc3RhcnRUaW1lKS50b0JlTGVzc1RoYW4oMTAwMCk7IC8vIDHnp5Lku6XlhoVcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUdDLE9BQU8s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