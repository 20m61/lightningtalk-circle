{"version":3,"names":["cov_n44rprawz","actualCoverage","DatabaseService","PostgreSQLDatabaseService","DatabaseFactory","create","options","b","f","dbType","s","type","process","env","DATABASE_TYPE","toLowerCase","console","log","createAndInitialize","database","initialize","getSupportedTypes","name","description","recommended","validateConfiguration","validation","valid","errors","warnings","DATABASE_URL","push","startsWith","poolSize","parseInt","DB_POOL_SIZE","dataDir","DATABASE_FILE_DIR","error","message"],"sources":["database-factory.js"],"sourcesContent":["/**\n * Database Factory - Strategy Pattern for Database Service Selection\n * Allows seamless switching between file-based and PostgreSQL databases\n */\n\nimport { DatabaseService } from './database.js';\nimport { PostgreSQLDatabaseService } from './database-postgresql.js';\n\nexport class DatabaseFactory {\n    static create(options = {}) {\n        const dbType = options.type || process.env.DATABASE_TYPE || 'file';\n        \n        switch (dbType.toLowerCase()) {\n            case 'postgresql':\n            case 'postgres':\n            case 'pg':\n                console.log('üêò Using PostgreSQL Database Service');\n                return new PostgreSQLDatabaseService();\n                \n            case 'file':\n            case 'json':\n            default:\n                console.log('üìÅ Using File-based Database Service');\n                return new DatabaseService();\n        }\n    }\n\n    static async createAndInitialize(options = {}) {\n        const database = this.create(options);\n        await database.initialize();\n        return database;\n    }\n\n    static getSupportedTypes() {\n        return [\n            {\n                type: 'file',\n                name: 'File-based Database',\n                description: 'JSON file storage for development',\n                recommended: 'development'\n            },\n            {\n                type: 'postgresql',\n                name: 'PostgreSQL Database',\n                description: 'Production-grade relational database',\n                recommended: 'production'\n            }\n        ];\n    }\n\n    static validateConfiguration(type = null) {\n        const dbType = type || process.env.DATABASE_TYPE || 'file';\n        const validation = {\n            type: dbType,\n            valid: true,\n            errors: [],\n            warnings: []\n        };\n\n        switch (dbType.toLowerCase()) {\n            case 'postgresql':\n            case 'postgres':\n            case 'pg':\n                // Check PostgreSQL configuration\n                if (!process.env.DATABASE_URL) {\n                    validation.errors.push('DATABASE_URL is required for PostgreSQL');\n                    validation.valid = false;\n                }\n\n                // Validate connection string format\n                if (process.env.DATABASE_URL && !process.env.DATABASE_URL.startsWith('postgresql://')) {\n                    validation.errors.push('DATABASE_URL must start with postgresql://');\n                    validation.valid = false;\n                }\n\n                // Check pool configuration\n                const poolSize = parseInt(process.env.DB_POOL_SIZE);\n                if (poolSize && (poolSize < 1 || poolSize > 100)) {\n                    validation.warnings.push('DB_POOL_SIZE should be between 1 and 100');\n                }\n\n                break;\n\n            case 'file':\n            case 'json':\n                // Check file permissions and directory\n                try {\n                    const dataDir = process.env.DATABASE_FILE_DIR || './server/data';\n                    // Additional file system checks can be added here\n                    validation.warnings.push('File-based database is not recommended for production');\n                } catch (error) {\n                    validation.errors.push(`File system check failed: ${error.message}`);\n                    validation.valid = false;\n                }\n                break;\n\n            default:\n                validation.errors.push(`Unsupported database type: ${dbType}`);\n                validation.valid = false;\n        }\n\n        return validation;\n    }\n}\n\nexport default DatabaseFactory;"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ;AACA;AACA;AACA;;AAEA,SAASE,eAAe,QAAQ,eAAe;AAC/C,SAASC,yBAAyB,QAAQ,0BAA0B;AAEpE,OAAO,MAAMC,eAAe,CAAC;EACzB,OAAOC,MAAMA,CAACC,OAAO;EAAA;EAAA,CAAAN,aAAA,GAAAO,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IACxB,MAAMC,MAAM;IAAA;IAAA,CAAAT,aAAA,GAAAU,CAAA;IAAG;IAAA,CAAAV,aAAA,GAAAO,CAAA,UAAAD,OAAO,CAACK,IAAI;IAAA;IAAA,CAAAX,aAAA,GAAAO,CAAA,UAAIK,OAAO,CAACC,GAAG,CAACC,aAAa;IAAA;IAAA,CAAAd,aAAA,GAAAO,CAAA,UAAI,MAAM;IAAC;IAAAP,aAAA,GAAAU,CAAA;IAEnE,QAAQD,MAAM,CAACM,WAAW,CAAC,CAAC;MACxB,KAAK,YAAY;QAAA;QAAAf,aAAA,GAAAO,CAAA;MACjB,KAAK,UAAU;QAAA;QAAAP,aAAA,GAAAO,CAAA;MACf,KAAK,IAAI;QAAA;QAAAP,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAU,CAAA;QACLM,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QAAC;QAAAjB,aAAA,GAAAU,CAAA;QACpD,OAAO,IAAIP,yBAAyB,CAAC,CAAC;MAE1C,KAAK,MAAM;QAAA;QAAAH,aAAA,GAAAO,CAAA;MACX,KAAK,MAAM;QAAA;QAAAP,aAAA,GAAAO,CAAA;MACX;QAAA;QAAAP,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAU,CAAA;QACIM,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QAAC;QAAAjB,aAAA,GAAAU,CAAA;QACpD,OAAO,IAAIR,eAAe,CAAC,CAAC;IACpC;EACJ;EAEA,aAAagB,mBAAmBA,CAACZ,OAAO;EAAA;EAAA,CAAAN,aAAA,GAAAO,CAAA,UAAG,CAAC,CAAC,GAAE;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IAC3C,MAAMW,QAAQ;IAAA;IAAA,CAAAnB,aAAA,GAAAU,CAAA,OAAG,IAAI,CAACL,MAAM,CAACC,OAAO,CAAC;IAAC;IAAAN,aAAA,GAAAU,CAAA;IACtC,MAAMS,QAAQ,CAACC,UAAU,CAAC,CAAC;IAAC;IAAApB,aAAA,GAAAU,CAAA;IAC5B,OAAOS,QAAQ;EACnB;EAEA,OAAOE,iBAAiBA,CAAA,EAAG;IAAA;IAAArB,aAAA,GAAAQ,CAAA;IAAAR,aAAA,GAAAU,CAAA;IACvB,OAAO,CACH;MACIC,IAAI,EAAE,MAAM;MACZW,IAAI,EAAE,qBAAqB;MAC3BC,WAAW,EAAE,mCAAmC;MAChDC,WAAW,EAAE;IACjB,CAAC,EACD;MACIb,IAAI,EAAE,YAAY;MAClBW,IAAI,EAAE,qBAAqB;MAC3BC,WAAW,EAAE,sCAAsC;MACnDC,WAAW,EAAE;IACjB,CAAC,CACJ;EACL;EAEA,OAAOC,qBAAqBA,CAACd,IAAI;EAAA;EAAA,CAAAX,aAAA,GAAAO,CAAA,UAAG,IAAI,GAAE;IAAA;IAAAP,aAAA,GAAAQ,CAAA;IACtC,MAAMC,MAAM;IAAA;IAAA,CAAAT,aAAA,GAAAU,CAAA;IAAG;IAAA,CAAAV,aAAA,GAAAO,CAAA,UAAAI,IAAI;IAAA;IAAA,CAAAX,aAAA,GAAAO,CAAA,UAAIK,OAAO,CAACC,GAAG,CAACC,aAAa;IAAA;IAAA,CAAAd,aAAA,GAAAO,CAAA,UAAI,MAAM;IAC1D,MAAMmB,UAAU;IAAA;IAAA,CAAA1B,aAAA,GAAAU,CAAA,QAAG;MACfC,IAAI,EAAEF,MAAM;MACZkB,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;IACd,CAAC;IAAC;IAAA7B,aAAA,GAAAU,CAAA;IAEF,QAAQD,MAAM,CAACM,WAAW,CAAC,CAAC;MACxB,KAAK,YAAY;QAAA;QAAAf,aAAA,GAAAO,CAAA;MACjB,KAAK,UAAU;QAAA;QAAAP,aAAA,GAAAO,CAAA;MACf,KAAK,IAAI;QAAA;QAAAP,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAU,CAAA;QACL;QACA,IAAI,CAACE,OAAO,CAACC,GAAG,CAACiB,YAAY,EAAE;UAAA;UAAA9B,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAU,CAAA;UAC3BgB,UAAU,CAACE,MAAM,CAACG,IAAI,CAAC,yCAAyC,CAAC;UAAC;UAAA/B,aAAA,GAAAU,CAAA;UAClEgB,UAAU,CAACC,KAAK,GAAG,KAAK;QAC5B,CAAC;QAAA;QAAA;UAAA3B,aAAA,GAAAO,CAAA;QAAA;;QAED;QAAAP,aAAA,GAAAU,CAAA;QACA;QAAI;QAAA,CAAAV,aAAA,GAAAO,CAAA,UAAAK,OAAO,CAACC,GAAG,CAACiB,YAAY;QAAA;QAAA,CAAA9B,aAAA,GAAAO,CAAA,UAAI,CAACK,OAAO,CAACC,GAAG,CAACiB,YAAY,CAACE,UAAU,CAAC,eAAe,CAAC,GAAE;UAAA;UAAAhC,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAU,CAAA;UACnFgB,UAAU,CAACE,MAAM,CAACG,IAAI,CAAC,4CAA4C,CAAC;UAAC;UAAA/B,aAAA,GAAAU,CAAA;UACrEgB,UAAU,CAACC,KAAK,GAAG,KAAK;QAC5B,CAAC;QAAA;QAAA;UAAA3B,aAAA,GAAAO,CAAA;QAAA;;QAED;QACA,MAAM0B,QAAQ;QAAA;QAAA,CAAAjC,aAAA,GAAAU,CAAA,QAAGwB,QAAQ,CAACtB,OAAO,CAACC,GAAG,CAACsB,YAAY,CAAC;QAAC;QAAAnC,aAAA,GAAAU,CAAA;QACpD;QAAI;QAAA,CAAAV,aAAA,GAAAO,CAAA,WAAA0B,QAAQ;QAAK;QAAA,CAAAjC,aAAA,GAAAO,CAAA,WAAA0B,QAAQ,GAAG,CAAC;QAAA;QAAA,CAAAjC,aAAA,GAAAO,CAAA,WAAI0B,QAAQ,GAAG,GAAG,EAAC,EAAE;UAAA;UAAAjC,aAAA,GAAAO,CAAA;UAAAP,aAAA,GAAAU,CAAA;UAC9CgB,UAAU,CAACG,QAAQ,CAACE,IAAI,CAAC,0CAA0C,CAAC;QACxE,CAAC;QAAA;QAAA;UAAA/B,aAAA,GAAAO,CAAA;QAAA;QAAAP,aAAA,GAAAU,CAAA;QAED;MAEJ,KAAK,MAAM;QAAA;QAAAV,aAAA,GAAAO,CAAA;MACX,KAAK,MAAM;QAAA;QAAAP,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAU,CAAA;QACP;QACA,IAAI;UACA,MAAM0B,OAAO;UAAA;UAAA,CAAApC,aAAA,GAAAU,CAAA;UAAG;UAAA,CAAAV,aAAA,GAAAO,CAAA,WAAAK,OAAO,CAACC,GAAG,CAACwB,iBAAiB;UAAA;UAAA,CAAArC,aAAA,GAAAO,CAAA,WAAI,eAAe;UAChE;UAAA;UAAAP,aAAA,GAAAU,CAAA;UACAgB,UAAU,CAACG,QAAQ,CAACE,IAAI,CAAC,uDAAuD,CAAC;QACrF,CAAC,CAAC,OAAOO,KAAK,EAAE;UAAA;UAAAtC,aAAA,GAAAU,CAAA;UACZgB,UAAU,CAACE,MAAM,CAACG,IAAI,CAAC,6BAA6BO,KAAK,CAACC,OAAO,EAAE,CAAC;UAAC;UAAAvC,aAAA,GAAAU,CAAA;UACrEgB,UAAU,CAACC,KAAK,GAAG,KAAK;QAC5B;QAAC;QAAA3B,aAAA,GAAAU,CAAA;QACD;MAEJ;QAAA;QAAAV,aAAA,GAAAO,CAAA;QAAAP,aAAA,GAAAU,CAAA;QACIgB,UAAU,CAACE,MAAM,CAACG,IAAI,CAAC,8BAA8BtB,MAAM,EAAE,CAAC;QAAC;QAAAT,aAAA,GAAAU,CAAA;QAC/DgB,UAAU,CAACC,KAAK,GAAG,KAAK;IAChC;IAAC;IAAA3B,aAAA,GAAAU,CAAA;IAED,OAAOgB,UAAU;EACrB;AACJ;AAEA,eAAetB,eAAe","ignoreList":[]}