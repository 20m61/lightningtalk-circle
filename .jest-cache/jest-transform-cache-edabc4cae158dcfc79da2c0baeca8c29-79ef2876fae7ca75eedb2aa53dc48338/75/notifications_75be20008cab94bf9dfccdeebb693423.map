{"version":3,"names":["cov_2bwsxndr51","actualCoverage","express","s","require","router","Router","notificationService","logger","body","query","validationResult","get","req","res","f","clientId","setupSSE","info","error","status","json","post","notEmpty","withMessage","optional","isIn","isString","errors","isEmpty","b","array","event","message","type","topic","data","notificationData","timestamp","Date","toISOString","broadcast","broadcastToTopic","success","priority","emit","source","isObject","isEmail","participant","name","talk","title","speaker","updateType","id","author","room","stats","getConnectionStats","uptime","process","isInt","min","max","limit","history","notificationHistory","filter","notification","limitedHistory","slice","parseInt","total","length","topics","Array","from","subscriptions","keys","count","testMessage","test","broadcastSSE","v4","broadcastWebSocket","testType","health","memory","memoryUsage","connections","version","env","npm_package_version","module","exports"],"sources":["notifications.js"],"sourcesContent":["/**\n * 通知機能のAPIルート\n * SSE (Server-Sent Events) エンドポイントとWebSocket管理\n */\n\nconst express = require('express');\nconst router = express.Router();\nconst notificationService = require('../services/notificationService');\nconst logger = require('../middleware/logger');\nconst { body, query, validationResult } = require('express-validator');\n\n/**\n * SSE (Server-Sent Events) エンドポイント\n * GET /api/notifications/stream\n */\nrouter.get('/stream', (req, res) => {\n  try {\n    const clientId = notificationService.setupSSE(req, res);\n    logger.info(`New SSE connection established: ${clientId}`);\n  } catch (error) {\n    logger.error('Failed to establish SSE connection:', error);\n    res.status(500).json({ error: 'Failed to establish SSE connection' });\n  }\n});\n\n/**\n * 通知の手動送信\n * POST /api/notifications/send\n */\nrouter.post('/send', [\n  body('event').notEmpty().withMessage('Event type is required'),\n  body('message').notEmpty().withMessage('Message is required'),\n  body('type').optional().isIn(['info', 'success', 'warning', 'error']).withMessage('Invalid notification type'),\n  body('topic').optional().isString().withMessage('Topic must be a string')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { event, message, type = 'info', topic = 'all', data = {} } = req.body;\n\n    const notificationData = {\n      message,\n      type,\n      ...data,\n      timestamp: new Date().toISOString()\n    };\n\n    if (topic === 'all') {\n      notificationService.broadcast(event, notificationData);\n    } else {\n      notificationService.broadcastToTopic(topic, event, notificationData);\n    }\n\n    res.json({\n      success: true,\n      message: 'Notification sent successfully',\n      event,\n      topic\n    });\n\n    logger.info(`Manual notification sent: ${event} to ${topic}`);\n  } catch (error) {\n    logger.error('Failed to send notification:', error);\n    res.status(500).json({ error: 'Failed to send notification' });\n  }\n});\n\n/**\n * システム通知の送信\n * POST /api/notifications/system\n */\nrouter.post('/system', [\n  body('message').notEmpty().withMessage('Message is required'),\n  body('type').optional().isIn(['info', 'success', 'warning', 'error']).withMessage('Invalid notification type'),\n  body('priority').optional().isIn(['low', 'medium', 'high', 'urgent']).withMessage('Invalid priority level')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { message, type = 'info', priority = 'medium' } = req.body;\n\n    notificationService.emit('system:notification', {\n      message,\n      type,\n      priority,\n      source: 'admin'\n    });\n\n    res.json({\n      success: true,\n      message: 'System notification sent successfully'\n    });\n\n    logger.info(`System notification sent: ${message} (${type})`);\n  } catch (error) {\n    logger.error('Failed to send system notification:', error);\n    res.status(500).json({ error: 'Failed to send system notification' });\n  }\n});\n\n/**\n * 参加者登録通知\n * POST /api/notifications/participant-registered\n */\nrouter.post('/participant-registered', [\n  body('participant').isObject().withMessage('Participant data is required'),\n  body('participant.name').notEmpty().withMessage('Participant name is required'),\n  body('participant.email').isEmail().withMessage('Valid email is required')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { participant } = req.body;\n\n    notificationService.emit('participant:registered', participant);\n\n    res.json({\n      success: true,\n      message: 'Participant registration notification sent'\n    });\n\n    logger.info(`Participant registration notification: ${participant.name}`);\n  } catch (error) {\n    logger.error('Failed to send participant registration notification:', error);\n    res.status(500).json({ error: 'Failed to send notification' });\n  }\n});\n\n/**\n * 発表申込み通知\n * POST /api/notifications/talk-submitted\n */\nrouter.post('/talk-submitted', [\n  body('talk').isObject().withMessage('Talk data is required'),\n  body('talk.title').notEmpty().withMessage('Talk title is required'),\n  body('talk.speaker').notEmpty().withMessage('Speaker name is required')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { talk } = req.body;\n\n    notificationService.emit('talk:submitted', talk);\n\n    res.json({\n      success: true,\n      message: 'Talk submission notification sent'\n    });\n\n    logger.info(`Talk submission notification: ${talk.title} by ${talk.speaker}`);\n  } catch (error) {\n    logger.error('Failed to send talk submission notification:', error);\n    res.status(500).json({ error: 'Failed to send notification' });\n  }\n});\n\n/**\n * イベント更新通知\n * POST /api/notifications/event-updated\n */\nrouter.post('/event-updated', [\n  body('event').isObject().withMessage('Event data is required'),\n  body('event.id').notEmpty().withMessage('Event ID is required'),\n  body('updateType').optional().isIn(['info', 'schedule', 'venue', 'urgent']).withMessage('Invalid update type')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { event, updateType = 'info' } = req.body;\n\n    notificationService.emit('event:updated', {\n      ...event,\n      updateType\n    });\n\n    res.json({\n      success: true,\n      message: 'Event update notification sent'\n    });\n\n    logger.info(`Event update notification: ${event.id} (${updateType})`);\n  } catch (error) {\n    logger.error('Failed to send event update notification:', error);\n    res.status(500).json({ error: 'Failed to send notification' });\n  }\n});\n\n/**\n * チャットメッセージの送信\n * POST /api/notifications/chat\n */\nrouter.post('/chat', [\n  body('message').notEmpty().withMessage('Message is required'),\n  body('author').optional().isString().withMessage('Author must be a string'),\n  body('room').optional().isString().withMessage('Room must be a string')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { message, author = 'System', room = 'general' } = req.body;\n\n    notificationService.emit('chat:message', {\n      message,\n      author,\n      room\n    });\n\n    res.json({\n      success: true,\n      message: 'Chat message sent successfully'\n    });\n\n    logger.info(`Chat message sent: ${author}: ${message}`);\n  } catch (error) {\n    logger.error('Failed to send chat message:', error);\n    res.status(500).json({ error: 'Failed to send chat message' });\n  }\n});\n\n/**\n * 接続統計の取得\n * GET /api/notifications/stats\n */\nrouter.get('/stats', (req, res) => {\n  try {\n    const stats = notificationService.getConnectionStats();\n    \n    res.json({\n      success: true,\n      stats: {\n        ...stats,\n        uptime: process.uptime(),\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    logger.error('Failed to get notification stats:', error);\n    res.status(500).json({ error: 'Failed to get statistics' });\n  }\n});\n\n/**\n * 通知履歴の取得\n * GET /api/notifications/history\n */\nrouter.get('/history', [\n  query('limit').optional().isInt({ min: 1, max: 100 }).withMessage('Limit must be between 1 and 100'),\n  query('topic').optional().isString().withMessage('Topic must be a string'),\n  query('event').optional().isString().withMessage('Event must be a string')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { limit = 20, topic, event } = req.query;\n    \n    let history = notificationService.notificationHistory;\n\n    // フィルタリング\n    if (topic && topic !== 'all') {\n      history = history.filter(notification => notification.topic === topic);\n    }\n\n    if (event) {\n      history = history.filter(notification => notification.event === event);\n    }\n\n    // 制限適用\n    const limitedHistory = history.slice(-parseInt(limit));\n\n    res.json({\n      success: true,\n      history: limitedHistory,\n      total: history.length,\n      limit: parseInt(limit)\n    });\n  } catch (error) {\n    logger.error('Failed to get notification history:', error);\n    res.status(500).json({ error: 'Failed to get notification history' });\n  }\n});\n\n/**\n * トピック一覧の取得\n * GET /api/notifications/topics\n */\nrouter.get('/topics', (req, res) => {\n  try {\n    const topics = Array.from(notificationService.subscriptions.keys());\n    \n    res.json({\n      success: true,\n      topics: topics,\n      count: topics.length\n    });\n  } catch (error) {\n    logger.error('Failed to get topics:', error);\n    res.status(500).json({ error: 'Failed to get topics' });\n  }\n});\n\n/**\n * 通知設定のテスト\n * POST /api/notifications/test\n */\nrouter.post('/test', [\n  body('type').optional().isIn(['sse', 'websocket', 'both']).withMessage('Invalid test type')\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const { type = 'both' } = req.body;\n    const testMessage = {\n      message: 'This is a test notification',\n      type: 'info',\n      test: true,\n      timestamp: new Date().toISOString()\n    };\n\n    if (type === 'sse' || type === 'both') {\n      notificationService.broadcastSSE({\n        id: require('uuid').v4(),\n        event: 'test_notification',\n        data: testMessage,\n        topic: 'all',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    if (type === 'websocket' || type === 'both') {\n      notificationService.broadcastWebSocket({\n        id: require('uuid').v4(),\n        event: 'test_notification',\n        data: testMessage,\n        topic: 'all',\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    res.json({\n      success: true,\n      message: `Test notification sent via ${type}`,\n      testType: type\n    });\n\n    logger.info(`Test notification sent via ${type}`);\n  } catch (error) {\n    logger.error('Failed to send test notification:', error);\n    res.status(500).json({ error: 'Failed to send test notification' });\n  }\n});\n\n/**\n * サーバーヘルスチェック\n * GET /api/notifications/health\n */\nrouter.get('/health', (req, res) => {\n  try {\n    const stats = notificationService.getConnectionStats();\n    const health = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      connections: stats,\n      version: process.env.npm_package_version || '1.0.0'\n    };\n\n    res.json(health);\n  } catch (error) {\n    logger.error('Health check failed:', error);\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\nmodule.exports = router;"],"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","ignoreList":[]}