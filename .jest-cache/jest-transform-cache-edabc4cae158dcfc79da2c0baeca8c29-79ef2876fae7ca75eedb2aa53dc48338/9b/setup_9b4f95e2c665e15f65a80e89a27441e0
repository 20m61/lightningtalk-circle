de89a78e2a21914a95120a114a1d18ef
/**
 * Jest テスト環境のセットアップファイル
 */

const fs = require('fs-extra');
const path = require('path');

// テスト環境変数の設定
process.env.NODE_ENV = 'test';
process.env.PORT = '3001';
process.env.GITHUB_TOKEN = 'test-token';
process.env.GITHUB_OWNER = 'test-owner';
process.env.GITHUB_REPO = 'test-repo';

// グローバルタイムアウト設定
jest.setTimeout(10000);

// グローバルセットアップ
beforeAll(async () => {
  // テスト用データディレクトリの作成
  const testDataDir = path.join(process.cwd(), 'tests', 'data');
  await fs.ensureDir(testDataDir);
  console.log('🧪 Test environment setup completed');
});

// 各テスト後のクリーンアップ
afterEach(() => {
  // モックのクリア
  jest.clearAllMocks();
});

// 全テスト後のクリーンアップ
afterAll(async () => {
  // テスト用ファイルのクリーンアップ
  const testDataDir = path.join(process.cwd(), 'tests', 'data');
  if (await fs.pathExists(testDataDir)) {
    await fs.remove(testDataDir);
  }
  console.log('🧹 Test environment cleanup completed');
});

// グローバルモック設定
global.mockConsole = {
  log: jest.fn(),
  error: jest.fn(),
  warn: jest.fn(),
  info: jest.fn()
};

// console.log をモック化（必要に応じて）
if (process.env.SILENCE_CONSOLE === 'true') {
  global.console = global.mockConsole;
}

// カスタムマッチャーの追加
expect.extend({
  toBeValidIssue(received) {
    const pass = received && typeof received.title === 'string' && received.title.length > 0 && Array.isArray(received.labels) && received.labels.length > 0;
    if (pass) {
      return {
        message: () => `expected ${received} not to be a valid issue`,
        pass: true
      };
    } else {
      return {
        message: () => `expected ${received} to be a valid issue with title and labels`,
        pass: false
      };
    }
  },
  toHaveGitHubIssueStructure(received) {
    const requiredFields = ['number', 'title', 'state', 'html_url'];
    const hasAllFields = requiredFields.every(field => received.hasOwnProperty(field));
    if (hasAllFields) {
      return {
        message: () => `expected ${received} not to have GitHub issue structure`,
        pass: true
      };
    } else {
      return {
        message: () => `expected ${received} to have GitHub issue structure with fields: ${requiredFields.join(', ')}`,
        pass: false
      };
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiUE9SVCIsIkdJVEhVQl9UT0tFTiIsIkdJVEhVQl9PV05FUiIsIkdJVEhVQl9SRVBPIiwiamVzdCIsInNldFRpbWVvdXQiLCJiZWZvcmVBbGwiLCJ0ZXN0RGF0YURpciIsImpvaW4iLCJjd2QiLCJlbnN1cmVEaXIiLCJjb25zb2xlIiwibG9nIiwiYWZ0ZXJFYWNoIiwiY2xlYXJBbGxNb2NrcyIsImFmdGVyQWxsIiwicGF0aEV4aXN0cyIsInJlbW92ZSIsImdsb2JhbCIsIm1vY2tDb25zb2xlIiwiZm4iLCJlcnJvciIsIndhcm4iLCJpbmZvIiwiU0lMRU5DRV9DT05TT0xFIiwiZXhwZWN0IiwiZXh0ZW5kIiwidG9CZVZhbGlkSXNzdWUiLCJyZWNlaXZlZCIsInBhc3MiLCJ0aXRsZSIsImxlbmd0aCIsIkFycmF5IiwiaXNBcnJheSIsImxhYmVscyIsIm1lc3NhZ2UiLCJ0b0hhdmVHaXRIdWJJc3N1ZVN0cnVjdHVyZSIsInJlcXVpcmVkRmllbGRzIiwiaGFzQWxsRmllbGRzIiwiZXZlcnkiLCJmaWVsZCIsImhhc093blByb3BlcnR5Il0sInNvdXJjZXMiOlsic2V0dXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBKZXN0IOODhuOCueODiOeSsOWig+OBruOCu+ODg+ODiOOCouODg+ODl+ODleOCoeOCpOODq1xuICovXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbi8vIOODhuOCueODiOeSsOWig+WkieaVsOOBruioreWumlxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG5wcm9jZXNzLmVudi5QT1JUID0gJzMwMDEnO1xucHJvY2Vzcy5lbnYuR0lUSFVCX1RPS0VOID0gJ3Rlc3QtdG9rZW4nO1xucHJvY2Vzcy5lbnYuR0lUSFVCX09XTkVSID0gJ3Rlc3Qtb3duZXInO1xucHJvY2Vzcy5lbnYuR0lUSFVCX1JFUE8gPSAndGVzdC1yZXBvJztcblxuLy8g44Kw44Ot44O844OQ44Or44K/44Kk44Og44Ki44Km44OI6Kit5a6aXG5qZXN0LnNldFRpbWVvdXQoMTAwMDApO1xuXG4vLyDjgrDjg63jg7zjg5Djg6vjgrvjg4Pjg4jjgqLjg4Pjg5dcbmJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gIC8vIOODhuOCueODiOeUqOODh+ODvOOCv+ODh+OCo+ODrOOCr+ODiOODquOBruS9nOaIkFxuICBjb25zdCB0ZXN0RGF0YURpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGVzdHMnLCAnZGF0YScpO1xuICBhd2FpdCBmcy5lbnN1cmVEaXIodGVzdERhdGFEaXIpO1xuXG4gIGNvbnNvbGUubG9nKCfwn6eqIFRlc3QgZW52aXJvbm1lbnQgc2V0dXAgY29tcGxldGVkJyk7XG59KTtcblxuLy8g5ZCE44OG44K544OI5b6M44Gu44Kv44Oq44O844Oz44Ki44OD44OXXG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyDjg6Ljg4Pjgq/jga7jgq/jg6rjgqJcbiAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG59KTtcblxuLy8g5YWo44OG44K544OI5b6M44Gu44Kv44Oq44O844Oz44Ki44OD44OXXG5hZnRlckFsbChhc3luYyAoKSA9PiB7XG4gIC8vIOODhuOCueODiOeUqOODleOCoeOCpOODq+OBruOCr+ODquODvOODs+OCouODg+ODl1xuICBjb25zdCB0ZXN0RGF0YURpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndGVzdHMnLCAnZGF0YScpO1xuICBpZiAoYXdhaXQgZnMucGF0aEV4aXN0cyh0ZXN0RGF0YURpcikpIHtcbiAgICBhd2FpdCBmcy5yZW1vdmUodGVzdERhdGFEaXIpO1xuICB9XG5cbiAgY29uc29sZS5sb2coJ/Cfp7kgVGVzdCBlbnZpcm9ubWVudCBjbGVhbnVwIGNvbXBsZXRlZCcpO1xufSk7XG5cbi8vIOOCsOODreODvOODkOODq+ODouODg+OCr+ioreWumlxuZ2xvYmFsLm1vY2tDb25zb2xlID0ge1xuICBsb2c6IGplc3QuZm4oKSxcbiAgZXJyb3I6IGplc3QuZm4oKSxcbiAgd2FybjogamVzdC5mbigpLFxuICBpbmZvOiBqZXN0LmZuKClcbn07XG5cbi8vIGNvbnNvbGUubG9nIOOCkuODouODg+OCr+WMlu+8iOW/heimgeOBq+W/nOOBmOOBpu+8iVxuaWYgKHByb2Nlc3MuZW52LlNJTEVOQ0VfQ09OU09MRSA9PT0gJ3RydWUnKSB7XG4gIGdsb2JhbC5jb25zb2xlID0gZ2xvYmFsLm1vY2tDb25zb2xlO1xufVxuXG4vLyDjgqvjgrnjgr/jg6Djg57jg4Pjg4Hjg6Pjg7zjga7ov73liqBcbmV4cGVjdC5leHRlbmQoe1xuICB0b0JlVmFsaWRJc3N1ZShyZWNlaXZlZCkge1xuICAgIGNvbnN0IHBhc3MgPVxuICAgICAgcmVjZWl2ZWQgJiZcbiAgICAgIHR5cGVvZiByZWNlaXZlZC50aXRsZSA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHJlY2VpdmVkLnRpdGxlLmxlbmd0aCA+IDAgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkocmVjZWl2ZWQubGFiZWxzKSAmJlxuICAgICAgcmVjZWl2ZWQubGFiZWxzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAocGFzcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9IG5vdCB0byBiZSBhIHZhbGlkIGlzc3VlYCxcbiAgICAgICAgcGFzczogdHJ1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogKCkgPT4gYGV4cGVjdGVkICR7cmVjZWl2ZWR9IHRvIGJlIGEgdmFsaWQgaXNzdWUgd2l0aCB0aXRsZSBhbmQgbGFiZWxzYCxcbiAgICAgICAgcGFzczogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9LFxuXG4gIHRvSGF2ZUdpdEh1Yklzc3VlU3RydWN0dXJlKHJlY2VpdmVkKSB7XG4gICAgY29uc3QgcmVxdWlyZWRGaWVsZHMgPSBbJ251bWJlcicsICd0aXRsZScsICdzdGF0ZScsICdodG1sX3VybCddO1xuICAgIGNvbnN0IGhhc0FsbEZpZWxkcyA9IHJlcXVpcmVkRmllbGRzLmV2ZXJ5KGZpZWxkID0+IHJlY2VpdmVkLmhhc093blByb3BlcnR5KGZpZWxkKSk7XG5cbiAgICBpZiAoaGFzQWxsRmllbGRzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAoKSA9PiBgZXhwZWN0ZWQgJHtyZWNlaXZlZH0gbm90IHRvIGhhdmUgR2l0SHViIGlzc3VlIHN0cnVjdHVyZWAsXG4gICAgICAgIHBhc3M6IHRydWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6ICgpID0+XG4gICAgICAgICAgYGV4cGVjdGVkICR7cmVjZWl2ZWR9IHRvIGhhdmUgR2l0SHViIGlzc3VlIHN0cnVjdHVyZSB3aXRoIGZpZWxkczogJHtyZXF1aXJlZEZpZWxkcy5qb2luKCcsICcpfWAsXG4gICAgICAgIHBhc3M6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDOUIsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUU1QjtBQUNBRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHLE1BQU07QUFDN0JGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRSxJQUFJLEdBQUcsTUFBTTtBQUN6QkgsT0FBTyxDQUFDQyxHQUFHLENBQUNHLFlBQVksR0FBRyxZQUFZO0FBQ3ZDSixPQUFPLENBQUNDLEdBQUcsQ0FBQ0ksWUFBWSxHQUFHLFlBQVk7QUFDdkNMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDSyxXQUFXLEdBQUcsV0FBVzs7QUFFckM7QUFDQUMsSUFBSSxDQUFDQyxVQUFVLENBQUMsS0FBSyxDQUFDOztBQUV0QjtBQUNB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