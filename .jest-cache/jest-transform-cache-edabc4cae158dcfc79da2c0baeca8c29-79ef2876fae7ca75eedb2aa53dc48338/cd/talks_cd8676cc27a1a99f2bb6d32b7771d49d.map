{"version":3,"names":["cov_1z5uyma7mc","actualCoverage","express","body","param","query","validationResult","router","s","Router","handleValidationErrors","req","res","next","f","errors","isEmpty","b","status","json","error","details","array","get","isLength","min","withMessage","database","app","locals","eventId","params","category","limit","offset","sortBy","sortOrder","filter","talks","findAll","sort","a","aValue","bValue","total","length","paginatedTalks","slice","parseInt","pagination","hasMore","summary","confirmed","t","pending","categories","reduce","acc","talk","console","message","post","trim","max","isIn","isEmail","normalizeEmail","eventService","talkData","event","findById","validateTalkSubmission","settings","getSettings","create","duration","talkDuration","talkSettings","requireApproval","submissionSource","trackAnalytics","id","source","success","title","submittedAt","createdAt","put","optional","updates","updatedTalk","update","from","to","delete","talkId"],"sources":["talks.js"],"sourcesContent":["/**\n * Talks API Routes\n * Handle talk submissions and management\n */\n\nimport express from 'express';\nimport { body, param, query, validationResult } from 'express-validator';\n\nconst router = express.Router();\n\n// Helper function to handle validation errors\nconst handleValidationErrors = (req, res, next) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n            error: 'Validation failed',\n            details: errors.array()\n        });\n    }\n    next();\n};\n\n/**\n * GET /api/talks/:eventId\n * Get talks for a specific event\n */\nrouter.get('/:eventId',\n    param('eventId').isLength({ min: 1 }).withMessage('Event ID is required'),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database } = req.app.locals;\n            const { eventId } = req.params;\n            const { \n                status, \n                category,\n                limit = 50,\n                offset = 0,\n                sortBy = 'createdAt',\n                sortOrder = 'desc'\n            } = req.query;\n\n            // Build filter\n            const filter = { eventId };\n            if (status) filter.status = status;\n            if (category) filter.category = category;\n\n            // Get talks\n            let talks = await database.findAll('talks', filter);\n\n            // Sort talks\n            talks.sort((a, b) => {\n                const aValue = a[sortBy];\n                const bValue = b[sortBy];\n                if (sortOrder === 'desc') {\n                    return bValue > aValue ? 1 : -1;\n                }\n                return aValue > bValue ? 1 : -1;\n            });\n\n            // Paginate\n            const total = talks.length;\n            const paginatedTalks = talks.slice(\n                parseInt(offset),\n                parseInt(offset) + parseInt(limit)\n            );\n\n            res.json({\n                talks: paginatedTalks,\n                pagination: {\n                    total,\n                    limit: parseInt(limit),\n                    offset: parseInt(offset),\n                    hasMore: (parseInt(offset) + parseInt(limit)) < total\n                },\n                summary: {\n                    total,\n                    confirmed: talks.filter(t => t.status === 'confirmed').length,\n                    pending: talks.filter(t => t.status === 'pending').length,\n                    categories: talks.reduce((acc, talk) => {\n                        acc[talk.category] = (acc[talk.category] || 0) + 1;\n                        return acc;\n                    }, {})\n                }\n            });\n\n        } catch (error) {\n            console.error('Error fetching talks:', error);\n            res.status(500).json({\n                error: 'Failed to fetch talks',\n                message: '発表情報の取得に失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * POST /api/talks\n * Submit a new talk\n */\nrouter.post('/',\n    [\n        body('title')\n            .trim()\n            .isLength({ min: 1, max: 200 })\n            .withMessage('Title is required and must be less than 200 characters'),\n        body('description')\n            .trim()\n            .isLength({ min: 1, max: 2000 })\n            .withMessage('Description is required and must be less than 2000 characters'),\n        body('category')\n            .isIn(['tech', 'hobby', 'learning', 'travel', 'food', 'game', 'lifehack', 'pet', 'garden', 'money', 'sports', 'music', 'other'])\n            .withMessage('Valid category is required'),\n        body('eventId')\n            .isLength({ min: 1 })\n            .withMessage('Event ID is required'),\n        body('speakerName')\n            .trim()\n            .isLength({ min: 1, max: 100 })\n            .withMessage('Speaker name is required'),\n        body('speakerEmail')\n            .isEmail()\n            .normalizeEmail()\n            .withMessage('Valid speaker email is required')\n    ],\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const talkData = req.body;\n\n            // Get event\n            const event = await database.findById('events', talkData.eventId);\n            if (!event) {\n                return res.status(404).json({\n                    error: 'Event not found',\n                    message: 'イベントが見つかりません'\n                });\n            }\n\n            // Validate talk submission\n            await eventService.validateTalkSubmission(event, talkData);\n\n            const settings = await database.getSettings();\n\n            // Create talk\n            const talk = await database.create('talks', {\n                ...talkData,\n                duration: event.talkDuration || 5,\n                status: settings.talkSettings?.requireApproval ? 'pending' : 'confirmed',\n                submissionSource: 'api'\n            });\n\n            // Track analytics\n            await eventService.trackAnalytics(event.id, 'talk_submitted', {\n                category: talk.category,\n                source: 'api'\n            });\n\n            res.status(201).json({\n                success: true,\n                message: 'Talk submitted successfully',\n                talk: {\n                    id: talk.id,\n                    title: talk.title,\n                    category: talk.category,\n                    status: talk.status,\n                    submittedAt: talk.createdAt\n                }\n            });\n\n        } catch (error) {\n            console.error('Error submitting talk:', error);\n            res.status(500).json({\n                error: 'Failed to submit talk',\n                message: '発表申込みに失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * PUT /api/talks/:id\n * Update a talk\n */\nrouter.put('/:id',\n    [\n        param('id').isLength({ min: 1 }).withMessage('Talk ID is required'),\n        body('title').optional().trim().isLength({ min: 1, max: 200 }),\n        body('description').optional().trim().isLength({ min: 1, max: 2000 }),\n        body('category').optional().isIn(['tech', 'hobby', 'learning', 'travel', 'food', 'game', 'lifehack', 'pet', 'garden', 'money', 'sports', 'music', 'other']),\n        body('status').optional().isIn(['pending', 'confirmed', 'rejected'])\n    ],\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const { id } = req.params;\n            const updates = req.body;\n\n            // Find existing talk\n            const talk = await database.findById('talks', id);\n            if (!talk) {\n                return res.status(404).json({\n                    error: 'Talk not found',\n                    message: '発表が見つかりません'\n                });\n            }\n\n            // Update talk\n            const updatedTalk = await database.update('talks', id, updates);\n\n            // Track analytics for status changes\n            if (updates.status && updates.status !== talk.status) {\n                await eventService.trackAnalytics(talk.eventId, 'talk_status_changed', {\n                    from: talk.status,\n                    to: updates.status\n                });\n            }\n\n            res.json({\n                success: true,\n                message: 'Talk updated successfully',\n                talk: updatedTalk\n            });\n\n        } catch (error) {\n            console.error('Error updating talk:', error);\n            res.status(500).json({\n                error: 'Failed to update talk',\n                message: '発表情報の更新に失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * DELETE /api/talks/:id\n * Delete a talk\n */\nrouter.delete('/:id',\n    param('id').isLength({ min: 1 }).withMessage('Talk ID is required'),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const { id } = req.params;\n\n            // Find existing talk\n            const talk = await database.findById('talks', id);\n            if (!talk) {\n                return res.status(404).json({\n                    error: 'Talk not found',\n                    message: '発表が見つかりません'\n                });\n            }\n\n            // Delete talk\n            await database.delete('talks', id);\n\n            // Track analytics\n            await eventService.trackAnalytics(talk.eventId, 'talk_deleted', {\n                category: talk.category,\n                status: talk.status\n            });\n\n            res.json({\n                success: true,\n                message: 'Talk deleted successfully',\n                talkId: id\n            });\n\n        } catch (error) {\n            console.error('Error deleting talk:', error);\n            res.status(500).json({\n                error: 'Failed to delete talk',\n                message: '発表の削除に失敗しました'\n            });\n        }\n    }\n);\n\nexport default router;"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ;AACA;AACA;AACA;;AAEA,OAAOE,OAAO,MAAM,SAAS;AAC7B,SAASC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,gBAAgB,QAAQ,mBAAmB;AAExE,MAAMC,MAAM;AAAA;AAAA,CAAAP,cAAA,GAAAQ,CAAA,OAAGN,OAAO,CAACO,MAAM,CAAC,CAAC;;AAE/B;AAAA;AAAAT,cAAA,GAAAQ,CAAA;AACA,MAAME,sBAAsB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAAA;EAAAb,cAAA,GAAAc,CAAA;EAC/C,MAAMC,MAAM;EAAA;EAAA,CAAAf,cAAA,GAAAQ,CAAA,OAAGF,gBAAgB,CAACK,GAAG,CAAC;EAAC;EAAAX,cAAA,GAAAQ,CAAA;EACrC,IAAI,CAACO,MAAM,CAACC,OAAO,CAAC,CAAC,EAAE;IAAA;IAAAhB,cAAA,GAAAiB,CAAA;IAAAjB,cAAA,GAAAQ,CAAA;IACnB,OAAOI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACxBC,KAAK,EAAE,mBAAmB;MAC1BC,OAAO,EAAEN,MAAM,CAACO,KAAK,CAAC;IAC1B,CAAC,CAAC;EACN,CAAC;EAAA;EAAA;IAAAtB,cAAA,GAAAiB,CAAA;EAAA;EAAAjB,cAAA,GAAAQ,CAAA;EACDK,IAAI,CAAC,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAAAb,cAAA,GAAAQ,CAAA;AAIAD,MAAM,CAACgB,GAAG,CAAC,WAAW,EAClBnB,KAAK,CAAC,SAAS,CAAC,CAACoB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACC,WAAW,CAAC,sBAAsB,CAAC,EACzEhB,sBAAsB,EACtB,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAZ,cAAA,GAAAc,CAAA;EAAAd,cAAA,GAAAQ,CAAA;EAChB,IAAI;IACA,MAAM;MAAEmB;IAAS,CAAC;IAAA;IAAA,CAAA3B,cAAA,GAAAQ,CAAA,OAAGG,GAAG,CAACiB,GAAG,CAACC,MAAM;IACnC,MAAM;MAAEC;IAAQ,CAAC;IAAA;IAAA,CAAA9B,cAAA,GAAAQ,CAAA,OAAGG,GAAG,CAACoB,MAAM;IAC9B,MAAM;MACFb,MAAM;MACNc,QAAQ;MACRC,KAAK;MAAA;MAAA,CAAAjC,cAAA,GAAAiB,CAAA,UAAG,EAAE;MACViB,MAAM;MAAA;MAAA,CAAAlC,cAAA,GAAAiB,CAAA,UAAG,CAAC;MACVkB,MAAM;MAAA;MAAA,CAAAnC,cAAA,GAAAiB,CAAA,UAAG,WAAW;MACpBmB,SAAS;MAAA;MAAA,CAAApC,cAAA,GAAAiB,CAAA,UAAG,MAAM;IACtB,CAAC;IAAA;IAAA,CAAAjB,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACN,KAAK;;IAEb;IACA,MAAMgC,MAAM;IAAA;IAAA,CAAArC,cAAA,GAAAQ,CAAA,QAAG;MAAEsB;IAAQ,CAAC;IAAC;IAAA9B,cAAA,GAAAQ,CAAA;IAC3B,IAAIU,MAAM,EAAE;MAAA;MAAAlB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MAAA6B,MAAM,CAACnB,MAAM,GAAGA,MAAM;IAAA,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAQ,CAAA;IACnC,IAAIwB,QAAQ,EAAE;MAAA;MAAAhC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MAAA6B,MAAM,CAACL,QAAQ,GAAGA,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAhC,cAAA,GAAAiB,CAAA;IAAA;;IAEzC;IACA,IAAIqB,KAAK;IAAA;IAAA,CAAAtC,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAACY,OAAO,CAAC,OAAO,EAAEF,MAAM,CAAC;;IAEnD;IAAA;IAAArC,cAAA,GAAAQ,CAAA;IACA8B,KAAK,CAACE,IAAI,CAAC,CAACC,CAAC,EAAExB,CAAC,KAAK;MAAA;MAAAjB,cAAA,GAAAc,CAAA;MACjB,MAAM4B,MAAM;MAAA;MAAA,CAAA1C,cAAA,GAAAQ,CAAA,QAAGiC,CAAC,CAACN,MAAM,CAAC;MACxB,MAAMQ,MAAM;MAAA;MAAA,CAAA3C,cAAA,GAAAQ,CAAA,QAAGS,CAAC,CAACkB,MAAM,CAAC;MAAC;MAAAnC,cAAA,GAAAQ,CAAA;MACzB,IAAI4B,SAAS,KAAK,MAAM,EAAE;QAAA;QAAApC,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAQ,CAAA;QACtB,OAAOmC,MAAM,GAAGD,MAAM;QAAA;QAAA,CAAA1C,cAAA,GAAAiB,CAAA,UAAG,CAAC;QAAA;QAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAG,CAAC,CAAC;MACnC,CAAC;MAAA;MAAA;QAAAjB,cAAA,GAAAiB,CAAA;MAAA;MAAAjB,cAAA,GAAAQ,CAAA;MACD,OAAOkC,MAAM,GAAGC,MAAM;MAAA;MAAA,CAAA3C,cAAA,GAAAiB,CAAA,UAAG,CAAC;MAAA;MAAA,CAAAjB,cAAA,GAAAiB,CAAA,UAAG,CAAC,CAAC;IACnC,CAAC,CAAC;;IAEF;IACA,MAAM2B,KAAK;IAAA;IAAA,CAAA5C,cAAA,GAAAQ,CAAA,QAAG8B,KAAK,CAACO,MAAM;IAC1B,MAAMC,cAAc;IAAA;IAAA,CAAA9C,cAAA,GAAAQ,CAAA,QAAG8B,KAAK,CAACS,KAAK,CAC9BC,QAAQ,CAACd,MAAM,CAAC,EAChBc,QAAQ,CAACd,MAAM,CAAC,GAAGc,QAAQ,CAACf,KAAK,CACrC,CAAC;IAAC;IAAAjC,cAAA,GAAAQ,CAAA;IAEFI,GAAG,CAACO,IAAI,CAAC;MACLmB,KAAK,EAAEQ,cAAc;MACrBG,UAAU,EAAE;QACRL,KAAK;QACLX,KAAK,EAAEe,QAAQ,CAACf,KAAK,CAAC;QACtBC,MAAM,EAAEc,QAAQ,CAACd,MAAM,CAAC;QACxBgB,OAAO,EAAGF,QAAQ,CAACd,MAAM,CAAC,GAAGc,QAAQ,CAACf,KAAK,CAAC,GAAIW;MACpD,CAAC;MACDO,OAAO,EAAE;QACLP,KAAK;QACLQ,SAAS,EAAEd,KAAK,CAACD,MAAM,CAACgB,CAAC,IAAI;UAAA;UAAArD,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAQ,CAAA;UAAA,OAAA6C,CAAC,CAACnC,MAAM,KAAK,WAAW;QAAD,CAAC,CAAC,CAAC2B,MAAM;QAC7DS,OAAO,EAAEhB,KAAK,CAACD,MAAM,CAACgB,CAAC,IAAI;UAAA;UAAArD,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAQ,CAAA;UAAA,OAAA6C,CAAC,CAACnC,MAAM,KAAK,SAAS;QAAD,CAAC,CAAC,CAAC2B,MAAM;QACzDU,UAAU,EAAEjB,KAAK,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;UAAA;UAAA1D,cAAA,GAAAc,CAAA;UAAAd,cAAA,GAAAQ,CAAA;UACpCiD,GAAG,CAACC,IAAI,CAAC1B,QAAQ,CAAC,GAAG;UAAC;UAAA,CAAAhC,cAAA,GAAAiB,CAAA,WAAAwC,GAAG,CAACC,IAAI,CAAC1B,QAAQ,CAAC;UAAA;UAAA,CAAAhC,cAAA,GAAAiB,CAAA,WAAI,CAAC,KAAI,CAAC;UAAC;UAAAjB,cAAA,GAAAQ,CAAA;UACnD,OAAOiD,GAAG;QACd,CAAC,EAAE,CAAC,CAAC;MACT;IACJ,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOrC,KAAK,EAAE;IAAA;IAAApB,cAAA,GAAAQ,CAAA;IACZmD,OAAO,CAACvC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAAC;IAAApB,cAAA,GAAAQ,CAAA;IAC9CI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,KAAK,EAAE,uBAAuB;MAC9BwC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CACJ,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAAA5D,cAAA,GAAAQ,CAAA;AAIAD,MAAM,CAACsD,IAAI,CAAC,GAAG,EACX,CACI1D,IAAI,CAAC,OAAO,CAAC,CACR2D,IAAI,CAAC,CAAC,CACNtC,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEsC,GAAG,EAAE;AAAI,CAAC,CAAC,CAC9BrC,WAAW,CAAC,wDAAwD,CAAC,EAC1EvB,IAAI,CAAC,aAAa,CAAC,CACd2D,IAAI,CAAC,CAAC,CACNtC,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEsC,GAAG,EAAE;AAAK,CAAC,CAAC,CAC/BrC,WAAW,CAAC,+DAA+D,CAAC,EACjFvB,IAAI,CAAC,UAAU,CAAC,CACX6D,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,CAC/HtC,WAAW,CAAC,4BAA4B,CAAC,EAC9CvB,IAAI,CAAC,SAAS,CAAC,CACVqB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CACpBC,WAAW,CAAC,sBAAsB,CAAC,EACxCvB,IAAI,CAAC,aAAa,CAAC,CACd2D,IAAI,CAAC,CAAC,CACNtC,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEsC,GAAG,EAAE;AAAI,CAAC,CAAC,CAC9BrC,WAAW,CAAC,0BAA0B,CAAC,EAC5CvB,IAAI,CAAC,cAAc,CAAC,CACf8D,OAAO,CAAC,CAAC,CACTC,cAAc,CAAC,CAAC,CAChBxC,WAAW,CAAC,iCAAiC,CAAC,CACtD,EACDhB,sBAAsB,EACtB,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAZ,cAAA,GAAAc,CAAA;EAAAd,cAAA,GAAAQ,CAAA;EAChB,IAAI;IACA,MAAM;MAAEmB,QAAQ;MAAEwC;IAAa,CAAC;IAAA;IAAA,CAAAnE,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACiB,GAAG,CAACC,MAAM;IACjD,MAAMuC,QAAQ;IAAA;IAAA,CAAApE,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACR,IAAI;;IAEzB;IACA,MAAMkE,KAAK;IAAA;IAAA,CAAArE,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAAC2C,QAAQ,CAAC,QAAQ,EAAEF,QAAQ,CAACtC,OAAO,CAAC;IAAC;IAAA9B,cAAA,GAAAQ,CAAA;IAClE,IAAI,CAAC6D,KAAK,EAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MACR,OAAOI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACxBC,KAAK,EAAE,iBAAiB;QACxBwC,OAAO,EAAE;MACb,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAiB,CAAA;IAAA;;IAED;IAAAjB,cAAA,GAAAQ,CAAA;IACA,MAAM2D,YAAY,CAACI,sBAAsB,CAACF,KAAK,EAAED,QAAQ,CAAC;IAE1D,MAAMI,QAAQ;IAAA;IAAA,CAAAxE,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAAC8C,WAAW,CAAC,CAAC;;IAE7C;IACA,MAAMf,IAAI;IAAA;IAAA,CAAA1D,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAAC+C,MAAM,CAAC,OAAO,EAAE;MACxC,GAAGN,QAAQ;MACXO,QAAQ;MAAE;MAAA,CAAA3E,cAAA,GAAAiB,CAAA,WAAAoD,KAAK,CAACO,YAAY;MAAA;MAAA,CAAA5E,cAAA,GAAAiB,CAAA,WAAI,CAAC;MACjCC,MAAM,EAAEsD,QAAQ,CAACK,YAAY,EAAEC,eAAe;MAAA;MAAA,CAAA9E,cAAA,GAAAiB,CAAA,WAAG,SAAS;MAAA;MAAA,CAAAjB,cAAA,GAAAiB,CAAA,WAAG,WAAW;MACxE8D,gBAAgB,EAAE;IACtB,CAAC,CAAC;;IAEF;IAAA;IAAA/E,cAAA,GAAAQ,CAAA;IACA,MAAM2D,YAAY,CAACa,cAAc,CAACX,KAAK,CAACY,EAAE,EAAE,gBAAgB,EAAE;MAC1DjD,QAAQ,EAAE0B,IAAI,CAAC1B,QAAQ;MACvBkD,MAAM,EAAE;IACZ,CAAC,CAAC;IAAC;IAAAlF,cAAA,GAAAQ,CAAA;IAEHI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBgE,OAAO,EAAE,IAAI;MACbvB,OAAO,EAAE,6BAA6B;MACtCF,IAAI,EAAE;QACFuB,EAAE,EAAEvB,IAAI,CAACuB,EAAE;QACXG,KAAK,EAAE1B,IAAI,CAAC0B,KAAK;QACjBpD,QAAQ,EAAE0B,IAAI,CAAC1B,QAAQ;QACvBd,MAAM,EAAEwC,IAAI,CAACxC,MAAM;QACnBmE,WAAW,EAAE3B,IAAI,CAAC4B;MACtB;IACJ,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOlE,KAAK,EAAE;IAAA;IAAApB,cAAA,GAAAQ,CAAA;IACZmD,OAAO,CAACvC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAApB,cAAA,GAAAQ,CAAA;IAC/CI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,KAAK,EAAE,uBAAuB;MAC9BwC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CACJ,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAAA5D,cAAA,GAAAQ,CAAA;AAIAD,MAAM,CAACgF,GAAG,CAAC,MAAM,EACb,CACInF,KAAK,CAAC,IAAI,CAAC,CAACoB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACC,WAAW,CAAC,qBAAqB,CAAC,EACnEvB,IAAI,CAAC,OAAO,CAAC,CAACqF,QAAQ,CAAC,CAAC,CAAC1B,IAAI,CAAC,CAAC,CAACtC,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEsC,GAAG,EAAE;AAAI,CAAC,CAAC,EAC9D5D,IAAI,CAAC,aAAa,CAAC,CAACqF,QAAQ,CAAC,CAAC,CAAC1B,IAAI,CAAC,CAAC,CAACtC,QAAQ,CAAC;EAAEC,GAAG,EAAE,CAAC;EAAEsC,GAAG,EAAE;AAAK,CAAC,CAAC,EACrE5D,IAAI,CAAC,UAAU,CAAC,CAACqF,QAAQ,CAAC,CAAC,CAACxB,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,EAC3J7D,IAAI,CAAC,QAAQ,CAAC,CAACqF,QAAQ,CAAC,CAAC,CAACxB,IAAI,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CACvE,EACDtD,sBAAsB,EACtB,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAZ,cAAA,GAAAc,CAAA;EAAAd,cAAA,GAAAQ,CAAA;EAChB,IAAI;IACA,MAAM;MAAEmB,QAAQ;MAAEwC;IAAa,CAAC;IAAA;IAAA,CAAAnE,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACiB,GAAG,CAACC,MAAM;IACjD,MAAM;MAAEoD;IAAG,CAAC;IAAA;IAAA,CAAAjF,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACoB,MAAM;IACzB,MAAM0D,OAAO;IAAA;IAAA,CAAAzF,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACR,IAAI;;IAExB;IACA,MAAMuD,IAAI;IAAA;IAAA,CAAA1D,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAAC2C,QAAQ,CAAC,OAAO,EAAEW,EAAE,CAAC;IAAC;IAAAjF,cAAA,GAAAQ,CAAA;IAClD,IAAI,CAACkD,IAAI,EAAE;MAAA;MAAA1D,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MACP,OAAOI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACxBC,KAAK,EAAE,gBAAgB;QACvBwC,OAAO,EAAE;MACb,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAiB,CAAA;IAAA;;IAED;IACA,MAAMyE,WAAW;IAAA;IAAA,CAAA1F,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAACgE,MAAM,CAAC,OAAO,EAAEV,EAAE,EAAEQ,OAAO,CAAC;;IAE/D;IAAA;IAAAzF,cAAA,GAAAQ,CAAA;IACA;IAAI;IAAA,CAAAR,cAAA,GAAAiB,CAAA,WAAAwE,OAAO,CAACvE,MAAM;IAAA;IAAA,CAAAlB,cAAA,GAAAiB,CAAA,WAAIwE,OAAO,CAACvE,MAAM,KAAKwC,IAAI,CAACxC,MAAM,GAAE;MAAA;MAAAlB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MAClD,MAAM2D,YAAY,CAACa,cAAc,CAACtB,IAAI,CAAC5B,OAAO,EAAE,qBAAqB,EAAE;QACnE8D,IAAI,EAAElC,IAAI,CAACxC,MAAM;QACjB2E,EAAE,EAAEJ,OAAO,CAACvE;MAChB,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAlB,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAQ,CAAA;IAEDI,GAAG,CAACO,IAAI,CAAC;MACLgE,OAAO,EAAE,IAAI;MACbvB,OAAO,EAAE,2BAA2B;MACpCF,IAAI,EAAEgC;IACV,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOtE,KAAK,EAAE;IAAA;IAAApB,cAAA,GAAAQ,CAAA;IACZmD,OAAO,CAACvC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAAC;IAAApB,cAAA,GAAAQ,CAAA;IAC7CI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,KAAK,EAAE,uBAAuB;MAC9BwC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CACJ,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAAA5D,cAAA,GAAAQ,CAAA;AAIAD,MAAM,CAACuF,MAAM,CAAC,MAAM,EAChB1F,KAAK,CAAC,IAAI,CAAC,CAACoB,QAAQ,CAAC;EAAEC,GAAG,EAAE;AAAE,CAAC,CAAC,CAACC,WAAW,CAAC,qBAAqB,CAAC,EACnEhB,sBAAsB,EACtB,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAAA;EAAAZ,cAAA,GAAAc,CAAA;EAAAd,cAAA,GAAAQ,CAAA;EAChB,IAAI;IACA,MAAM;MAAEmB,QAAQ;MAAEwC;IAAa,CAAC;IAAA;IAAA,CAAAnE,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACiB,GAAG,CAACC,MAAM;IACjD,MAAM;MAAEoD;IAAG,CAAC;IAAA;IAAA,CAAAjF,cAAA,GAAAQ,CAAA,QAAGG,GAAG,CAACoB,MAAM;;IAEzB;IACA,MAAM2B,IAAI;IAAA;IAAA,CAAA1D,cAAA,GAAAQ,CAAA,QAAG,MAAMmB,QAAQ,CAAC2C,QAAQ,CAAC,OAAO,EAAEW,EAAE,CAAC;IAAC;IAAAjF,cAAA,GAAAQ,CAAA;IAClD,IAAI,CAACkD,IAAI,EAAE;MAAA;MAAA1D,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAQ,CAAA;MACP,OAAOI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QACxBC,KAAK,EAAE,gBAAgB;QACvBwC,OAAO,EAAE;MACb,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAA5D,cAAA,GAAAiB,CAAA;IAAA;;IAED;IAAAjB,cAAA,GAAAQ,CAAA;IACA,MAAMmB,QAAQ,CAACmE,MAAM,CAAC,OAAO,EAAEb,EAAE,CAAC;;IAElC;IAAA;IAAAjF,cAAA,GAAAQ,CAAA;IACA,MAAM2D,YAAY,CAACa,cAAc,CAACtB,IAAI,CAAC5B,OAAO,EAAE,cAAc,EAAE;MAC5DE,QAAQ,EAAE0B,IAAI,CAAC1B,QAAQ;MACvBd,MAAM,EAAEwC,IAAI,CAACxC;IACjB,CAAC,CAAC;IAAC;IAAAlB,cAAA,GAAAQ,CAAA;IAEHI,GAAG,CAACO,IAAI,CAAC;MACLgE,OAAO,EAAE,IAAI;MACbvB,OAAO,EAAE,2BAA2B;MACpCmC,MAAM,EAAEd;IACZ,CAAC,CAAC;EAEN,CAAC,CAAC,OAAO7D,KAAK,EAAE;IAAA;IAAApB,cAAA,GAAAQ,CAAA;IACZmD,OAAO,CAACvC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAAC;IAAApB,cAAA,GAAAQ,CAAA;IAC7CI,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,KAAK,EAAE,uBAAuB;MAC9BwC,OAAO,EAAE;IACb,CAAC,CAAC;EACN;AACJ,CACJ,CAAC;AAED,eAAerD,MAAM","ignoreList":[]}