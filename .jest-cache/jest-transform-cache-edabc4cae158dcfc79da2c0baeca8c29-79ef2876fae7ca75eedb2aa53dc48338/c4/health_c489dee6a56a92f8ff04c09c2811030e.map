{"version":3,"names":["cov_7pwt6a1ow","actualCoverage","express","os","EmailServiceFactory","router","s","Router","get","req","res","f","healthStatus","performHealthChecks","status","overall","b","json","error","console","timestamp","Date","toISOString","performDetailedHealthChecks","checks","performReadinessChecks","ready","results","message","uptime","process","pid","metrics","getPerformanceMetrics","app","version","env","npm_package_version","environment","NODE_ENV","emailHealth","testEmailConfiguration","email","services","Object","keys","filter","key","includes","healthyServices","service","length","basic","system","hostname","platform","arch","cpus","totalMemory","totalmem","freeMemory","freemem","loadAverage","loadavg","nodeVersion","processInfo","memoryUsage","cpuUsage","nodeEnv","port","PORT","databaseType","DATABASE_TYPE","emailEnabled","EMAIL_ENABLED","emailProvider","EMAIL_PROVIDER","allReady","emailValidation","validateConfiguration","valid","provider","warnings","errors","requiredEnvVars","missingEnvVars","varName","missing","memUsage","memory","rss","heapTotal","heapUsed","external","arrayBuffers","cpu","user","cpuCount","eventLoop","lag"],"sources":["health.js"],"sourcesContent":["/**\n * Health Check API Routes\n * Provides comprehensive application health monitoring\n */\n\nimport express from 'express';\nimport os from 'os';\nimport { EmailServiceFactory } from '../services/email-factory.js';\n\nconst router = express.Router();\n\n// Basic health check\nrouter.get('/', async (req, res) => {\n    try {\n        const healthStatus = await performHealthChecks();\n        \n        const status = healthStatus.overall === 'healthy' ? 200 : 503;\n        res.status(status).json(healthStatus);\n    } catch (error) {\n        console.error('Health check error:', error);\n        res.status(503).json({\n            status: 'unhealthy',\n            error: 'Health check failed',\n            timestamp: new Date().toISOString()\n        });\n    }\n});\n\n// Detailed health check\nrouter.get('/detailed', async (req, res) => {\n    try {\n        const healthStatus = await performDetailedHealthChecks();\n        \n        const status = healthStatus.overall === 'healthy' ? 200 : 503;\n        res.status(status).json(healthStatus);\n    } catch (error) {\n        console.error('Detailed health check error:', error);\n        res.status(503).json({\n            status: 'unhealthy',\n            error: 'Detailed health check failed',\n            timestamp: new Date().toISOString()\n        });\n    }\n});\n\n// Readiness probe (for Kubernetes/Docker)\nrouter.get('/ready', async (req, res) => {\n    try {\n        const checks = await performReadinessChecks();\n        \n        if (checks.ready) {\n            res.status(200).json({\n                status: 'ready',\n                checks: checks.results,\n                timestamp: new Date().toISOString()\n            });\n        } else {\n            res.status(503).json({\n                status: 'not-ready',\n                checks: checks.results,\n                timestamp: new Date().toISOString()\n            });\n        }\n    } catch (error) {\n        res.status(503).json({\n            status: 'not-ready',\n            error: error.message,\n            timestamp: new Date().toISOString()\n        });\n    }\n});\n\n// Liveness probe (for Kubernetes/Docker)\nrouter.get('/live', (req, res) => {\n    res.status(200).json({\n        status: 'alive',\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        pid: process.pid\n    });\n});\n\n// Performance metrics\nrouter.get('/metrics', async (req, res) => {\n    try {\n        const metrics = await getPerformanceMetrics();\n        res.json(metrics);\n    } catch (error) {\n        res.status(500).json({\n            error: 'Failed to get metrics',\n            message: error.message,\n            timestamp: new Date().toISOString()\n        });\n    }\n});\n\n// Basic health checks\nasync function performHealthChecks() {\n    const checks = {\n        app: { status: 'healthy', message: 'Application running' },\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        version: process.env.npm_package_version || '1.0.0',\n        environment: process.env.NODE_ENV || 'development'\n    };\n\n    // Check email service\n    try {\n        const emailHealth = await EmailServiceFactory.testEmailConfiguration();\n        checks.email = emailHealth;\n    } catch (error) {\n        checks.email = {\n            status: 'unhealthy',\n            error: error.message\n        };\n    }\n\n    // Determine overall status\n    const services = Object.keys(checks).filter(key => \n        !['timestamp', 'uptime', 'version', 'environment'].includes(key)\n    );\n    \n    const healthyServices = services.filter(service => \n        checks[service].status === 'healthy'\n    );\n\n    checks.overall = healthyServices.length === services.length ? 'healthy' : 'degraded';\n    \n    return checks;\n}\n\n// Detailed health checks\nasync function performDetailedHealthChecks() {\n    const basic = await performHealthChecks();\n    \n    // System information\n    const system = {\n        hostname: os.hostname(),\n        platform: os.platform(),\n        arch: os.arch(),\n        cpus: os.cpus().length,\n        totalMemory: os.totalmem(),\n        freeMemory: os.freemem(),\n        loadAverage: os.loadavg(),\n        nodeVersion: process.version\n    };\n\n    // Process information\n    const processInfo = {\n        pid: process.pid,\n        uptime: process.uptime(),\n        memoryUsage: process.memoryUsage(),\n        cpuUsage: process.cpuUsage()\n    };\n\n    // Environment checks\n    const environment = {\n        nodeEnv: process.env.NODE_ENV,\n        port: process.env.PORT,\n        databaseType: process.env.DATABASE_TYPE,\n        emailEnabled: process.env.EMAIL_ENABLED,\n        emailProvider: process.env.EMAIL_PROVIDER\n    };\n\n    return {\n        ...basic,\n        system,\n        process: processInfo,\n        environment\n    };\n}\n\n// Readiness checks (for orchestration platforms)\nasync function performReadinessChecks() {\n    const results = {};\n    let allReady = true;\n\n    // Check if email service is configured\n    try {\n        const emailValidation = EmailServiceFactory.validateConfiguration();\n        results.email = {\n            ready: emailValidation.valid,\n            provider: emailValidation.provider,\n            warnings: emailValidation.warnings,\n            errors: emailValidation.errors\n        };\n        \n        if (!emailValidation.valid) {\n            allReady = false;\n        }\n    } catch (error) {\n        results.email = {\n            ready: false,\n            error: error.message\n        };\n        allReady = false;\n    }\n\n    // Check environment variables\n    const requiredEnvVars = [\n        'NODE_ENV',\n        'JWT_SECRET',\n        'SESSION_SECRET'\n    ];\n\n    const missingEnvVars = requiredEnvVars.filter(varName => !process.env[varName]);\n    results.environment = {\n        ready: missingEnvVars.length === 0,\n        missing: missingEnvVars\n    };\n\n    if (missingEnvVars.length > 0) {\n        allReady = false;\n    }\n\n    return {\n        ready: allReady,\n        results\n    };\n}\n\n// Performance metrics\nasync function getPerformanceMetrics() {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    return {\n        timestamp: new Date().toISOString(),\n        uptime: process.uptime(),\n        memory: {\n            rss: memUsage.rss,\n            heapTotal: memUsage.heapTotal,\n            heapUsed: memUsage.heapUsed,\n            external: memUsage.external,\n            arrayBuffers: memUsage.arrayBuffers\n        },\n        cpu: {\n            user: cpuUsage.user,\n            system: cpuUsage.system\n        },\n        system: {\n            totalMemory: os.totalmem(),\n            freeMemory: os.freemem(),\n            loadAverage: os.loadavg(),\n            cpuCount: os.cpus().length\n        },\n        eventLoop: {\n            // Event loop lag would be measured here in a real implementation\n            lag: 0\n        }\n    };\n}\n\nexport default router;"],"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","ignoreList":[]}