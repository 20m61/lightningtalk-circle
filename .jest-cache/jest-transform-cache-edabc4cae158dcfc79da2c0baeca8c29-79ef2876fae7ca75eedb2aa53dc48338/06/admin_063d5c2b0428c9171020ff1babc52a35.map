{"version":3,"names":["cov_2czyamd98","actualCoverage","express","body","param","query","validateRequest","sanitizeInput","securityHeaders","rateLimiters","validateApiKey","adminValidationRules","queryValidationRules","router","s","Router","use","admin","get","req","res","f","rateLimitMonitor","stats","getStats","json","success","rateLimitStats","recommendations","suspiciousActivity","suspiciousIPs","highTrafficDetected","totalAttempts","recentAttacks","recentAttempts","filter","attempt","attempts","length","error","console","status","message","post","clearSuspicious","isIP","withMessage","ip","addToSuspicious","database","app","locals","currentEvent","getCurrentEvent","totalEvents","totalParticipants","totalTalks","recentParticipants","recentTalks","Promise","all","count","findAll","then","participants","sort","a","b","Date","createdAt","slice","talks","currentEventStats","eventParticipants","eventTalks","eventAnalytics","eventId","id","getEventAnalytics","spotsRemaining","Math","max","maxTalks","overview","activeEvents","recentActivity","map","p","name","participationType","registeredAt","t","title","speakerName","category","submittedAt","systemHealth","uptime","process","memoryUsage","timestamp","toISOString","optional","isLength","min","isIn","handleValidationErrors","eventService","dateRange","analyticsData","allAnalytics","filteredAnalytics","days","parseInt","replace","cutoffDate","setDate","getDate","item","processAnalytics","insights","generateInsights","analytics","generatedAt","filters","type","format","data","filename","split","exportData","csv","convertToCSV","setHeader","send","exportType","exportDate","recordCount","Array","isArray","Object","keys","settings","getSettings","put","updates","updatedSettings","updateSettings","action","result","performCleanup","performBackup","performOptimization","actionCounts","participant_registered","trend","values","timeline","avgDailyRegistrations","reduce","sum","day","push","value","toFixed","description","categories","talk_submitted","headers","csvRows","join","row","header","oneYearAgo","setFullYear","getFullYear","oldAnalytics","delete","itemsRemoved","completedAt","backupId","now","log","arr","resolve","setTimeout","optimizationsApplied"],"sources":["admin.js"],"sourcesContent":["/**\n * Admin API Routes\n * Handle administrative functions\n */\n\nimport express from 'express';\nimport { body, param, query } from 'express-validator';\nimport { validateRequest, sanitizeInput, securityHeaders, rateLimiters, validateApiKey } from '../middleware/validation-enhanced.js';\nimport { adminValidationRules, queryValidationRules } from '../middleware/validation-rules.js';\n\nconst router = express.Router();\n\n// Apply admin security middleware\nrouter.use(securityHeaders);\nrouter.use(sanitizeInput);\nrouter.use(rateLimiters.admin);\nrouter.use(validateApiKey); // API key required for all admin endpoints\n\n/**\n * GET /api/admin/rate-limit-stats\n * Get rate limiting statistics and monitoring data\n */\nrouter.get('/rate-limit-stats', async (req, res) => {\n    try {\n        const { rateLimitMonitor } = await import('../middleware/rate-limiting.js');\n        const stats = rateLimitMonitor.getStats();\n        \n        res.json({\n            success: true,\n            rateLimitStats: stats,\n            recommendations: {\n                suspiciousActivity: stats.suspiciousIPs > 0,\n                highTrafficDetected: stats.totalAttempts > 100,\n                recentAttacks: stats.recentAttempts.filter(attempt => attempt.attempts > 10).length\n            }\n        });\n    } catch (error) {\n        console.error('Error fetching rate limit stats:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Failed to fetch rate limit statistics'\n        });\n    }\n});\n\n/**\n * POST /api/admin/rate-limit/clear-suspicious\n * Clear suspicious IPs list\n */\nrouter.post('/rate-limit/clear-suspicious', async (req, res) => {\n    try {\n        const { rateLimitMonitor } = await import('../middleware/rate-limiting.js');\n        rateLimitMonitor.clearSuspicious();\n        \n        res.json({\n            success: true,\n            message: 'Suspicious IPs list cleared successfully'\n        });\n    } catch (error) {\n        console.error('Error clearing suspicious IPs:', error);\n        res.status(500).json({\n            success: false,\n            message: 'Failed to clear suspicious IPs'\n        });\n    }\n});\n\n/**\n * POST /api/admin/rate-limit/add-suspicious\n * Add IP to suspicious list\n */\nrouter.post('/rate-limit/add-suspicious',\n    body('ip').isIP().withMessage('Valid IP address is required'),\n    validateRequest,\n    async (req, res) => {\n        try {\n            const { rateLimitMonitor } = await import('../middleware/rate-limiting.js');\n            const { ip } = req.body;\n            \n            rateLimitMonitor.addToSuspicious(ip);\n            \n            res.json({\n                success: true,\n                message: `IP ${ip} added to suspicious list`,\n                ip: ip\n            });\n        } catch (error) {\n            console.error('Error adding suspicious IP:', error);\n            res.status(500).json({\n                success: false,\n                message: 'Failed to add IP to suspicious list'\n            });\n        }\n    }\n);\n\n/**\n * GET /api/admin/dashboard\n * Get admin dashboard data\n */\nrouter.get('/dashboard', async (req, res) => {\n    try {\n        const { database } = req.app.locals;\n\n        // Get current event\n        const currentEvent = await database.getCurrentEvent();\n        \n        // Get overview statistics\n        const [\n            totalEvents,\n            totalParticipants,\n            totalTalks,\n            recentParticipants,\n            recentTalks\n        ] = await Promise.all([\n            database.count('events'),\n            database.count('participants'),\n            database.count('talks'),\n            database.findAll('participants', {}).then(participants => \n                participants.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 10)\n            ),\n            database.findAll('talks', {}).then(talks => \n                talks.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)).slice(0, 10)\n            )\n        ]);\n\n        // Get current event statistics if available\n        let currentEventStats = null;\n        if (currentEvent) {\n            const [eventParticipants, eventTalks, eventAnalytics] = await Promise.all([\n                database.count('participants', { eventId: currentEvent.id }),\n                database.count('talks', { eventId: currentEvent.id }),\n                database.getEventAnalytics(currentEvent.id)\n            ]);\n\n            currentEventStats = {\n                participants: eventParticipants,\n                talks: eventTalks,\n                spotsRemaining: Math.max(0, (currentEvent.maxTalks || 20) - eventTalks),\n                ...eventAnalytics\n            };\n        }\n\n        res.json({\n            overview: {\n                totalEvents,\n                totalParticipants,\n                totalTalks,\n                activeEvents: await database.count('events', { status: 'upcoming' })\n            },\n            currentEvent: currentEvent ? {\n                ...currentEvent,\n                stats: currentEventStats\n            } : null,\n            recentActivity: {\n                participants: recentParticipants.map(p => ({\n                    id: p.id,\n                    name: p.name,\n                    eventId: p.eventId,\n                    participationType: p.participationType,\n                    registeredAt: p.createdAt\n                })),\n                talks: recentTalks.map(t => ({\n                    id: t.id,\n                    title: t.title,\n                    speakerName: t.speakerName,\n                    category: t.category,\n                    eventId: t.eventId,\n                    submittedAt: t.createdAt\n                }))\n            },\n            systemHealth: {\n                uptime: process.uptime(),\n                memoryUsage: process.memoryUsage(),\n                timestamp: new Date().toISOString()\n            }\n        });\n\n    } catch (error) {\n        console.error('Error fetching dashboard data:', error);\n        res.status(500).json({\n            error: 'Failed to fetch dashboard data',\n            message: 'ダッシュボードデータの取得に失敗しました'\n        });\n    }\n});\n\n/**\n * GET /api/admin/analytics\n * Get system-wide analytics\n */\nrouter.get('/analytics',\n    query('eventId').optional().isLength({ min: 1 }),\n    query('dateRange').optional().isIn(['7d', '30d', '90d', 'all']),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const { eventId, dateRange = '30d' } = req.query;\n\n            let analyticsData;\n            \n            if (eventId) {\n                // Event-specific analytics\n                analyticsData = await eventService.getEventAnalytics(eventId);\n            } else {\n                // System-wide analytics\n                const allAnalytics = await database.findAll('analytics');\n                \n                // Filter by date range\n                let filteredAnalytics = allAnalytics;\n                if (dateRange !== 'all') {\n                    const days = parseInt(dateRange.replace('d', ''));\n                    const cutoffDate = new Date();\n                    cutoffDate.setDate(cutoffDate.getDate() - days);\n                    \n                    filteredAnalytics = allAnalytics.filter(item => \n                        new Date(item.timestamp) >= cutoffDate\n                    );\n                }\n\n                analyticsData = eventService.processAnalytics(filteredAnalytics);\n            }\n\n            // Additional insights\n            const insights = await this.generateInsights(database, analyticsData);\n\n            res.json({\n                analytics: analyticsData,\n                insights,\n                generatedAt: new Date().toISOString(),\n                filters: { eventId, dateRange }\n            });\n\n        } catch (error) {\n            console.error('Error fetching analytics:', error);\n            res.status(500).json({\n                error: 'Failed to fetch analytics',\n                message: 'アナリティクスデータの取得に失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * GET /api/admin/export\n * Export data in various formats\n */\nrouter.get('/export',\n    query('type').isIn(['participants', 'talks', 'events', 'all']).withMessage('Valid export type required'),\n    query('eventId').optional().isLength({ min: 1 }),\n    query('format').optional().isIn(['json', 'csv']).withMessage('Valid format required'),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database } = req.app.locals;\n            const { type, eventId, format = 'json' } = req.query;\n\n            let data;\n            let filename;\n\n            switch (type) {\n                case 'participants':\n                    data = await database.findAll('participants', eventId ? { eventId } : {});\n                    filename = `participants-${eventId || 'all'}-${new Date().toISOString().split('T')[0]}`;\n                    break;\n                case 'talks':\n                    data = await database.findAll('talks', eventId ? { eventId } : {});\n                    filename = `talks-${eventId || 'all'}-${new Date().toISOString().split('T')[0]}`;\n                    break;\n                case 'events':\n                    data = await database.findAll('events');\n                    filename = `events-${new Date().toISOString().split('T')[0]}`;\n                    break;\n                case 'all':\n                    data = await database.exportData();\n                    filename = `full-export-${new Date().toISOString().split('T')[0]}`;\n                    break;\n            }\n\n            if (format === 'csv') {\n                const csv = this.convertToCSV(data);\n                res.setHeader('Content-Type', 'text/csv');\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}.csv\"`);\n                res.send(csv);\n            } else {\n                res.setHeader('Content-Type', 'application/json');\n                res.setHeader('Content-Disposition', `attachment; filename=\"${filename}.json\"`);\n                res.json({\n                    exportType: type,\n                    exportDate: new Date().toISOString(),\n                    recordCount: Array.isArray(data) ? data.length : Object.keys(data).length,\n                    data\n                });\n            }\n\n        } catch (error) {\n            console.error('Error exporting data:', error);\n            res.status(500).json({\n                error: 'Failed to export data',\n                message: 'データのエクスポートに失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * GET /api/admin/settings\n * Get system settings\n */\nrouter.get('/settings', async (req, res) => {\n    try {\n        const { database } = req.app.locals;\n        const settings = await database.getSettings();\n\n        res.json({\n            settings\n        });\n\n    } catch (error) {\n        console.error('Error fetching settings:', error);\n        res.status(500).json({\n            error: 'Failed to fetch settings',\n            message: '設定の取得に失敗しました'\n        });\n    }\n});\n\n/**\n * PUT /api/admin/settings\n * Update system settings\n */\nrouter.put('/settings', async (req, res) => {\n    try {\n        const { database } = req.app.locals;\n        const updates = req.body;\n\n        const updatedSettings = await database.updateSettings(updates);\n\n        res.json({\n            success: true,\n            message: 'Settings updated successfully',\n            settings: updatedSettings\n        });\n\n    } catch (error) {\n        console.error('Error updating settings:', error);\n        res.status(500).json({\n            error: 'Failed to update settings',\n            message: '設定の更新に失敗しました'\n        });\n    }\n});\n\n/**\n * POST /api/admin/maintenance\n * Perform maintenance tasks\n */\nrouter.post('/maintenance', async (req, res) => {\n    try {\n        const { database } = req.app.locals;\n        const { action } = req.body;\n\n        let result;\n\n        switch (action) {\n            case 'cleanup':\n                result = await this.performCleanup(database);\n                break;\n            case 'backup':\n                result = await this.performBackup(database);\n                break;\n            case 'optimize':\n                result = await this.performOptimization(database);\n                break;\n            default:\n                return res.status(400).json({\n                    error: 'Invalid maintenance action',\n                    message: '無効なメンテナンス操作です'\n                });\n        }\n\n        res.json({\n            success: true,\n            message: `Maintenance action '${action}' completed`,\n            result\n        });\n\n    } catch (error) {\n        console.error('Error performing maintenance:', error);\n        res.status(500).json({\n            error: 'Maintenance failed',\n            message: 'メンテナンス処理に失敗しました'\n        });\n    }\n});\n\n// Helper methods\nasync function generateInsights(database, analyticsData) {\n    const insights = [];\n\n    // Registration trend insight\n    if (analyticsData.actionCounts?.participant_registered > 0) {\n        const trend = Object.values(analyticsData.timeline || {});\n        const avgDailyRegistrations = trend.length > 0 ? \n            trend.reduce((sum, day) => sum + (day.participant_registered || 0), 0) / trend.length : 0;\n        \n        insights.push({\n            type: 'trend',\n            title: '登録トレンド',\n            value: avgDailyRegistrations.toFixed(1),\n            description: '1日あたりの平均登録数',\n            status: avgDailyRegistrations > 5 ? 'positive' : avgDailyRegistrations > 2 ? 'neutral' : 'negative'\n        });\n    }\n\n    // Popular categories\n    const categories = analyticsData.actionCounts || {};\n    const totalTalks = categories.talk_submitted || 0;\n    if (totalTalks > 0) {\n        insights.push({\n            type: 'category',\n            title: '発表カテゴリー',\n            value: totalTalks,\n            description: '提出された発表の総数',\n            status: 'neutral'\n        });\n    }\n\n    return insights;\n}\n\nfunction convertToCSV(data) {\n    if (!Array.isArray(data) || data.length === 0) {\n        return '';\n    }\n\n    const headers = Object.keys(data[0]);\n    const csvRows = [headers.join(',')];\n\n    for (const row of data) {\n        const values = headers.map(header => {\n            const value = row[header];\n            return typeof value === 'string' ? `\"${value.replace(/\"/g, '\"\"')}\"` : value;\n        });\n        csvRows.push(values.join(','));\n    }\n\n    return csvRows.join('\\n');\n}\n\nasync function performCleanup(database) {\n    // Clean up old analytics data (older than 1 year)\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n    \n    const analytics = await database.findAll('analytics');\n    const oldAnalytics = analytics.filter(item => new Date(item.timestamp) < oneYearAgo);\n    \n    for (const item of oldAnalytics) {\n        await database.delete('analytics', item.id);\n    }\n\n    return {\n        action: 'cleanup',\n        itemsRemoved: oldAnalytics.length,\n        completedAt: new Date().toISOString()\n    };\n}\n\nasync function performBackup(database) {\n    const exportData = await database.exportData();\n    const backupId = `backup-${Date.now()}`;\n    \n    // In a real implementation, save to external storage\n    console.log(`Backup created: ${backupId}`);\n    \n    return {\n        action: 'backup',\n        backupId,\n        recordCount: Object.values(exportData).reduce((sum, arr) => sum + (Array.isArray(arr) ? arr.length : 0), 0),\n        completedAt: new Date().toISOString()\n    };\n}\n\nasync function performOptimization(database) {\n    // Optimize database performance (placeholder)\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n        action: 'optimization',\n        optimizationsApplied: ['index_rebuild', 'cache_clear'],\n        completedAt: new Date().toISOString()\n    };\n}\n\nexport default router;"],"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","ignoreList":[]}