{"version":3,"names":["logger","require","DatabaseService","AnalyticsService","constructor","db","getInstance","getEventStatistics","eventId","options","startDate","endDate","includeDetails","includeTrends","basicStats","getBasicEventStats","participantStats","getParticipantStats","talkStats","getTalkStats","trends","getEventTrends","details","getEventDetails","generatedAt","Date","toISOString","period","statistics","basic","participants","talks","error","Error","stats","query","length","event","eventInfo","id","title","date","venue","status","summary","totalParticipants","total_participants","totalTalks","total_talks","onlineParticipants","online_participants","offlineParticipants","offline_participants","confirmedTalks","confirmed_talks","pendingTalks","pending_talks","averageTalkDuration","parseFloat","avg_talk_duration","registrationPeriod","first","first_registration","last","last_registration","dateFilter","params","push","participantDistribution","registrationTimeline","geographicDistribution","attributeAnalysis","distribution","byType","map","row","type","participation_type","count","percentage","toFixed","byLocation","location","byOrganization","organizationType","organization_type","averageExperienceLevel","avg_experience_level","timeline","processRegistrationTimeline","totalRegistrations","reduce","sum","averagePerDay","calculateAveragePerDay","peakRegistrationDay","findPeakRegistrationDay","talkDistribution","speakerAnalysis","submissionTimeline","categoryPopularity","speakerStats","byCategory","category","averageDuration","avg_duration","byStatus","groupByStatus","speakers","uniqueSpeakers","unique_speakers","talksPerSpeaker","talks_per_speaker","firstTimeSpeakers","first_time_speakers","experiencedSpeakers","experienced_speakers","processSubmissionTimeline","duration","average","calculateAverageDuration","analyzeDurationDistribution","dailyRegistrations","getDailyRegistrations","dailySubmissions","getDailySubmissions","participationTypeTrends","getParticipationTypeTrends","predictions","calculatePredictions","registrations","daily","cumulative","calculateCumulative","submissions","participationTypes","insights","generateTrendInsights","participantsList","talksList","feedbackSummary","getFeedbackSummary","feedback","export","participantsCsv","generateParticipantsCsv","talksCsv","generateTalksCsv","compareEvents","eventIds","comparisons","metrics","onlineRatio","find","t","avgTalkDuration","analysis","analyzeEventComparisons","events","generateComparisonInsights","generateReport","reportType","generateSummaryReport","generateDetailedReport","generateExecutiveReport","generateParticipantReport","generateSpeakerReport","processed","forEach","online","offline","total","Object","values","confirmed","pending","statusGroups","totalDays","Set","size","peak","current","totalDuration","totalCount","durations","Math","round","dailyData","day","value","linearRegression","data","nextWeek","confidence","n","x","_","i","y","d","sumX","a","b","sumY","sumXY","xi","sumXX","slope","intercept","nextWeekPrediction","max","calculateConfidence","yMean","ssRes","ssTot","yi","predicted","pow","rSquared","min","recent","slice","earlier","recentAvg","earlierAvg","message","metric","change","c","standardDeviation","calculateStandardDeviation","mean","squareDiffs","avgSquareDiff","sqrt","participantValues","maxParticipants","bestEvent","keyMetrics","highlights","module","exports"],"sources":["analyticsService.js"],"sourcesContent":["/**\n * Analytics Service\n * イベント分析とレポート機能を提供するサービス\n */\n\nconst logger = require('../middleware/logger');\nconst { DatabaseService } = require('./database');\n\nclass AnalyticsService {\n  constructor() {\n    this.db = DatabaseService.getInstance();\n  }\n\n  /**\n   * イベント統計の取得\n   */\n  async getEventStatistics(eventId, options = {}) {\n    try {\n      const { startDate, endDate, includeDetails = false, includeTrends = false } = options;\n\n      // 基本統計\n      const basicStats = await this.getBasicEventStats(eventId);\n\n      // 参加者統計\n      const participantStats = await this.getParticipantStats(eventId, { startDate, endDate });\n\n      // 発表統計\n      const talkStats = await this.getTalkStats(eventId);\n\n      // 時系列データ（トレンド分析）\n      let trends = null;\n      if (includeTrends) {\n        trends = await this.getEventTrends(eventId, { startDate, endDate });\n      }\n\n      // 詳細データ\n      let details = null;\n      if (includeDetails) {\n        details = await this.getEventDetails(eventId);\n      }\n\n      return {\n        eventId,\n        generatedAt: new Date().toISOString(),\n        period: {\n          startDate: startDate || null,\n          endDate: endDate || null\n        },\n        statistics: {\n          basic: basicStats,\n          participants: participantStats,\n          talks: talkStats\n        },\n        trends,\n        details\n      };\n    } catch (error) {\n      logger.error('Failed to get event statistics:', error);\n      throw new Error('Failed to generate event statistics');\n    }\n  }\n\n  /**\n   * 基本イベント統計\n   */\n  async getBasicEventStats(eventId) {\n    const stats = await this.db.query(\n      `\n      SELECT \n        e.id,\n        e.title,\n        e.date,\n        e.venue,\n        e.status,\n        COUNT(DISTINCT p.id) as total_participants,\n        COUNT(DISTINCT t.id) as total_talks,\n        COUNT(DISTINCT CASE WHEN p.participation_type = 'online' THEN p.id END) as online_participants,\n        COUNT(DISTINCT CASE WHEN p.participation_type = 'offline' THEN p.id END) as offline_participants,\n        COUNT(DISTINCT CASE WHEN t.status = 'confirmed' THEN t.id END) as confirmed_talks,\n        COUNT(DISTINCT CASE WHEN t.status = 'pending' THEN t.id END) as pending_talks,\n        AVG(CASE WHEN t.duration IS NOT NULL THEN t.duration END) as avg_talk_duration,\n        MAX(p.created_at) as last_registration,\n        MIN(p.created_at) as first_registration\n      FROM events e\n      LEFT JOIN participants p ON e.id = p.event_id\n      LEFT JOIN talks t ON e.id = t.event_id\n      WHERE e.id = ?\n      GROUP BY e.id\n    `,\n      [eventId]\n    );\n\n    if (!stats || stats.length === 0) {\n      throw new Error('Event not found');\n    }\n\n    const event = stats[0];\n\n    return {\n      eventInfo: {\n        id: event.id,\n        title: event.title,\n        date: event.date,\n        venue: event.venue,\n        status: event.status\n      },\n      summary: {\n        totalParticipants: event.total_participants || 0,\n        totalTalks: event.total_talks || 0,\n        onlineParticipants: event.online_participants || 0,\n        offlineParticipants: event.offline_participants || 0,\n        confirmedTalks: event.confirmed_talks || 0,\n        pendingTalks: event.pending_talks || 0,\n        averageTalkDuration: parseFloat(event.avg_talk_duration) || 0,\n        registrationPeriod: {\n          first: event.first_registration,\n          last: event.last_registration\n        }\n      }\n    };\n  }\n\n  /**\n   * 参加者統計\n   */\n  async getParticipantStats(eventId, options = {}) {\n    const { startDate, endDate } = options;\n\n    let dateFilter = '';\n    const params = [eventId];\n\n    if (startDate && endDate) {\n      dateFilter = 'AND p.created_at BETWEEN ? AND ?';\n      params.push(startDate, endDate);\n    }\n\n    // 参加者の基本分布\n    const participantDistribution = await this.db.query(\n      `\n      SELECT \n        participation_type,\n        COUNT(*) as count,\n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM participants WHERE event_id = ?) as percentage\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY participation_type\n    `,\n      params\n    );\n\n    // 時間別登録数\n    const registrationTimeline = await this.db.query(\n      `\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as registrations,\n        participation_type\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY DATE(created_at), participation_type\n      ORDER BY date\n    `,\n      params\n    );\n\n    // 地域別分布（optional field）\n    const geographicDistribution = await this.db.query(\n      `\n      SELECT \n        COALESCE(location, 'Unknown') as location,\n        COUNT(*) as count\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY location\n      ORDER BY count DESC\n    `,\n      params\n    );\n\n    // 参加者の属性分析\n    const attributeAnalysis = await this.db.query(\n      `\n      SELECT \n        COALESCE(organization, 'Individual') as organization_type,\n        COUNT(*) as count,\n        AVG(CASE WHEN experience_level IS NOT NULL THEN \n          CASE experience_level \n            WHEN 'beginner' THEN 1 \n            WHEN 'intermediate' THEN 2 \n            WHEN 'advanced' THEN 3 \n            ELSE 2 \n          END \n        END) as avg_experience_level\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY organization_type\n      ORDER BY count DESC\n    `,\n      params\n    );\n\n    return {\n      distribution: {\n        byType: participantDistribution.map(row => ({\n          type: row.participation_type,\n          count: row.count,\n          percentage: parseFloat(row.percentage.toFixed(2))\n        })),\n        byLocation: geographicDistribution.map(row => ({\n          location: row.location,\n          count: row.count\n        })),\n        byOrganization: attributeAnalysis.map(row => ({\n          organizationType: row.organization_type,\n          count: row.count,\n          averageExperienceLevel: parseFloat(row.avg_experience_level?.toFixed(2)) || 0\n        }))\n      },\n      timeline: this.processRegistrationTimeline(registrationTimeline),\n      summary: {\n        totalRegistrations: participantDistribution.reduce((sum, row) => sum + row.count, 0),\n        averagePerDay: this.calculateAveragePerDay(registrationTimeline),\n        peakRegistrationDay: this.findPeakRegistrationDay(registrationTimeline)\n      }\n    };\n  }\n\n  /**\n   * 発表統計\n   */\n  async getTalkStats(eventId) {\n    // 発表の基本統計\n    const talkDistribution = await this.db.query(\n      `\n      SELECT \n        category,\n        status,\n        COUNT(*) as count,\n        AVG(duration) as avg_duration,\n        MIN(duration) as min_duration,\n        MAX(duration) as max_duration\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY category, status\n      ORDER BY category, status\n    `,\n      [eventId]\n    );\n\n    // 発表者の属性\n    const speakerAnalysis = await this.db.query(\n      `\n      SELECT \n        COUNT(DISTINCT speaker_name) as unique_speakers,\n        COUNT(*) as total_talks,\n        COUNT(*) * 1.0 / COUNT(DISTINCT speaker_name) as talks_per_speaker,\n        COUNT(CASE WHEN experience_level = 'first_time' THEN 1 END) as first_time_speakers,\n        COUNT(CASE WHEN experience_level = 'experienced' THEN 1 END) as experienced_speakers\n      FROM talks\n      WHERE event_id = ?\n    `,\n      [eventId]\n    );\n\n    // 申込み時系列\n    const submissionTimeline = await this.db.query(\n      `\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as submissions,\n        status\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY DATE(created_at), status\n      ORDER BY date\n    `,\n      [eventId]\n    );\n\n    // カテゴリ別人気度\n    const categoryPopularity = await this.db.query(\n      `\n      SELECT \n        category,\n        COUNT(*) as count,\n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM talks WHERE event_id = ?) as percentage,\n        AVG(duration) as avg_duration\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY category\n      ORDER BY count DESC\n    `,\n      [eventId, eventId]\n    );\n\n    const speakerStats = speakerAnalysis[0];\n\n    return {\n      distribution: {\n        byCategory: categoryPopularity.map(row => ({\n          category: row.category,\n          count: row.count,\n          percentage: parseFloat(row.percentage.toFixed(2)),\n          averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0\n        })),\n        byStatus: this.groupByStatus(talkDistribution)\n      },\n      speakers: {\n        uniqueSpeakers: speakerStats.unique_speakers || 0,\n        totalTalks: speakerStats.total_talks || 0,\n        talksPerSpeaker: parseFloat(speakerStats.talks_per_speaker?.toFixed(2)) || 0,\n        firstTimeSpeakers: speakerStats.first_time_speakers || 0,\n        experiencedSpeakers: speakerStats.experienced_speakers || 0\n      },\n      timeline: this.processSubmissionTimeline(submissionTimeline),\n      duration: {\n        average: this.calculateAverageDuration(talkDistribution),\n        distribution: this.analyzeDurationDistribution(talkDistribution)\n      }\n    };\n  }\n\n  /**\n   * イベントトレンド分析\n   */\n  async getEventTrends(eventId, options = {}) {\n    const { startDate, endDate } = options;\n\n    // 日別登録数推移\n    const dailyRegistrations = await this.getDailyRegistrations(eventId, { startDate, endDate });\n\n    // 日別発表申込み推移\n    const dailySubmissions = await this.getDailySubmissions(eventId, { startDate, endDate });\n\n    // 参加タイプの推移\n    const participationTypeTrends = await this.getParticipationTypeTrends(eventId, {\n      startDate,\n      endDate\n    });\n\n    // 予測データ（回帰分析）\n    const predictions = this.calculatePredictions(dailyRegistrations, dailySubmissions);\n\n    return {\n      registrations: {\n        daily: dailyRegistrations,\n        cumulative: this.calculateCumulative(dailyRegistrations),\n        predictions: predictions.registrations\n      },\n      submissions: {\n        daily: dailySubmissions,\n        cumulative: this.calculateCumulative(dailySubmissions),\n        predictions: predictions.submissions\n      },\n      participationTypes: participationTypeTrends,\n      insights: this.generateTrendInsights(\n        dailyRegistrations,\n        dailySubmissions,\n        participationTypeTrends\n      )\n    };\n  }\n\n  /**\n   * イベント詳細データ\n   */\n  async getEventDetails(eventId) {\n    // 参加者詳細リスト\n    const participantsList = await this.db.query(\n      `\n      SELECT \n        id,\n        name,\n        email,\n        participation_type,\n        organization,\n        location,\n        experience_level,\n        created_at\n      FROM participants\n      WHERE event_id = ?\n      ORDER BY created_at DESC\n    `,\n      [eventId]\n    );\n\n    // 発表詳細リスト\n    const talksList = await this.db.query(\n      `\n      SELECT \n        id,\n        title,\n        speaker_name,\n        speaker_email,\n        category,\n        duration,\n        description,\n        status,\n        experience_level,\n        created_at\n      FROM talks\n      WHERE event_id = ?\n      ORDER BY created_at DESC\n    `,\n      [eventId]\n    );\n\n    // フィードバック集計\n    const feedbackSummary = await this.getFeedbackSummary(eventId);\n\n    return {\n      participants: participantsList,\n      talks: talksList,\n      feedback: feedbackSummary,\n      export: {\n        participantsCsv: this.generateParticipantsCsv(participantsList),\n        talksCsv: this.generateTalksCsv(talksList)\n      }\n    };\n  }\n\n  /**\n   * 複数イベント比較分析\n   */\n  async compareEvents(eventIds, options = {}) {\n    const comparisons = [];\n\n    for (const eventId of eventIds) {\n      const stats = await this.getEventStatistics(eventId, options);\n      comparisons.push({\n        eventId,\n        title: stats.statistics.basic.eventInfo.title,\n        date: stats.statistics.basic.eventInfo.date,\n        metrics: {\n          participants: stats.statistics.basic.summary.totalParticipants,\n          talks: stats.statistics.basic.summary.totalTalks,\n          onlineRatio:\n            stats.statistics.participants.distribution.byType.find(t => t.type === 'online')\n              ?.percentage || 0,\n          avgTalkDuration: stats.statistics.basic.summary.averageTalkDuration\n        }\n      });\n    }\n\n    // 比較分析\n    const analysis = this.analyzeEventComparisons(comparisons);\n\n    return {\n      events: comparisons,\n      analysis,\n      insights: this.generateComparisonInsights(comparisons, analysis)\n    };\n  }\n\n  /**\n   * レポート生成\n   */\n  async generateReport(eventId, reportType, options = {}) {\n    try {\n      const stats = await this.getEventStatistics(eventId, {\n        includeDetails: true,\n        includeTrends: true,\n        ...options\n      });\n\n      switch (reportType) {\n        case 'summary':\n          return this.generateSummaryReport(stats);\n        case 'detailed':\n          return this.generateDetailedReport(stats);\n        case 'executive':\n          return this.generateExecutiveReport(stats);\n        case 'participant':\n          return this.generateParticipantReport(stats);\n        case 'speaker':\n          return this.generateSpeakerReport(stats);\n        default:\n          throw new Error('Invalid report type');\n      }\n    } catch (error) {\n      logger.error('Failed to generate report:', error);\n      throw new Error('Failed to generate report');\n    }\n  }\n\n  // ヘルパーメソッド\n\n  processRegistrationTimeline(timeline) {\n    const processed = {};\n    timeline.forEach(row => {\n      if (!processed[row.date]) {\n        processed[row.date] = { date: row.date, online: 0, offline: 0, total: 0 };\n      }\n      processed[row.date][row.participation_type] = row.registrations;\n      processed[row.date].total += row.registrations;\n    });\n    return Object.values(processed);\n  }\n\n  processSubmissionTimeline(timeline) {\n    const processed = {};\n    timeline.forEach(row => {\n      if (!processed[row.date]) {\n        processed[row.date] = { date: row.date, confirmed: 0, pending: 0, total: 0 };\n      }\n      processed[row.date][row.status] = row.submissions;\n      processed[row.date].total += row.submissions;\n    });\n    return Object.values(processed);\n  }\n\n  groupByStatus(distribution) {\n    const statusGroups = {};\n    distribution.forEach(row => {\n      if (!statusGroups[row.status]) {\n        statusGroups[row.status] = [];\n      }\n      statusGroups[row.status].push({\n        category: row.category,\n        count: row.count,\n        averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0\n      });\n    });\n    return statusGroups;\n  }\n\n  calculateAveragePerDay(timeline) {\n    if (!timeline.length) {\n      return 0;\n    }\n    const totalDays = new Set(timeline.map(row => row.date)).size;\n    const totalRegistrations = timeline.reduce((sum, row) => sum + row.registrations, 0);\n    return parseFloat((totalRegistrations / totalDays).toFixed(2));\n  }\n\n  findPeakRegistrationDay(timeline) {\n    if (!timeline.length) {\n      return null;\n    }\n    return timeline.reduce((peak, current) =>\n      current.registrations > peak.registrations ? current : peak\n    );\n  }\n\n  calculateAverageDuration(distribution) {\n    let totalDuration = 0;\n    let totalCount = 0;\n\n    distribution.forEach(row => {\n      if (row.avg_duration) {\n        totalDuration += row.avg_duration * row.count;\n        totalCount += row.count;\n      }\n    });\n\n    return totalCount > 0 ? parseFloat((totalDuration / totalCount).toFixed(1)) : 0;\n  }\n\n  analyzeDurationDistribution(distribution) {\n    const durations = {};\n    distribution.forEach(row => {\n      const duration = Math.round(row.avg_duration / 5) * 5; // 5分単位で丸める\n      durations[`${duration}min`] = (durations[`${duration}min`] || 0) + row.count;\n    });\n    return durations;\n  }\n\n  calculateCumulative(dailyData) {\n    let cumulative = 0;\n    return dailyData.map(day => ({\n      date: day.date,\n      value: (cumulative += day.value || day.registrations || day.submissions || 0)\n    }));\n  }\n\n  calculatePredictions(registrations, submissions) {\n    // 簡易線形回帰による予測\n    return {\n      registrations: this.linearRegression(registrations),\n      submissions: this.linearRegression(submissions)\n    };\n  }\n\n  linearRegression(data) {\n    if (data.length < 2) {\n      return { nextWeek: 0, confidence: 0 };\n    }\n\n    const n = data.length;\n    const x = data.map((_, i) => i);\n    const y = data.map(d => d.value || d.registrations || d.submissions || 0);\n\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n\n    const nextWeekPrediction = slope * (n + 7) + intercept;\n\n    return {\n      nextWeek: Math.max(0, Math.round(nextWeekPrediction)),\n      confidence: this.calculateConfidence(data, slope, intercept)\n    };\n  }\n\n  calculateConfidence(data, slope, intercept) {\n    // R²値の計算\n    const y = data.map(d => d.value || d.registrations || d.submissions || 0);\n    const yMean = y.reduce((a, b) => a + b, 0) / y.length;\n\n    let ssRes = 0;\n    let ssTot = 0;\n\n    y.forEach((yi, i) => {\n      const predicted = slope * i + intercept;\n      ssRes += Math.pow(yi - predicted, 2);\n      ssTot += Math.pow(yi - yMean, 2);\n    });\n\n    const rSquared = 1 - ssRes / ssTot;\n    return Math.max(0, Math.min(1, rSquared));\n  }\n\n  generateTrendInsights(registrations, submissions, participationTypes) {\n    const insights = [];\n\n    // 登録トレンド分析\n    if (registrations.length > 1) {\n      const recent = registrations.slice(-7);\n      const earlier = registrations.slice(-14, -7);\n      const recentAvg = recent.reduce((sum, d) => sum + d.registrations, 0) / recent.length;\n      const earlierAvg = earlier.reduce((sum, d) => sum + d.registrations, 0) / earlier.length;\n\n      if (recentAvg > earlierAvg * 1.2) {\n        insights.push({\n          type: 'positive',\n          message: '登録数が増加傾向にあります',\n          metric: 'registrations',\n          change: (((recentAvg - earlierAvg) / earlierAvg) * 100).toFixed(1)\n        });\n      } else if (recentAvg < earlierAvg * 0.8) {\n        insights.push({\n          type: 'warning',\n          message: '登録数が減少傾向にあります',\n          metric: 'registrations',\n          change: (((recentAvg - earlierAvg) / earlierAvg) * 100).toFixed(1)\n        });\n      }\n    }\n\n    return insights;\n  }\n\n  analyzeEventComparisons(comparisons) {\n    const metrics = ['participants', 'talks', 'onlineRatio', 'avgTalkDuration'];\n    const analysis = {};\n\n    metrics.forEach(metric => {\n      const values = comparisons.map(c => c.metrics[metric]);\n      analysis[metric] = {\n        min: Math.min(...values),\n        max: Math.max(...values),\n        average: values.reduce((a, b) => a + b, 0) / values.length,\n        standardDeviation: this.calculateStandardDeviation(values)\n      };\n    });\n\n    return analysis;\n  }\n\n  calculateStandardDeviation(values) {\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const squareDiffs = values.map(value => Math.pow(value - mean, 2));\n    const avgSquareDiff = squareDiffs.reduce((a, b) => a + b, 0) / values.length;\n    return Math.sqrt(avgSquareDiff);\n  }\n\n  generateComparisonInsights(comparisons, analysis) {\n    const insights = [];\n\n    // 参加者数の分析\n    const participantValues = comparisons.map(c => c.metrics.participants);\n    const maxParticipants = Math.max(...participantValues);\n    const bestEvent = comparisons.find(c => c.metrics.participants === maxParticipants);\n\n    insights.push({\n      type: 'highlight',\n      message: `最も参加者が多かったのは「${bestEvent.title}」で${maxParticipants}名でした`,\n      category: 'participation'\n    });\n\n    return insights;\n  }\n\n  generateSummaryReport(stats) {\n    return {\n      type: 'summary',\n      title: `${stats.statistics.basic.eventInfo.title} - サマリーレポート`,\n      generatedAt: new Date().toISOString(),\n      keyMetrics: {\n        participants: stats.statistics.basic.summary.totalParticipants,\n        talks: stats.statistics.basic.summary.totalTalks,\n        onlineRatio:\n          stats.statistics.participants.distribution.byType.find(t => t.type === 'online')\n            ?.percentage || 0\n      },\n      highlights: [\n        `総参加者数: ${stats.statistics.basic.summary.totalParticipants}名`,\n        `総発表数: ${stats.statistics.basic.summary.totalTalks}件`,\n        `オンライン参加率: ${\n          stats.statistics.participants.distribution.byType.find(t => t.type === 'online')\n            ?.percentage || 0\n        }%`\n      ]\n    };\n  }\n\n  async getDailyRegistrations(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getDailySubmissions(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getParticipationTypeTrends(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getFeedbackSummary(eventId) {\n    // 実装は簡略化\n    return {};\n  }\n\n  generateParticipantsCsv(participants) {\n    // CSV生成の実装\n    return 'CSV data';\n  }\n\n  generateTalksCsv(talks) {\n    // CSV生成の実装\n    return 'CSV data';\n  }\n\n  generateDetailedReport(stats) {\n    // 詳細レポート生成\n    return {};\n  }\n\n  generateExecutiveReport(stats) {\n    // エグゼクティブレポート生成\n    return {};\n  }\n\n  generateParticipantReport(stats) {\n    // 参加者レポート生成\n    return {};\n  }\n\n  generateSpeakerReport(stats) {\n    // 発表者レポート生成\n    return {};\n  }\n}\n\nmodule.exports = new AnalyticsService();\n"],"mappings":"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","ignoreList":[]}