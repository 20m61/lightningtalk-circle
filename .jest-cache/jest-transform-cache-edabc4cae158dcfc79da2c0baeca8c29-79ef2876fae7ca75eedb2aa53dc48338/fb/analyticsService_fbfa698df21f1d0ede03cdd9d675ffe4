e13c433b7de584c1c08188c9ee66584a
/**
 * Analytics Service
 * イベント分析とレポート機能を提供するサービス
 */

const logger = require('../middleware/logger');
const {
  DatabaseService
} = require('./database');
class AnalyticsService {
  constructor() {
    this.db = DatabaseService.getInstance();
  }

  /**
   * イベント統計の取得
   */
  async getEventStatistics(eventId, options = {}) {
    try {
      const {
        startDate,
        endDate,
        includeDetails = false,
        includeTrends = false
      } = options;

      // 基本統計
      const basicStats = await this.getBasicEventStats(eventId);

      // 参加者統計
      const participantStats = await this.getParticipantStats(eventId, {
        startDate,
        endDate
      });

      // 発表統計
      const talkStats = await this.getTalkStats(eventId);

      // 時系列データ（トレンド分析）
      let trends = null;
      if (includeTrends) {
        trends = await this.getEventTrends(eventId, {
          startDate,
          endDate
        });
      }

      // 詳細データ
      let details = null;
      if (includeDetails) {
        details = await this.getEventDetails(eventId);
      }
      return {
        eventId,
        generatedAt: new Date().toISOString(),
        period: {
          startDate: startDate || null,
          endDate: endDate || null
        },
        statistics: {
          basic: basicStats,
          participants: participantStats,
          talks: talkStats
        },
        trends,
        details
      };
    } catch (error) {
      logger.error('Failed to get event statistics:', error);
      throw new Error('Failed to generate event statistics');
    }
  }

  /**
   * 基本イベント統計
   */
  async getBasicEventStats(eventId) {
    const stats = await this.db.query(`
      SELECT 
        e.id,
        e.title,
        e.date,
        e.venue,
        e.status,
        COUNT(DISTINCT p.id) as total_participants,
        COUNT(DISTINCT t.id) as total_talks,
        COUNT(DISTINCT CASE WHEN p.participation_type = 'online' THEN p.id END) as online_participants,
        COUNT(DISTINCT CASE WHEN p.participation_type = 'offline' THEN p.id END) as offline_participants,
        COUNT(DISTINCT CASE WHEN t.status = 'confirmed' THEN t.id END) as confirmed_talks,
        COUNT(DISTINCT CASE WHEN t.status = 'pending' THEN t.id END) as pending_talks,
        AVG(CASE WHEN t.duration IS NOT NULL THEN t.duration END) as avg_talk_duration,
        MAX(p.created_at) as last_registration,
        MIN(p.created_at) as first_registration
      FROM events e
      LEFT JOIN participants p ON e.id = p.event_id
      LEFT JOIN talks t ON e.id = t.event_id
      WHERE e.id = ?
      GROUP BY e.id
    `, [eventId]);
    if (!stats || stats.length === 0) {
      throw new Error('Event not found');
    }
    const event = stats[0];
    return {
      eventInfo: {
        id: event.id,
        title: event.title,
        date: event.date,
        venue: event.venue,
        status: event.status
      },
      summary: {
        totalParticipants: event.total_participants || 0,
        totalTalks: event.total_talks || 0,
        onlineParticipants: event.online_participants || 0,
        offlineParticipants: event.offline_participants || 0,
        confirmedTalks: event.confirmed_talks || 0,
        pendingTalks: event.pending_talks || 0,
        averageTalkDuration: parseFloat(event.avg_talk_duration) || 0,
        registrationPeriod: {
          first: event.first_registration,
          last: event.last_registration
        }
      }
    };
  }

  /**
   * 参加者統計
   */
  async getParticipantStats(eventId, options = {}) {
    const {
      startDate,
      endDate
    } = options;
    let dateFilter = '';
    const params = [eventId];
    if (startDate && endDate) {
      dateFilter = 'AND p.created_at BETWEEN ? AND ?';
      params.push(startDate, endDate);
    }

    // 参加者の基本分布
    const participantDistribution = await this.db.query(`
      SELECT 
        participation_type,
        COUNT(*) as count,
        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM participants WHERE event_id = ?) as percentage
      FROM participants p
      WHERE event_id = ? ${dateFilter}
      GROUP BY participation_type
    `, params);

    // 時間別登録数
    const registrationTimeline = await this.db.query(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as registrations,
        participation_type
      FROM participants p
      WHERE event_id = ? ${dateFilter}
      GROUP BY DATE(created_at), participation_type
      ORDER BY date
    `, params);

    // 地域別分布（optional field）
    const geographicDistribution = await this.db.query(`
      SELECT 
        COALESCE(location, 'Unknown') as location,
        COUNT(*) as count
      FROM participants p
      WHERE event_id = ? ${dateFilter}
      GROUP BY location
      ORDER BY count DESC
    `, params);

    // 参加者の属性分析
    const attributeAnalysis = await this.db.query(`
      SELECT 
        COALESCE(organization, 'Individual') as organization_type,
        COUNT(*) as count,
        AVG(CASE WHEN experience_level IS NOT NULL THEN 
          CASE experience_level 
            WHEN 'beginner' THEN 1 
            WHEN 'intermediate' THEN 2 
            WHEN 'advanced' THEN 3 
            ELSE 2 
          END 
        END) as avg_experience_level
      FROM participants p
      WHERE event_id = ? ${dateFilter}
      GROUP BY organization_type
      ORDER BY count DESC
    `, params);
    return {
      distribution: {
        byType: participantDistribution.map(row => ({
          type: row.participation_type,
          count: row.count,
          percentage: parseFloat(row.percentage.toFixed(2))
        })),
        byLocation: geographicDistribution.map(row => ({
          location: row.location,
          count: row.count
        })),
        byOrganization: attributeAnalysis.map(row => ({
          organizationType: row.organization_type,
          count: row.count,
          averageExperienceLevel: parseFloat(row.avg_experience_level?.toFixed(2)) || 0
        }))
      },
      timeline: this.processRegistrationTimeline(registrationTimeline),
      summary: {
        totalRegistrations: participantDistribution.reduce((sum, row) => sum + row.count, 0),
        averagePerDay: this.calculateAveragePerDay(registrationTimeline),
        peakRegistrationDay: this.findPeakRegistrationDay(registrationTimeline)
      }
    };
  }

  /**
   * 発表統計
   */
  async getTalkStats(eventId) {
    // 発表の基本統計
    const talkDistribution = await this.db.query(`
      SELECT 
        category,
        status,
        COUNT(*) as count,
        AVG(duration) as avg_duration,
        MIN(duration) as min_duration,
        MAX(duration) as max_duration
      FROM talks
      WHERE event_id = ?
      GROUP BY category, status
      ORDER BY category, status
    `, [eventId]);

    // 発表者の属性
    const speakerAnalysis = await this.db.query(`
      SELECT 
        COUNT(DISTINCT speaker_name) as unique_speakers,
        COUNT(*) as total_talks,
        COUNT(*) * 1.0 / COUNT(DISTINCT speaker_name) as talks_per_speaker,
        COUNT(CASE WHEN experience_level = 'first_time' THEN 1 END) as first_time_speakers,
        COUNT(CASE WHEN experience_level = 'experienced' THEN 1 END) as experienced_speakers
      FROM talks
      WHERE event_id = ?
    `, [eventId]);

    // 申込み時系列
    const submissionTimeline = await this.db.query(`
      SELECT 
        DATE(created_at) as date,
        COUNT(*) as submissions,
        status
      FROM talks
      WHERE event_id = ?
      GROUP BY DATE(created_at), status
      ORDER BY date
    `, [eventId]);

    // カテゴリ別人気度
    const categoryPopularity = await this.db.query(`
      SELECT 
        category,
        COUNT(*) as count,
        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM talks WHERE event_id = ?) as percentage,
        AVG(duration) as avg_duration
      FROM talks
      WHERE event_id = ?
      GROUP BY category
      ORDER BY count DESC
    `, [eventId, eventId]);
    const speakerStats = speakerAnalysis[0];
    return {
      distribution: {
        byCategory: categoryPopularity.map(row => ({
          category: row.category,
          count: row.count,
          percentage: parseFloat(row.percentage.toFixed(2)),
          averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0
        })),
        byStatus: this.groupByStatus(talkDistribution)
      },
      speakers: {
        uniqueSpeakers: speakerStats.unique_speakers || 0,
        totalTalks: speakerStats.total_talks || 0,
        talksPerSpeaker: parseFloat(speakerStats.talks_per_speaker?.toFixed(2)) || 0,
        firstTimeSpeakers: speakerStats.first_time_speakers || 0,
        experiencedSpeakers: speakerStats.experienced_speakers || 0
      },
      timeline: this.processSubmissionTimeline(submissionTimeline),
      duration: {
        average: this.calculateAverageDuration(talkDistribution),
        distribution: this.analyzeDurationDistribution(talkDistribution)
      }
    };
  }

  /**
   * イベントトレンド分析
   */
  async getEventTrends(eventId, options = {}) {
    const {
      startDate,
      endDate
    } = options;

    // 日別登録数推移
    const dailyRegistrations = await this.getDailyRegistrations(eventId, {
      startDate,
      endDate
    });

    // 日別発表申込み推移
    const dailySubmissions = await this.getDailySubmissions(eventId, {
      startDate,
      endDate
    });

    // 参加タイプの推移
    const participationTypeTrends = await this.getParticipationTypeTrends(eventId, {
      startDate,
      endDate
    });

    // 予測データ（回帰分析）
    const predictions = this.calculatePredictions(dailyRegistrations, dailySubmissions);
    return {
      registrations: {
        daily: dailyRegistrations,
        cumulative: this.calculateCumulative(dailyRegistrations),
        predictions: predictions.registrations
      },
      submissions: {
        daily: dailySubmissions,
        cumulative: this.calculateCumulative(dailySubmissions),
        predictions: predictions.submissions
      },
      participationTypes: participationTypeTrends,
      insights: this.generateTrendInsights(dailyRegistrations, dailySubmissions, participationTypeTrends)
    };
  }

  /**
   * イベント詳細データ
   */
  async getEventDetails(eventId) {
    // 参加者詳細リスト
    const participantsList = await this.db.query(`
      SELECT 
        id,
        name,
        email,
        participation_type,
        organization,
        location,
        experience_level,
        created_at
      FROM participants
      WHERE event_id = ?
      ORDER BY created_at DESC
    `, [eventId]);

    // 発表詳細リスト
    const talksList = await this.db.query(`
      SELECT 
        id,
        title,
        speaker_name,
        speaker_email,
        category,
        duration,
        description,
        status,
        experience_level,
        created_at
      FROM talks
      WHERE event_id = ?
      ORDER BY created_at DESC
    `, [eventId]);

    // フィードバック集計
    const feedbackSummary = await this.getFeedbackSummary(eventId);
    return {
      participants: participantsList,
      talks: talksList,
      feedback: feedbackSummary,
      export: {
        participantsCsv: this.generateParticipantsCsv(participantsList),
        talksCsv: this.generateTalksCsv(talksList)
      }
    };
  }

  /**
   * 複数イベント比較分析
   */
  async compareEvents(eventIds, options = {}) {
    const comparisons = [];
    for (const eventId of eventIds) {
      const stats = await this.getEventStatistics(eventId, options);
      comparisons.push({
        eventId,
        title: stats.statistics.basic.eventInfo.title,
        date: stats.statistics.basic.eventInfo.date,
        metrics: {
          participants: stats.statistics.basic.summary.totalParticipants,
          talks: stats.statistics.basic.summary.totalTalks,
          onlineRatio: stats.statistics.participants.distribution.byType.find(t => t.type === 'online')?.percentage || 0,
          avgTalkDuration: stats.statistics.basic.summary.averageTalkDuration
        }
      });
    }

    // 比較分析
    const analysis = this.analyzeEventComparisons(comparisons);
    return {
      events: comparisons,
      analysis,
      insights: this.generateComparisonInsights(comparisons, analysis)
    };
  }

  /**
   * レポート生成
   */
  async generateReport(eventId, reportType, options = {}) {
    try {
      const stats = await this.getEventStatistics(eventId, {
        includeDetails: true,
        includeTrends: true,
        ...options
      });
      switch (reportType) {
        case 'summary':
          return this.generateSummaryReport(stats);
        case 'detailed':
          return this.generateDetailedReport(stats);
        case 'executive':
          return this.generateExecutiveReport(stats);
        case 'participant':
          return this.generateParticipantReport(stats);
        case 'speaker':
          return this.generateSpeakerReport(stats);
        default:
          throw new Error('Invalid report type');
      }
    } catch (error) {
      logger.error('Failed to generate report:', error);
      throw new Error('Failed to generate report');
    }
  }

  // ヘルパーメソッド

  processRegistrationTimeline(timeline) {
    const processed = {};
    timeline.forEach(row => {
      if (!processed[row.date]) {
        processed[row.date] = {
          date: row.date,
          online: 0,
          offline: 0,
          total: 0
        };
      }
      processed[row.date][row.participation_type] = row.registrations;
      processed[row.date].total += row.registrations;
    });
    return Object.values(processed);
  }
  processSubmissionTimeline(timeline) {
    const processed = {};
    timeline.forEach(row => {
      if (!processed[row.date]) {
        processed[row.date] = {
          date: row.date,
          confirmed: 0,
          pending: 0,
          total: 0
        };
      }
      processed[row.date][row.status] = row.submissions;
      processed[row.date].total += row.submissions;
    });
    return Object.values(processed);
  }
  groupByStatus(distribution) {
    const statusGroups = {};
    distribution.forEach(row => {
      if (!statusGroups[row.status]) {
        statusGroups[row.status] = [];
      }
      statusGroups[row.status].push({
        category: row.category,
        count: row.count,
        averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0
      });
    });
    return statusGroups;
  }
  calculateAveragePerDay(timeline) {
    if (!timeline.length) {
      return 0;
    }
    const totalDays = new Set(timeline.map(row => row.date)).size;
    const totalRegistrations = timeline.reduce((sum, row) => sum + row.registrations, 0);
    return parseFloat((totalRegistrations / totalDays).toFixed(2));
  }
  findPeakRegistrationDay(timeline) {
    if (!timeline.length) {
      return null;
    }
    return timeline.reduce((peak, current) => current.registrations > peak.registrations ? current : peak);
  }
  calculateAverageDuration(distribution) {
    let totalDuration = 0;
    let totalCount = 0;
    distribution.forEach(row => {
      if (row.avg_duration) {
        totalDuration += row.avg_duration * row.count;
        totalCount += row.count;
      }
    });
    return totalCount > 0 ? parseFloat((totalDuration / totalCount).toFixed(1)) : 0;
  }
  analyzeDurationDistribution(distribution) {
    const durations = {};
    distribution.forEach(row => {
      const duration = Math.round(row.avg_duration / 5) * 5; // 5分単位で丸める
      durations[`${duration}min`] = (durations[`${duration}min`] || 0) + row.count;
    });
    return durations;
  }
  calculateCumulative(dailyData) {
    let cumulative = 0;
    return dailyData.map(day => ({
      date: day.date,
      value: cumulative += day.value || day.registrations || day.submissions || 0
    }));
  }
  calculatePredictions(registrations, submissions) {
    // 簡易線形回帰による予測
    return {
      registrations: this.linearRegression(registrations),
      submissions: this.linearRegression(submissions)
    };
  }
  linearRegression(data) {
    if (data.length < 2) {
      return {
        nextWeek: 0,
        confidence: 0
      };
    }
    const n = data.length;
    const x = data.map((_, i) => i);
    const y = data.map(d => d.value || d.registrations || d.submissions || 0);
    const sumX = x.reduce((a, b) => a + b, 0);
    const sumY = y.reduce((a, b) => a + b, 0);
    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);
    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;
    const nextWeekPrediction = slope * (n + 7) + intercept;
    return {
      nextWeek: Math.max(0, Math.round(nextWeekPrediction)),
      confidence: this.calculateConfidence(data, slope, intercept)
    };
  }
  calculateConfidence(data, slope, intercept) {
    // R²値の計算
    const y = data.map(d => d.value || d.registrations || d.submissions || 0);
    const yMean = y.reduce((a, b) => a + b, 0) / y.length;
    let ssRes = 0;
    let ssTot = 0;
    y.forEach((yi, i) => {
      const predicted = slope * i + intercept;
      ssRes += Math.pow(yi - predicted, 2);
      ssTot += Math.pow(yi - yMean, 2);
    });
    const rSquared = 1 - ssRes / ssTot;
    return Math.max(0, Math.min(1, rSquared));
  }
  generateTrendInsights(registrations, submissions, participationTypes) {
    const insights = [];

    // 登録トレンド分析
    if (registrations.length > 1) {
      const recent = registrations.slice(-7);
      const earlier = registrations.slice(-14, -7);
      const recentAvg = recent.reduce((sum, d) => sum + d.registrations, 0) / recent.length;
      const earlierAvg = earlier.reduce((sum, d) => sum + d.registrations, 0) / earlier.length;
      if (recentAvg > earlierAvg * 1.2) {
        insights.push({
          type: 'positive',
          message: '登録数が増加傾向にあります',
          metric: 'registrations',
          change: ((recentAvg - earlierAvg) / earlierAvg * 100).toFixed(1)
        });
      } else if (recentAvg < earlierAvg * 0.8) {
        insights.push({
          type: 'warning',
          message: '登録数が減少傾向にあります',
          metric: 'registrations',
          change: ((recentAvg - earlierAvg) / earlierAvg * 100).toFixed(1)
        });
      }
    }
    return insights;
  }
  analyzeEventComparisons(comparisons) {
    const metrics = ['participants', 'talks', 'onlineRatio', 'avgTalkDuration'];
    const analysis = {};
    metrics.forEach(metric => {
      const values = comparisons.map(c => c.metrics[metric]);
      analysis[metric] = {
        min: Math.min(...values),
        max: Math.max(...values),
        average: values.reduce((a, b) => a + b, 0) / values.length,
        standardDeviation: this.calculateStandardDeviation(values)
      };
    });
    return analysis;
  }
  calculateStandardDeviation(values) {
    const mean = values.reduce((a, b) => a + b, 0) / values.length;
    const squareDiffs = values.map(value => Math.pow(value - mean, 2));
    const avgSquareDiff = squareDiffs.reduce((a, b) => a + b, 0) / values.length;
    return Math.sqrt(avgSquareDiff);
  }
  generateComparisonInsights(comparisons, analysis) {
    const insights = [];

    // 参加者数の分析
    const participantValues = comparisons.map(c => c.metrics.participants);
    const maxParticipants = Math.max(...participantValues);
    const bestEvent = comparisons.find(c => c.metrics.participants === maxParticipants);
    insights.push({
      type: 'highlight',
      message: `最も参加者が多かったのは「${bestEvent.title}」で${maxParticipants}名でした`,
      category: 'participation'
    });
    return insights;
  }
  generateSummaryReport(stats) {
    return {
      type: 'summary',
      title: `${stats.statistics.basic.eventInfo.title} - サマリーレポート`,
      generatedAt: new Date().toISOString(),
      keyMetrics: {
        participants: stats.statistics.basic.summary.totalParticipants,
        talks: stats.statistics.basic.summary.totalTalks,
        onlineRatio: stats.statistics.participants.distribution.byType.find(t => t.type === 'online')?.percentage || 0
      },
      highlights: [`総参加者数: ${stats.statistics.basic.summary.totalParticipants}名`, `総発表数: ${stats.statistics.basic.summary.totalTalks}件`, `オンライン参加率: ${stats.statistics.participants.distribution.byType.find(t => t.type === 'online')?.percentage || 0}%`]
    };
  }
  async getDailyRegistrations(eventId, options) {
    // 実装は簡略化
    return [];
  }
  async getDailySubmissions(eventId, options) {
    // 実装は簡略化
    return [];
  }
  async getParticipationTypeTrends(eventId, options) {
    // 実装は簡略化
    return [];
  }
  async getFeedbackSummary(eventId) {
    // 実装は簡略化
    return {};
  }
  generateParticipantsCsv(participants) {
    // CSV生成の実装
    return 'CSV data';
  }
  generateTalksCsv(talks) {
    // CSV生成の実装
    return 'CSV data';
  }
  generateDetailedReport(stats) {
    // 詳細レポート生成
    return {};
  }
  generateExecutiveReport(stats) {
    // エグゼクティブレポート生成
    return {};
  }
  generateParticipantReport(stats) {
    // 参加者レポート生成
    return {};
  }
  generateSpeakerReport(stats) {
    // 発表者レポート生成
    return {};
  }
}
module.exports = new AnalyticsService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnZXIiLCJyZXF1aXJlIiwiRGF0YWJhc2VTZXJ2aWNlIiwiQW5hbHl0aWNzU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZGIiLCJnZXRJbnN0YW5jZSIsImdldEV2ZW50U3RhdGlzdGljcyIsImV2ZW50SWQiLCJvcHRpb25zIiwic3RhcnREYXRlIiwiZW5kRGF0ZSIsImluY2x1ZGVEZXRhaWxzIiwiaW5jbHVkZVRyZW5kcyIsImJhc2ljU3RhdHMiLCJnZXRCYXNpY0V2ZW50U3RhdHMiLCJwYXJ0aWNpcGFudFN0YXRzIiwiZ2V0UGFydGljaXBhbnRTdGF0cyIsInRhbGtTdGF0cyIsImdldFRhbGtTdGF0cyIsInRyZW5kcyIsImdldEV2ZW50VHJlbmRzIiwiZGV0YWlscyIsImdldEV2ZW50RGV0YWlscyIsImdlbmVyYXRlZEF0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicGVyaW9kIiwic3RhdGlzdGljcyIsImJhc2ljIiwicGFydGljaXBhbnRzIiwidGFsa3MiLCJlcnJvciIsIkVycm9yIiwic3RhdHMiLCJxdWVyeSIsImxlbmd0aCIsImV2ZW50IiwiZXZlbnRJbmZvIiwiaWQiLCJ0aXRsZSIsImRhdGUiLCJ2ZW51ZSIsInN0YXR1cyIsInN1bW1hcnkiLCJ0b3RhbFBhcnRpY2lwYW50cyIsInRvdGFsX3BhcnRpY2lwYW50cyIsInRvdGFsVGFsa3MiLCJ0b3RhbF90YWxrcyIsIm9ubGluZVBhcnRpY2lwYW50cyIsIm9ubGluZV9wYXJ0aWNpcGFudHMiLCJvZmZsaW5lUGFydGljaXBhbnRzIiwib2ZmbGluZV9wYXJ0aWNpcGFudHMiLCJjb25maXJtZWRUYWxrcyIsImNvbmZpcm1lZF90YWxrcyIsInBlbmRpbmdUYWxrcyIsInBlbmRpbmdfdGFsa3MiLCJhdmVyYWdlVGFsa0R1cmF0aW9uIiwicGFyc2VGbG9hdCIsImF2Z190YWxrX2R1cmF0aW9uIiwicmVnaXN0cmF0aW9uUGVyaW9kIiwiZmlyc3QiLCJmaXJzdF9yZWdpc3RyYXRpb24iLCJsYXN0IiwibGFzdF9yZWdpc3RyYXRpb24iLCJkYXRlRmlsdGVyIiwicGFyYW1zIiwicHVzaCIsInBhcnRpY2lwYW50RGlzdHJpYnV0aW9uIiwicmVnaXN0cmF0aW9uVGltZWxpbmUiLCJnZW9ncmFwaGljRGlzdHJpYnV0aW9uIiwiYXR0cmlidXRlQW5hbHlzaXMiLCJkaXN0cmlidXRpb24iLCJieVR5cGUiLCJtYXAiLCJyb3ciLCJ0eXBlIiwicGFydGljaXBhdGlvbl90eXBlIiwiY291bnQiLCJwZXJjZW50YWdlIiwidG9GaXhlZCIsImJ5TG9jYXRpb24iLCJsb2NhdGlvbiIsImJ5T3JnYW5pemF0aW9uIiwib3JnYW5pemF0aW9uVHlwZSIsIm9yZ2FuaXphdGlvbl90eXBlIiwiYXZlcmFnZUV4cGVyaWVuY2VMZXZlbCIsImF2Z19leHBlcmllbmNlX2xldmVsIiwidGltZWxpbmUiLCJwcm9jZXNzUmVnaXN0cmF0aW9uVGltZWxpbmUiLCJ0b3RhbFJlZ2lzdHJhdGlvbnMiLCJyZWR1Y2UiLCJzdW0iLCJhdmVyYWdlUGVyRGF5IiwiY2FsY3VsYXRlQXZlcmFnZVBlckRheSIsInBlYWtSZWdpc3RyYXRpb25EYXkiLCJmaW5kUGVha1JlZ2lzdHJhdGlvbkRheSIsInRhbGtEaXN0cmlidXRpb24iLCJzcGVha2VyQW5hbHlzaXMiLCJzdWJtaXNzaW9uVGltZWxpbmUiLCJjYXRlZ29yeVBvcHVsYXJpdHkiLCJzcGVha2VyU3RhdHMiLCJieUNhdGVnb3J5IiwiY2F0ZWdvcnkiLCJhdmVyYWdlRHVyYXRpb24iLCJhdmdfZHVyYXRpb24iLCJieVN0YXR1cyIsImdyb3VwQnlTdGF0dXMiLCJzcGVha2VycyIsInVuaXF1ZVNwZWFrZXJzIiwidW5pcXVlX3NwZWFrZXJzIiwidGFsa3NQZXJTcGVha2VyIiwidGFsa3NfcGVyX3NwZWFrZXIiLCJmaXJzdFRpbWVTcGVha2VycyIsImZpcnN0X3RpbWVfc3BlYWtlcnMiLCJleHBlcmllbmNlZFNwZWFrZXJzIiwiZXhwZXJpZW5jZWRfc3BlYWtlcnMiLCJwcm9jZXNzU3VibWlzc2lvblRpbWVsaW5lIiwiZHVyYXRpb24iLCJhdmVyYWdlIiwiY2FsY3VsYXRlQXZlcmFnZUR1cmF0aW9uIiwiYW5hbHl6ZUR1cmF0aW9uRGlzdHJpYnV0aW9uIiwiZGFpbHlSZWdpc3RyYXRpb25zIiwiZ2V0RGFpbHlSZWdpc3RyYXRpb25zIiwiZGFpbHlTdWJtaXNzaW9ucyIsImdldERhaWx5U3VibWlzc2lvbnMiLCJwYXJ0aWNpcGF0aW9uVHlwZVRyZW5kcyIsImdldFBhcnRpY2lwYXRpb25UeXBlVHJlbmRzIiwicHJlZGljdGlvbnMiLCJjYWxjdWxhdGVQcmVkaWN0aW9ucyIsInJlZ2lzdHJhdGlvbnMiLCJkYWlseSIsImN1bXVsYXRpdmUiLCJjYWxjdWxhdGVDdW11bGF0aXZlIiwic3VibWlzc2lvbnMiLCJwYXJ0aWNpcGF0aW9uVHlwZXMiLCJpbnNpZ2h0cyIsImdlbmVyYXRlVHJlbmRJbnNpZ2h0cyIsInBhcnRpY2lwYW50c0xpc3QiLCJ0YWxrc0xpc3QiLCJmZWVkYmFja1N1bW1hcnkiLCJnZXRGZWVkYmFja1N1bW1hcnkiLCJmZWVkYmFjayIsImV4cG9ydCIsInBhcnRpY2lwYW50c0NzdiIsImdlbmVyYXRlUGFydGljaXBhbnRzQ3N2IiwidGFsa3NDc3YiLCJnZW5lcmF0ZVRhbGtzQ3N2IiwiY29tcGFyZUV2ZW50cyIsImV2ZW50SWRzIiwiY29tcGFyaXNvbnMiLCJtZXRyaWNzIiwib25saW5lUmF0aW8iLCJmaW5kIiwidCIsImF2Z1RhbGtEdXJhdGlvbiIsImFuYWx5c2lzIiwiYW5hbHl6ZUV2ZW50Q29tcGFyaXNvbnMiLCJldmVudHMiLCJnZW5lcmF0ZUNvbXBhcmlzb25JbnNpZ2h0cyIsImdlbmVyYXRlUmVwb3J0IiwicmVwb3J0VHlwZSIsImdlbmVyYXRlU3VtbWFyeVJlcG9ydCIsImdlbmVyYXRlRGV0YWlsZWRSZXBvcnQiLCJnZW5lcmF0ZUV4ZWN1dGl2ZVJlcG9ydCIsImdlbmVyYXRlUGFydGljaXBhbnRSZXBvcnQiLCJnZW5lcmF0ZVNwZWFrZXJSZXBvcnQiLCJwcm9jZXNzZWQiLCJmb3JFYWNoIiwib25saW5lIiwib2ZmbGluZSIsInRvdGFsIiwiT2JqZWN0IiwidmFsdWVzIiwiY29uZmlybWVkIiwicGVuZGluZyIsInN0YXR1c0dyb3VwcyIsInRvdGFsRGF5cyIsIlNldCIsInNpemUiLCJwZWFrIiwiY3VycmVudCIsInRvdGFsRHVyYXRpb24iLCJ0b3RhbENvdW50IiwiZHVyYXRpb25zIiwiTWF0aCIsInJvdW5kIiwiZGFpbHlEYXRhIiwiZGF5IiwidmFsdWUiLCJsaW5lYXJSZWdyZXNzaW9uIiwiZGF0YSIsIm5leHRXZWVrIiwiY29uZmlkZW5jZSIsIm4iLCJ4IiwiXyIsImkiLCJ5IiwiZCIsInN1bVgiLCJhIiwiYiIsInN1bVkiLCJzdW1YWSIsInhpIiwic3VtWFgiLCJzbG9wZSIsImludGVyY2VwdCIsIm5leHRXZWVrUHJlZGljdGlvbiIsIm1heCIsImNhbGN1bGF0ZUNvbmZpZGVuY2UiLCJ5TWVhbiIsInNzUmVzIiwic3NUb3QiLCJ5aSIsInByZWRpY3RlZCIsInBvdyIsInJTcXVhcmVkIiwibWluIiwicmVjZW50Iiwic2xpY2UiLCJlYXJsaWVyIiwicmVjZW50QXZnIiwiZWFybGllckF2ZyIsIm1lc3NhZ2UiLCJtZXRyaWMiLCJjaGFuZ2UiLCJjIiwic3RhbmRhcmREZXZpYXRpb24iLCJjYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbiIsIm1lYW4iLCJzcXVhcmVEaWZmcyIsImF2Z1NxdWFyZURpZmYiLCJzcXJ0IiwicGFydGljaXBhbnRWYWx1ZXMiLCJtYXhQYXJ0aWNpcGFudHMiLCJiZXN0RXZlbnQiLCJrZXlNZXRyaWNzIiwiaGlnaGxpZ2h0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJhbmFseXRpY3NTZXJ2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW5hbHl0aWNzIFNlcnZpY2VcbiAqIOOCpOODmeODs+ODiOWIhuaekOOBqOODrOODneODvOODiOapn+iDveOCkuaPkOS+m+OBmeOCi+OCteODvOODk+OCuVxuICovXG5cbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmUvbG9nZ2VyJyk7XG5jb25zdCB7IERhdGFiYXNlU2VydmljZSB9ID0gcmVxdWlyZSgnLi9kYXRhYmFzZScpO1xuXG5jbGFzcyBBbmFseXRpY3NTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kYiA9IERhdGFiYXNlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOOCpOODmeODs+ODiOe1seioiOOBruWPluW+l1xuICAgKi9cbiAgYXN5bmMgZ2V0RXZlbnRTdGF0aXN0aWNzKGV2ZW50SWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgaW5jbHVkZURldGFpbHMgPSBmYWxzZSwgaW5jbHVkZVRyZW5kcyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gICAgICAvLyDln7rmnKzntbHoqIhcbiAgICAgIGNvbnN0IGJhc2ljU3RhdHMgPSBhd2FpdCB0aGlzLmdldEJhc2ljRXZlbnRTdGF0cyhldmVudElkKTtcblxuICAgICAgLy8g5Y+C5Yqg6ICF57Wx6KiIXG4gICAgICBjb25zdCBwYXJ0aWNpcGFudFN0YXRzID0gYXdhaXQgdGhpcy5nZXRQYXJ0aWNpcGFudFN0YXRzKGV2ZW50SWQsIHsgc3RhcnREYXRlLCBlbmREYXRlIH0pO1xuXG4gICAgICAvLyDnmbrooajntbHoqIhcbiAgICAgIGNvbnN0IHRhbGtTdGF0cyA9IGF3YWl0IHRoaXMuZ2V0VGFsa1N0YXRzKGV2ZW50SWQpO1xuXG4gICAgICAvLyDmmYLns7vliJfjg4fjg7zjgr/vvIjjg4jjg6zjg7Pjg4nliIbmnpDvvIlcbiAgICAgIGxldCB0cmVuZHMgPSBudWxsO1xuICAgICAgaWYgKGluY2x1ZGVUcmVuZHMpIHtcbiAgICAgICAgdHJlbmRzID0gYXdhaXQgdGhpcy5nZXRFdmVudFRyZW5kcyhldmVudElkLCB7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9KTtcbiAgICAgIH1cblxuICAgICAgLy8g6Kmz57Sw44OH44O844K/XG4gICAgICBsZXQgZGV0YWlscyA9IG51bGw7XG4gICAgICBpZiAoaW5jbHVkZURldGFpbHMpIHtcbiAgICAgICAgZGV0YWlscyA9IGF3YWl0IHRoaXMuZ2V0RXZlbnREZXRhaWxzKGV2ZW50SWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBldmVudElkLFxuICAgICAgICBnZW5lcmF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBwZXJpb2Q6IHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSB8fCBudWxsLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGUgfHwgbnVsbFxuICAgICAgICB9LFxuICAgICAgICBzdGF0aXN0aWNzOiB7XG4gICAgICAgICAgYmFzaWM6IGJhc2ljU3RhdHMsXG4gICAgICAgICAgcGFydGljaXBhbnRzOiBwYXJ0aWNpcGFudFN0YXRzLFxuICAgICAgICAgIHRhbGtzOiB0YWxrU3RhdHNcbiAgICAgICAgfSxcbiAgICAgICAgdHJlbmRzLFxuICAgICAgICBkZXRhaWxzXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBnZXQgZXZlbnQgc3RhdGlzdGljczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZW5lcmF0ZSBldmVudCBzdGF0aXN0aWNzJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOWfuuacrOOCpOODmeODs+ODiOe1seioiFxuICAgKi9cbiAgYXN5bmMgZ2V0QmFzaWNFdmVudFN0YXRzKGV2ZW50SWQpIHtcbiAgICBjb25zdCBzdGF0cyA9IGF3YWl0IHRoaXMuZGIucXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1QgXG4gICAgICAgIGUuaWQsXG4gICAgICAgIGUudGl0bGUsXG4gICAgICAgIGUuZGF0ZSxcbiAgICAgICAgZS52ZW51ZSxcbiAgICAgICAgZS5zdGF0dXMsXG4gICAgICAgIENPVU5UKERJU1RJTkNUIHAuaWQpIGFzIHRvdGFsX3BhcnRpY2lwYW50cyxcbiAgICAgICAgQ09VTlQoRElTVElOQ1QgdC5pZCkgYXMgdG90YWxfdGFsa3MsXG4gICAgICAgIENPVU5UKERJU1RJTkNUIENBU0UgV0hFTiBwLnBhcnRpY2lwYXRpb25fdHlwZSA9ICdvbmxpbmUnIFRIRU4gcC5pZCBFTkQpIGFzIG9ubGluZV9wYXJ0aWNpcGFudHMsXG4gICAgICAgIENPVU5UKERJU1RJTkNUIENBU0UgV0hFTiBwLnBhcnRpY2lwYXRpb25fdHlwZSA9ICdvZmZsaW5lJyBUSEVOIHAuaWQgRU5EKSBhcyBvZmZsaW5lX3BhcnRpY2lwYW50cyxcbiAgICAgICAgQ09VTlQoRElTVElOQ1QgQ0FTRSBXSEVOIHQuc3RhdHVzID0gJ2NvbmZpcm1lZCcgVEhFTiB0LmlkIEVORCkgYXMgY29uZmlybWVkX3RhbGtzLFxuICAgICAgICBDT1VOVChESVNUSU5DVCBDQVNFIFdIRU4gdC5zdGF0dXMgPSAncGVuZGluZycgVEhFTiB0LmlkIEVORCkgYXMgcGVuZGluZ190YWxrcyxcbiAgICAgICAgQVZHKENBU0UgV0hFTiB0LmR1cmF0aW9uIElTIE5PVCBOVUxMIFRIRU4gdC5kdXJhdGlvbiBFTkQpIGFzIGF2Z190YWxrX2R1cmF0aW9uLFxuICAgICAgICBNQVgocC5jcmVhdGVkX2F0KSBhcyBsYXN0X3JlZ2lzdHJhdGlvbixcbiAgICAgICAgTUlOKHAuY3JlYXRlZF9hdCkgYXMgZmlyc3RfcmVnaXN0cmF0aW9uXG4gICAgICBGUk9NIGV2ZW50cyBlXG4gICAgICBMRUZUIEpPSU4gcGFydGljaXBhbnRzIHAgT04gZS5pZCA9IHAuZXZlbnRfaWRcbiAgICAgIExFRlQgSk9JTiB0YWxrcyB0IE9OIGUuaWQgPSB0LmV2ZW50X2lkXG4gICAgICBXSEVSRSBlLmlkID0gP1xuICAgICAgR1JPVVAgQlkgZS5pZFxuICAgIGAsXG4gICAgICBbZXZlbnRJZF1cbiAgICApO1xuXG4gICAgaWYgKCFzdGF0cyB8fCBzdGF0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgbm90IGZvdW5kJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZXZlbnQgPSBzdGF0c1swXTtcblxuICAgIHJldHVybiB7XG4gICAgICBldmVudEluZm86IHtcbiAgICAgICAgaWQ6IGV2ZW50LmlkLFxuICAgICAgICB0aXRsZTogZXZlbnQudGl0bGUsXG4gICAgICAgIGRhdGU6IGV2ZW50LmRhdGUsXG4gICAgICAgIHZlbnVlOiBldmVudC52ZW51ZSxcbiAgICAgICAgc3RhdHVzOiBldmVudC5zdGF0dXNcbiAgICAgIH0sXG4gICAgICBzdW1tYXJ5OiB7XG4gICAgICAgIHRvdGFsUGFydGljaXBhbnRzOiBldmVudC50b3RhbF9wYXJ0aWNpcGFudHMgfHwgMCxcbiAgICAgICAgdG90YWxUYWxrczogZXZlbnQudG90YWxfdGFsa3MgfHwgMCxcbiAgICAgICAgb25saW5lUGFydGljaXBhbnRzOiBldmVudC5vbmxpbmVfcGFydGljaXBhbnRzIHx8IDAsXG4gICAgICAgIG9mZmxpbmVQYXJ0aWNpcGFudHM6IGV2ZW50Lm9mZmxpbmVfcGFydGljaXBhbnRzIHx8IDAsXG4gICAgICAgIGNvbmZpcm1lZFRhbGtzOiBldmVudC5jb25maXJtZWRfdGFsa3MgfHwgMCxcbiAgICAgICAgcGVuZGluZ1RhbGtzOiBldmVudC5wZW5kaW5nX3RhbGtzIHx8IDAsXG4gICAgICAgIGF2ZXJhZ2VUYWxrRHVyYXRpb246IHBhcnNlRmxvYXQoZXZlbnQuYXZnX3RhbGtfZHVyYXRpb24pIHx8IDAsXG4gICAgICAgIHJlZ2lzdHJhdGlvblBlcmlvZDoge1xuICAgICAgICAgIGZpcnN0OiBldmVudC5maXJzdF9yZWdpc3RyYXRpb24sXG4gICAgICAgICAgbGFzdDogZXZlbnQubGFzdF9yZWdpc3RyYXRpb25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog5Y+C5Yqg6ICF57Wx6KiIXG4gICAqL1xuICBhc3luYyBnZXRQYXJ0aWNpcGFudFN0YXRzKGV2ZW50SWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc3RhcnREYXRlLCBlbmREYXRlIH0gPSBvcHRpb25zO1xuXG4gICAgbGV0IGRhdGVGaWx0ZXIgPSAnJztcbiAgICBjb25zdCBwYXJhbXMgPSBbZXZlbnRJZF07XG5cbiAgICBpZiAoc3RhcnREYXRlICYmIGVuZERhdGUpIHtcbiAgICAgIGRhdGVGaWx0ZXIgPSAnQU5EIHAuY3JlYXRlZF9hdCBCRVRXRUVOID8gQU5EID8nO1xuICAgICAgcGFyYW1zLnB1c2goc3RhcnREYXRlLCBlbmREYXRlKTtcbiAgICB9XG5cbiAgICAvLyDlj4LliqDogIXjga7ln7rmnKzliIbluINcbiAgICBjb25zdCBwYXJ0aWNpcGFudERpc3RyaWJ1dGlvbiA9IGF3YWl0IHRoaXMuZGIucXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1QgXG4gICAgICAgIHBhcnRpY2lwYXRpb25fdHlwZSxcbiAgICAgICAgQ09VTlQoKikgYXMgY291bnQsXG4gICAgICAgIENPVU5UKCopICogMTAwLjAgLyAoU0VMRUNUIENPVU5UKCopIEZST00gcGFydGljaXBhbnRzIFdIRVJFIGV2ZW50X2lkID0gPykgYXMgcGVyY2VudGFnZVxuICAgICAgRlJPTSBwYXJ0aWNpcGFudHMgcFxuICAgICAgV0hFUkUgZXZlbnRfaWQgPSA/ICR7ZGF0ZUZpbHRlcn1cbiAgICAgIEdST1VQIEJZIHBhcnRpY2lwYXRpb25fdHlwZVxuICAgIGAsXG4gICAgICBwYXJhbXNcbiAgICApO1xuXG4gICAgLy8g5pmC6ZaT5Yil55m76Yyy5pWwXG4gICAgY29uc3QgcmVnaXN0cmF0aW9uVGltZWxpbmUgPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KFxuICAgICAgYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBEQVRFKGNyZWF0ZWRfYXQpIGFzIGRhdGUsXG4gICAgICAgIENPVU5UKCopIGFzIHJlZ2lzdHJhdGlvbnMsXG4gICAgICAgIHBhcnRpY2lwYXRpb25fdHlwZVxuICAgICAgRlJPTSBwYXJ0aWNpcGFudHMgcFxuICAgICAgV0hFUkUgZXZlbnRfaWQgPSA/ICR7ZGF0ZUZpbHRlcn1cbiAgICAgIEdST1VQIEJZIERBVEUoY3JlYXRlZF9hdCksIHBhcnRpY2lwYXRpb25fdHlwZVxuICAgICAgT1JERVIgQlkgZGF0ZVxuICAgIGAsXG4gICAgICBwYXJhbXNcbiAgICApO1xuXG4gICAgLy8g5Zyw5Z+f5Yil5YiG5biD77yIb3B0aW9uYWwgZmllbGTvvIlcbiAgICBjb25zdCBnZW9ncmFwaGljRGlzdHJpYnV0aW9uID0gYXdhaXQgdGhpcy5kYi5xdWVyeShcbiAgICAgIGBcbiAgICAgIFNFTEVDVCBcbiAgICAgICAgQ09BTEVTQ0UobG9jYXRpb24sICdVbmtub3duJykgYXMgbG9jYXRpb24sXG4gICAgICAgIENPVU5UKCopIGFzIGNvdW50XG4gICAgICBGUk9NIHBhcnRpY2lwYW50cyBwXG4gICAgICBXSEVSRSBldmVudF9pZCA9ID8gJHtkYXRlRmlsdGVyfVxuICAgICAgR1JPVVAgQlkgbG9jYXRpb25cbiAgICAgIE9SREVSIEJZIGNvdW50IERFU0NcbiAgICBgLFxuICAgICAgcGFyYW1zXG4gICAgKTtcblxuICAgIC8vIOWPguWKoOiAheOBruWxnuaAp+WIhuaekFxuICAgIGNvbnN0IGF0dHJpYnV0ZUFuYWx5c2lzID0gYXdhaXQgdGhpcy5kYi5xdWVyeShcbiAgICAgIGBcbiAgICAgIFNFTEVDVCBcbiAgICAgICAgQ09BTEVTQ0Uob3JnYW5pemF0aW9uLCAnSW5kaXZpZHVhbCcpIGFzIG9yZ2FuaXphdGlvbl90eXBlLFxuICAgICAgICBDT1VOVCgqKSBhcyBjb3VudCxcbiAgICAgICAgQVZHKENBU0UgV0hFTiBleHBlcmllbmNlX2xldmVsIElTIE5PVCBOVUxMIFRIRU4gXG4gICAgICAgICAgQ0FTRSBleHBlcmllbmNlX2xldmVsIFxuICAgICAgICAgICAgV0hFTiAnYmVnaW5uZXInIFRIRU4gMSBcbiAgICAgICAgICAgIFdIRU4gJ2ludGVybWVkaWF0ZScgVEhFTiAyIFxuICAgICAgICAgICAgV0hFTiAnYWR2YW5jZWQnIFRIRU4gMyBcbiAgICAgICAgICAgIEVMU0UgMiBcbiAgICAgICAgICBFTkQgXG4gICAgICAgIEVORCkgYXMgYXZnX2V4cGVyaWVuY2VfbGV2ZWxcbiAgICAgIEZST00gcGFydGljaXBhbnRzIHBcbiAgICAgIFdIRVJFIGV2ZW50X2lkID0gPyAke2RhdGVGaWx0ZXJ9XG4gICAgICBHUk9VUCBCWSBvcmdhbml6YXRpb25fdHlwZVxuICAgICAgT1JERVIgQlkgY291bnQgREVTQ1xuICAgIGAsXG4gICAgICBwYXJhbXNcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3RyaWJ1dGlvbjoge1xuICAgICAgICBieVR5cGU6IHBhcnRpY2lwYW50RGlzdHJpYnV0aW9uLm1hcChyb3cgPT4gKHtcbiAgICAgICAgICB0eXBlOiByb3cucGFydGljaXBhdGlvbl90eXBlLFxuICAgICAgICAgIGNvdW50OiByb3cuY291bnQsXG4gICAgICAgICAgcGVyY2VudGFnZTogcGFyc2VGbG9hdChyb3cucGVyY2VudGFnZS50b0ZpeGVkKDIpKVxuICAgICAgICB9KSksXG4gICAgICAgIGJ5TG9jYXRpb246IGdlb2dyYXBoaWNEaXN0cmlidXRpb24ubWFwKHJvdyA9PiAoe1xuICAgICAgICAgIGxvY2F0aW9uOiByb3cubG9jYXRpb24sXG4gICAgICAgICAgY291bnQ6IHJvdy5jb3VudFxuICAgICAgICB9KSksXG4gICAgICAgIGJ5T3JnYW5pemF0aW9uOiBhdHRyaWJ1dGVBbmFseXNpcy5tYXAocm93ID0+ICh7XG4gICAgICAgICAgb3JnYW5pemF0aW9uVHlwZTogcm93Lm9yZ2FuaXphdGlvbl90eXBlLFxuICAgICAgICAgIGNvdW50OiByb3cuY291bnQsXG4gICAgICAgICAgYXZlcmFnZUV4cGVyaWVuY2VMZXZlbDogcGFyc2VGbG9hdChyb3cuYXZnX2V4cGVyaWVuY2VfbGV2ZWw/LnRvRml4ZWQoMikpIHx8IDBcbiAgICAgICAgfSkpXG4gICAgICB9LFxuICAgICAgdGltZWxpbmU6IHRoaXMucHJvY2Vzc1JlZ2lzdHJhdGlvblRpbWVsaW5lKHJlZ2lzdHJhdGlvblRpbWVsaW5lKSxcbiAgICAgIHN1bW1hcnk6IHtcbiAgICAgICAgdG90YWxSZWdpc3RyYXRpb25zOiBwYXJ0aWNpcGFudERpc3RyaWJ1dGlvbi5yZWR1Y2UoKHN1bSwgcm93KSA9PiBzdW0gKyByb3cuY291bnQsIDApLFxuICAgICAgICBhdmVyYWdlUGVyRGF5OiB0aGlzLmNhbGN1bGF0ZUF2ZXJhZ2VQZXJEYXkocmVnaXN0cmF0aW9uVGltZWxpbmUpLFxuICAgICAgICBwZWFrUmVnaXN0cmF0aW9uRGF5OiB0aGlzLmZpbmRQZWFrUmVnaXN0cmF0aW9uRGF5KHJlZ2lzdHJhdGlvblRpbWVsaW5lKVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog55m66KGo57Wx6KiIXG4gICAqL1xuICBhc3luYyBnZXRUYWxrU3RhdHMoZXZlbnRJZCkge1xuICAgIC8vIOeZuuihqOOBruWfuuacrOe1seioiFxuICAgIGNvbnN0IHRhbGtEaXN0cmlidXRpb24gPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KFxuICAgICAgYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBDT1VOVCgqKSBhcyBjb3VudCxcbiAgICAgICAgQVZHKGR1cmF0aW9uKSBhcyBhdmdfZHVyYXRpb24sXG4gICAgICAgIE1JTihkdXJhdGlvbikgYXMgbWluX2R1cmF0aW9uLFxuICAgICAgICBNQVgoZHVyYXRpb24pIGFzIG1heF9kdXJhdGlvblxuICAgICAgRlJPTSB0YWxrc1xuICAgICAgV0hFUkUgZXZlbnRfaWQgPSA/XG4gICAgICBHUk9VUCBCWSBjYXRlZ29yeSwgc3RhdHVzXG4gICAgICBPUkRFUiBCWSBjYXRlZ29yeSwgc3RhdHVzXG4gICAgYCxcbiAgICAgIFtldmVudElkXVxuICAgICk7XG5cbiAgICAvLyDnmbrooajogIXjga7lsZ7mgKdcbiAgICBjb25zdCBzcGVha2VyQW5hbHlzaXMgPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KFxuICAgICAgYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBDT1VOVChESVNUSU5DVCBzcGVha2VyX25hbWUpIGFzIHVuaXF1ZV9zcGVha2VycyxcbiAgICAgICAgQ09VTlQoKikgYXMgdG90YWxfdGFsa3MsXG4gICAgICAgIENPVU5UKCopICogMS4wIC8gQ09VTlQoRElTVElOQ1Qgc3BlYWtlcl9uYW1lKSBhcyB0YWxrc19wZXJfc3BlYWtlcixcbiAgICAgICAgQ09VTlQoQ0FTRSBXSEVOIGV4cGVyaWVuY2VfbGV2ZWwgPSAnZmlyc3RfdGltZScgVEhFTiAxIEVORCkgYXMgZmlyc3RfdGltZV9zcGVha2VycyxcbiAgICAgICAgQ09VTlQoQ0FTRSBXSEVOIGV4cGVyaWVuY2VfbGV2ZWwgPSAnZXhwZXJpZW5jZWQnIFRIRU4gMSBFTkQpIGFzIGV4cGVyaWVuY2VkX3NwZWFrZXJzXG4gICAgICBGUk9NIHRhbGtzXG4gICAgICBXSEVSRSBldmVudF9pZCA9ID9cbiAgICBgLFxuICAgICAgW2V2ZW50SWRdXG4gICAgKTtcblxuICAgIC8vIOeUs+i+vOOBv+aZguezu+WIl1xuICAgIGNvbnN0IHN1Ym1pc3Npb25UaW1lbGluZSA9IGF3YWl0IHRoaXMuZGIucXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1QgXG4gICAgICAgIERBVEUoY3JlYXRlZF9hdCkgYXMgZGF0ZSxcbiAgICAgICAgQ09VTlQoKikgYXMgc3VibWlzc2lvbnMsXG4gICAgICAgIHN0YXR1c1xuICAgICAgRlJPTSB0YWxrc1xuICAgICAgV0hFUkUgZXZlbnRfaWQgPSA/XG4gICAgICBHUk9VUCBCWSBEQVRFKGNyZWF0ZWRfYXQpLCBzdGF0dXNcbiAgICAgIE9SREVSIEJZIGRhdGVcbiAgICBgLFxuICAgICAgW2V2ZW50SWRdXG4gICAgKTtcblxuICAgIC8vIOOCq+ODhuOCtOODquWIpeS6uuawl+W6plxuICAgIGNvbnN0IGNhdGVnb3J5UG9wdWxhcml0eSA9IGF3YWl0IHRoaXMuZGIucXVlcnkoXG4gICAgICBgXG4gICAgICBTRUxFQ1QgXG4gICAgICAgIGNhdGVnb3J5LFxuICAgICAgICBDT1VOVCgqKSBhcyBjb3VudCxcbiAgICAgICAgQ09VTlQoKikgKiAxMDAuMCAvIChTRUxFQ1QgQ09VTlQoKikgRlJPTSB0YWxrcyBXSEVSRSBldmVudF9pZCA9ID8pIGFzIHBlcmNlbnRhZ2UsXG4gICAgICAgIEFWRyhkdXJhdGlvbikgYXMgYXZnX2R1cmF0aW9uXG4gICAgICBGUk9NIHRhbGtzXG4gICAgICBXSEVSRSBldmVudF9pZCA9ID9cbiAgICAgIEdST1VQIEJZIGNhdGVnb3J5XG4gICAgICBPUkRFUiBCWSBjb3VudCBERVNDXG4gICAgYCxcbiAgICAgIFtldmVudElkLCBldmVudElkXVxuICAgICk7XG5cbiAgICBjb25zdCBzcGVha2VyU3RhdHMgPSBzcGVha2VyQW5hbHlzaXNbMF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGlzdHJpYnV0aW9uOiB7XG4gICAgICAgIGJ5Q2F0ZWdvcnk6IGNhdGVnb3J5UG9wdWxhcml0eS5tYXAocm93ID0+ICh7XG4gICAgICAgICAgY2F0ZWdvcnk6IHJvdy5jYXRlZ29yeSxcbiAgICAgICAgICBjb3VudDogcm93LmNvdW50LFxuICAgICAgICAgIHBlcmNlbnRhZ2U6IHBhcnNlRmxvYXQocm93LnBlcmNlbnRhZ2UudG9GaXhlZCgyKSksXG4gICAgICAgICAgYXZlcmFnZUR1cmF0aW9uOiBwYXJzZUZsb2F0KHJvdy5hdmdfZHVyYXRpb24/LnRvRml4ZWQoMSkpIHx8IDBcbiAgICAgICAgfSkpLFxuICAgICAgICBieVN0YXR1czogdGhpcy5ncm91cEJ5U3RhdHVzKHRhbGtEaXN0cmlidXRpb24pXG4gICAgICB9LFxuICAgICAgc3BlYWtlcnM6IHtcbiAgICAgICAgdW5pcXVlU3BlYWtlcnM6IHNwZWFrZXJTdGF0cy51bmlxdWVfc3BlYWtlcnMgfHwgMCxcbiAgICAgICAgdG90YWxUYWxrczogc3BlYWtlclN0YXRzLnRvdGFsX3RhbGtzIHx8IDAsXG4gICAgICAgIHRhbGtzUGVyU3BlYWtlcjogcGFyc2VGbG9hdChzcGVha2VyU3RhdHMudGFsa3NfcGVyX3NwZWFrZXI/LnRvRml4ZWQoMikpIHx8IDAsXG4gICAgICAgIGZpcnN0VGltZVNwZWFrZXJzOiBzcGVha2VyU3RhdHMuZmlyc3RfdGltZV9zcGVha2VycyB8fCAwLFxuICAgICAgICBleHBlcmllbmNlZFNwZWFrZXJzOiBzcGVha2VyU3RhdHMuZXhwZXJpZW5jZWRfc3BlYWtlcnMgfHwgMFxuICAgICAgfSxcbiAgICAgIHRpbWVsaW5lOiB0aGlzLnByb2Nlc3NTdWJtaXNzaW9uVGltZWxpbmUoc3VibWlzc2lvblRpbWVsaW5lKSxcbiAgICAgIGR1cmF0aW9uOiB7XG4gICAgICAgIGF2ZXJhZ2U6IHRoaXMuY2FsY3VsYXRlQXZlcmFnZUR1cmF0aW9uKHRhbGtEaXN0cmlidXRpb24pLFxuICAgICAgICBkaXN0cmlidXRpb246IHRoaXMuYW5hbHl6ZUR1cmF0aW9uRGlzdHJpYnV0aW9uKHRhbGtEaXN0cmlidXRpb24pXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiDjgqTjg5njg7Pjg4jjg4jjg6zjg7Pjg4nliIbmnpBcbiAgICovXG4gIGFzeW5jIGdldEV2ZW50VHJlbmRzKGV2ZW50SWQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc3RhcnREYXRlLCBlbmREYXRlIH0gPSBvcHRpb25zO1xuXG4gICAgLy8g5pel5Yil55m76Yyy5pWw5o6o56e7XG4gICAgY29uc3QgZGFpbHlSZWdpc3RyYXRpb25zID0gYXdhaXQgdGhpcy5nZXREYWlseVJlZ2lzdHJhdGlvbnMoZXZlbnRJZCwgeyBzdGFydERhdGUsIGVuZERhdGUgfSk7XG5cbiAgICAvLyDml6XliKXnmbrooajnlLPovrzjgb/mjqjnp7tcbiAgICBjb25zdCBkYWlseVN1Ym1pc3Npb25zID0gYXdhaXQgdGhpcy5nZXREYWlseVN1Ym1pc3Npb25zKGV2ZW50SWQsIHsgc3RhcnREYXRlLCBlbmREYXRlIH0pO1xuXG4gICAgLy8g5Y+C5Yqg44K/44Kk44OX44Gu5o6o56e7XG4gICAgY29uc3QgcGFydGljaXBhdGlvblR5cGVUcmVuZHMgPSBhd2FpdCB0aGlzLmdldFBhcnRpY2lwYXRpb25UeXBlVHJlbmRzKGV2ZW50SWQsIHtcbiAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgIGVuZERhdGVcbiAgICB9KTtcblxuICAgIC8vIOS6iOa4rOODh+ODvOOCv++8iOWbnuW4sOWIhuaekO+8iVxuICAgIGNvbnN0IHByZWRpY3Rpb25zID0gdGhpcy5jYWxjdWxhdGVQcmVkaWN0aW9ucyhkYWlseVJlZ2lzdHJhdGlvbnMsIGRhaWx5U3VibWlzc2lvbnMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZ2lzdHJhdGlvbnM6IHtcbiAgICAgICAgZGFpbHk6IGRhaWx5UmVnaXN0cmF0aW9ucyxcbiAgICAgICAgY3VtdWxhdGl2ZTogdGhpcy5jYWxjdWxhdGVDdW11bGF0aXZlKGRhaWx5UmVnaXN0cmF0aW9ucyksXG4gICAgICAgIHByZWRpY3Rpb25zOiBwcmVkaWN0aW9ucy5yZWdpc3RyYXRpb25zXG4gICAgICB9LFxuICAgICAgc3VibWlzc2lvbnM6IHtcbiAgICAgICAgZGFpbHk6IGRhaWx5U3VibWlzc2lvbnMsXG4gICAgICAgIGN1bXVsYXRpdmU6IHRoaXMuY2FsY3VsYXRlQ3VtdWxhdGl2ZShkYWlseVN1Ym1pc3Npb25zKSxcbiAgICAgICAgcHJlZGljdGlvbnM6IHByZWRpY3Rpb25zLnN1Ym1pc3Npb25zXG4gICAgICB9LFxuICAgICAgcGFydGljaXBhdGlvblR5cGVzOiBwYXJ0aWNpcGF0aW9uVHlwZVRyZW5kcyxcbiAgICAgIGluc2lnaHRzOiB0aGlzLmdlbmVyYXRlVHJlbmRJbnNpZ2h0cyhcbiAgICAgICAgZGFpbHlSZWdpc3RyYXRpb25zLFxuICAgICAgICBkYWlseVN1Ym1pc3Npb25zLFxuICAgICAgICBwYXJ0aWNpcGF0aW9uVHlwZVRyZW5kc1xuICAgICAgKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44Kk44OZ44Oz44OI6Kmz57Sw44OH44O844K/XG4gICAqL1xuICBhc3luYyBnZXRFdmVudERldGFpbHMoZXZlbnRJZCkge1xuICAgIC8vIOWPguWKoOiAheips+e0sOODquOCueODiFxuICAgIGNvbnN0IHBhcnRpY2lwYW50c0xpc3QgPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KFxuICAgICAgYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHBhcnRpY2lwYXRpb25fdHlwZSxcbiAgICAgICAgb3JnYW5pemF0aW9uLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgZXhwZXJpZW5jZV9sZXZlbCxcbiAgICAgICAgY3JlYXRlZF9hdFxuICAgICAgRlJPTSBwYXJ0aWNpcGFudHNcbiAgICAgIFdIRVJFIGV2ZW50X2lkID0gP1xuICAgICAgT1JERVIgQlkgY3JlYXRlZF9hdCBERVNDXG4gICAgYCxcbiAgICAgIFtldmVudElkXVxuICAgICk7XG5cbiAgICAvLyDnmbrooajoqbPntLDjg6rjgrnjg4hcbiAgICBjb25zdCB0YWxrc0xpc3QgPSBhd2FpdCB0aGlzLmRiLnF1ZXJ5KFxuICAgICAgYFxuICAgICAgU0VMRUNUIFxuICAgICAgICBpZCxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHNwZWFrZXJfbmFtZSxcbiAgICAgICAgc3BlYWtlcl9lbWFpbCxcbiAgICAgICAgY2F0ZWdvcnksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBleHBlcmllbmNlX2xldmVsLFxuICAgICAgICBjcmVhdGVkX2F0XG4gICAgICBGUk9NIHRhbGtzXG4gICAgICBXSEVSRSBldmVudF9pZCA9ID9cbiAgICAgIE9SREVSIEJZIGNyZWF0ZWRfYXQgREVTQ1xuICAgIGAsXG4gICAgICBbZXZlbnRJZF1cbiAgICApO1xuXG4gICAgLy8g44OV44Kj44O844OJ44OQ44OD44Kv6ZuG6KiIXG4gICAgY29uc3QgZmVlZGJhY2tTdW1tYXJ5ID0gYXdhaXQgdGhpcy5nZXRGZWVkYmFja1N1bW1hcnkoZXZlbnRJZCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGFydGljaXBhbnRzOiBwYXJ0aWNpcGFudHNMaXN0LFxuICAgICAgdGFsa3M6IHRhbGtzTGlzdCxcbiAgICAgIGZlZWRiYWNrOiBmZWVkYmFja1N1bW1hcnksXG4gICAgICBleHBvcnQ6IHtcbiAgICAgICAgcGFydGljaXBhbnRzQ3N2OiB0aGlzLmdlbmVyYXRlUGFydGljaXBhbnRzQ3N2KHBhcnRpY2lwYW50c0xpc3QpLFxuICAgICAgICB0YWxrc0NzdjogdGhpcy5nZW5lcmF0ZVRhbGtzQ3N2KHRhbGtzTGlzdClcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIOikh+aVsOOCpOODmeODs+ODiOavlOi8g+WIhuaekFxuICAgKi9cbiAgYXN5bmMgY29tcGFyZUV2ZW50cyhldmVudElkcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgY29tcGFyaXNvbnMgPSBbXTtcblxuICAgIGZvciAoY29uc3QgZXZlbnRJZCBvZiBldmVudElkcykge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCB0aGlzLmdldEV2ZW50U3RhdGlzdGljcyhldmVudElkLCBvcHRpb25zKTtcbiAgICAgIGNvbXBhcmlzb25zLnB1c2goe1xuICAgICAgICBldmVudElkLFxuICAgICAgICB0aXRsZTogc3RhdHMuc3RhdGlzdGljcy5iYXNpYy5ldmVudEluZm8udGl0bGUsXG4gICAgICAgIGRhdGU6IHN0YXRzLnN0YXRpc3RpY3MuYmFzaWMuZXZlbnRJbmZvLmRhdGUsXG4gICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICBwYXJ0aWNpcGFudHM6IHN0YXRzLnN0YXRpc3RpY3MuYmFzaWMuc3VtbWFyeS50b3RhbFBhcnRpY2lwYW50cyxcbiAgICAgICAgICB0YWxrczogc3RhdHMuc3RhdGlzdGljcy5iYXNpYy5zdW1tYXJ5LnRvdGFsVGFsa3MsXG4gICAgICAgICAgb25saW5lUmF0aW86XG4gICAgICAgICAgICBzdGF0cy5zdGF0aXN0aWNzLnBhcnRpY2lwYW50cy5kaXN0cmlidXRpb24uYnlUeXBlLmZpbmQodCA9PiB0LnR5cGUgPT09ICdvbmxpbmUnKVxuICAgICAgICAgICAgICA/LnBlcmNlbnRhZ2UgfHwgMCxcbiAgICAgICAgICBhdmdUYWxrRHVyYXRpb246IHN0YXRzLnN0YXRpc3RpY3MuYmFzaWMuc3VtbWFyeS5hdmVyYWdlVGFsa0R1cmF0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIOavlOi8g+WIhuaekFxuICAgIGNvbnN0IGFuYWx5c2lzID0gdGhpcy5hbmFseXplRXZlbnRDb21wYXJpc29ucyhjb21wYXJpc29ucyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnRzOiBjb21wYXJpc29ucyxcbiAgICAgIGFuYWx5c2lzLFxuICAgICAgaW5zaWdodHM6IHRoaXMuZ2VuZXJhdGVDb21wYXJpc29uSW5zaWdodHMoY29tcGFyaXNvbnMsIGFuYWx5c2lzKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICog44Os44Od44O844OI55Sf5oiQXG4gICAqL1xuICBhc3luYyBnZW5lcmF0ZVJlcG9ydChldmVudElkLCByZXBvcnRUeXBlLCBvcHRpb25zID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCB0aGlzLmdldEV2ZW50U3RhdGlzdGljcyhldmVudElkLCB7XG4gICAgICAgIGluY2x1ZGVEZXRhaWxzOiB0cnVlLFxuICAgICAgICBpbmNsdWRlVHJlbmRzOiB0cnVlLFxuICAgICAgICAuLi5vcHRpb25zXG4gICAgICB9KTtcblxuICAgICAgc3dpdGNoIChyZXBvcnRUeXBlKSB7XG4gICAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlU3VtbWFyeVJlcG9ydChzdGF0cyk7XG4gICAgICAgIGNhc2UgJ2RldGFpbGVkJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZURldGFpbGVkUmVwb3J0KHN0YXRzKTtcbiAgICAgICAgY2FzZSAnZXhlY3V0aXZlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV4ZWN1dGl2ZVJlcG9ydChzdGF0cyk7XG4gICAgICAgIGNhc2UgJ3BhcnRpY2lwYW50JzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVBhcnRpY2lwYW50UmVwb3J0KHN0YXRzKTtcbiAgICAgICAgY2FzZSAnc3BlYWtlcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVTcGVha2VyUmVwb3J0KHN0YXRzKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVwb3J0IHR5cGUnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gZ2VuZXJhdGUgcmVwb3J0OicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIHJlcG9ydCcpO1xuICAgIH1cbiAgfVxuXG4gIC8vIOODmOODq+ODkeODvOODoeOCveODg+ODiVxuXG4gIHByb2Nlc3NSZWdpc3RyYXRpb25UaW1lbGluZSh0aW1lbGluZSkge1xuICAgIGNvbnN0IHByb2Nlc3NlZCA9IHt9O1xuICAgIHRpbWVsaW5lLmZvckVhY2gocm93ID0+IHtcbiAgICAgIGlmICghcHJvY2Vzc2VkW3Jvdy5kYXRlXSkge1xuICAgICAgICBwcm9jZXNzZWRbcm93LmRhdGVdID0geyBkYXRlOiByb3cuZGF0ZSwgb25saW5lOiAwLCBvZmZsaW5lOiAwLCB0b3RhbDogMCB9O1xuICAgICAgfVxuICAgICAgcHJvY2Vzc2VkW3Jvdy5kYXRlXVtyb3cucGFydGljaXBhdGlvbl90eXBlXSA9IHJvdy5yZWdpc3RyYXRpb25zO1xuICAgICAgcHJvY2Vzc2VkW3Jvdy5kYXRlXS50b3RhbCArPSByb3cucmVnaXN0cmF0aW9ucztcbiAgICB9KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhwcm9jZXNzZWQpO1xuICB9XG5cbiAgcHJvY2Vzc1N1Ym1pc3Npb25UaW1lbGluZSh0aW1lbGluZSkge1xuICAgIGNvbnN0IHByb2Nlc3NlZCA9IHt9O1xuICAgIHRpbWVsaW5lLmZvckVhY2gocm93ID0+IHtcbiAgICAgIGlmICghcHJvY2Vzc2VkW3Jvdy5kYXRlXSkge1xuICAgICAgICBwcm9jZXNzZWRbcm93LmRhdGVdID0geyBkYXRlOiByb3cuZGF0ZSwgY29uZmlybWVkOiAwLCBwZW5kaW5nOiAwLCB0b3RhbDogMCB9O1xuICAgICAgfVxuICAgICAgcHJvY2Vzc2VkW3Jvdy5kYXRlXVtyb3cuc3RhdHVzXSA9IHJvdy5zdWJtaXNzaW9ucztcbiAgICAgIHByb2Nlc3NlZFtyb3cuZGF0ZV0udG90YWwgKz0gcm93LnN1Ym1pc3Npb25zO1xuICAgIH0pO1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKHByb2Nlc3NlZCk7XG4gIH1cblxuICBncm91cEJ5U3RhdHVzKGRpc3RyaWJ1dGlvbikge1xuICAgIGNvbnN0IHN0YXR1c0dyb3VwcyA9IHt9O1xuICAgIGRpc3RyaWJ1dGlvbi5mb3JFYWNoKHJvdyA9PiB7XG4gICAgICBpZiAoIXN0YXR1c0dyb3Vwc1tyb3cuc3RhdHVzXSkge1xuICAgICAgICBzdGF0dXNHcm91cHNbcm93LnN0YXR1c10gPSBbXTtcbiAgICAgIH1cbiAgICAgIHN0YXR1c0dyb3Vwc1tyb3cuc3RhdHVzXS5wdXNoKHtcbiAgICAgICAgY2F0ZWdvcnk6IHJvdy5jYXRlZ29yeSxcbiAgICAgICAgY291bnQ6IHJvdy5jb3VudCxcbiAgICAgICAgYXZlcmFnZUR1cmF0aW9uOiBwYXJzZUZsb2F0KHJvdy5hdmdfZHVyYXRpb24/LnRvRml4ZWQoMSkpIHx8IDBcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzdGF0dXNHcm91cHM7XG4gIH1cblxuICBjYWxjdWxhdGVBdmVyYWdlUGVyRGF5KHRpbWVsaW5lKSB7XG4gICAgaWYgKCF0aW1lbGluZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCB0b3RhbERheXMgPSBuZXcgU2V0KHRpbWVsaW5lLm1hcChyb3cgPT4gcm93LmRhdGUpKS5zaXplO1xuICAgIGNvbnN0IHRvdGFsUmVnaXN0cmF0aW9ucyA9IHRpbWVsaW5lLnJlZHVjZSgoc3VtLCByb3cpID0+IHN1bSArIHJvdy5yZWdpc3RyYXRpb25zLCAwKTtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCgodG90YWxSZWdpc3RyYXRpb25zIC8gdG90YWxEYXlzKS50b0ZpeGVkKDIpKTtcbiAgfVxuXG4gIGZpbmRQZWFrUmVnaXN0cmF0aW9uRGF5KHRpbWVsaW5lKSB7XG4gICAgaWYgKCF0aW1lbGluZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGltZWxpbmUucmVkdWNlKChwZWFrLCBjdXJyZW50KSA9PlxuICAgICAgY3VycmVudC5yZWdpc3RyYXRpb25zID4gcGVhay5yZWdpc3RyYXRpb25zID8gY3VycmVudCA6IHBlYWtcbiAgICApO1xuICB9XG5cbiAgY2FsY3VsYXRlQXZlcmFnZUR1cmF0aW9uKGRpc3RyaWJ1dGlvbikge1xuICAgIGxldCB0b3RhbER1cmF0aW9uID0gMDtcbiAgICBsZXQgdG90YWxDb3VudCA9IDA7XG5cbiAgICBkaXN0cmlidXRpb24uZm9yRWFjaChyb3cgPT4ge1xuICAgICAgaWYgKHJvdy5hdmdfZHVyYXRpb24pIHtcbiAgICAgICAgdG90YWxEdXJhdGlvbiArPSByb3cuYXZnX2R1cmF0aW9uICogcm93LmNvdW50O1xuICAgICAgICB0b3RhbENvdW50ICs9IHJvdy5jb3VudDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0b3RhbENvdW50ID4gMCA/IHBhcnNlRmxvYXQoKHRvdGFsRHVyYXRpb24gLyB0b3RhbENvdW50KS50b0ZpeGVkKDEpKSA6IDA7XG4gIH1cblxuICBhbmFseXplRHVyYXRpb25EaXN0cmlidXRpb24oZGlzdHJpYnV0aW9uKSB7XG4gICAgY29uc3QgZHVyYXRpb25zID0ge307XG4gICAgZGlzdHJpYnV0aW9uLmZvckVhY2gocm93ID0+IHtcbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gTWF0aC5yb3VuZChyb3cuYXZnX2R1cmF0aW9uIC8gNSkgKiA1OyAvLyA15YiG5Y2Y5L2N44Gn5Li444KB44KLXG4gICAgICBkdXJhdGlvbnNbYCR7ZHVyYXRpb259bWluYF0gPSAoZHVyYXRpb25zW2Ake2R1cmF0aW9ufW1pbmBdIHx8IDApICsgcm93LmNvdW50O1xuICAgIH0pO1xuICAgIHJldHVybiBkdXJhdGlvbnM7XG4gIH1cblxuICBjYWxjdWxhdGVDdW11bGF0aXZlKGRhaWx5RGF0YSkge1xuICAgIGxldCBjdW11bGF0aXZlID0gMDtcbiAgICByZXR1cm4gZGFpbHlEYXRhLm1hcChkYXkgPT4gKHtcbiAgICAgIGRhdGU6IGRheS5kYXRlLFxuICAgICAgdmFsdWU6IChjdW11bGF0aXZlICs9IGRheS52YWx1ZSB8fCBkYXkucmVnaXN0cmF0aW9ucyB8fCBkYXkuc3VibWlzc2lvbnMgfHwgMClcbiAgICB9KSk7XG4gIH1cblxuICBjYWxjdWxhdGVQcmVkaWN0aW9ucyhyZWdpc3RyYXRpb25zLCBzdWJtaXNzaW9ucykge1xuICAgIC8vIOewoeaYk+e3muW9ouWbnuW4sOOBq+OCiOOCi+S6iOa4rFxuICAgIHJldHVybiB7XG4gICAgICByZWdpc3RyYXRpb25zOiB0aGlzLmxpbmVhclJlZ3Jlc3Npb24ocmVnaXN0cmF0aW9ucyksXG4gICAgICBzdWJtaXNzaW9uczogdGhpcy5saW5lYXJSZWdyZXNzaW9uKHN1Ym1pc3Npb25zKVxuICAgIH07XG4gIH1cblxuICBsaW5lYXJSZWdyZXNzaW9uKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4geyBuZXh0V2VlazogMCwgY29uZmlkZW5jZTogMCB9O1xuICAgIH1cblxuICAgIGNvbnN0IG4gPSBkYXRhLmxlbmd0aDtcbiAgICBjb25zdCB4ID0gZGF0YS5tYXAoKF8sIGkpID0+IGkpO1xuICAgIGNvbnN0IHkgPSBkYXRhLm1hcChkID0+IGQudmFsdWUgfHwgZC5yZWdpc3RyYXRpb25zIHx8IGQuc3VibWlzc2lvbnMgfHwgMCk7XG5cbiAgICBjb25zdCBzdW1YID0geC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICBjb25zdCBzdW1ZID0geS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICBjb25zdCBzdW1YWSA9IHgucmVkdWNlKChzdW0sIHhpLCBpKSA9PiBzdW0gKyB4aSAqIHlbaV0sIDApO1xuICAgIGNvbnN0IHN1bVhYID0geC5yZWR1Y2UoKHN1bSwgeGkpID0+IHN1bSArIHhpICogeGksIDApO1xuXG4gICAgY29uc3Qgc2xvcGUgPSAobiAqIHN1bVhZIC0gc3VtWCAqIHN1bVkpIC8gKG4gKiBzdW1YWCAtIHN1bVggKiBzdW1YKTtcbiAgICBjb25zdCBpbnRlcmNlcHQgPSAoc3VtWSAtIHNsb3BlICogc3VtWCkgLyBuO1xuXG4gICAgY29uc3QgbmV4dFdlZWtQcmVkaWN0aW9uID0gc2xvcGUgKiAobiArIDcpICsgaW50ZXJjZXB0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHRXZWVrOiBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKG5leHRXZWVrUHJlZGljdGlvbikpLFxuICAgICAgY29uZmlkZW5jZTogdGhpcy5jYWxjdWxhdGVDb25maWRlbmNlKGRhdGEsIHNsb3BlLCBpbnRlcmNlcHQpXG4gICAgfTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUNvbmZpZGVuY2UoZGF0YSwgc2xvcGUsIGludGVyY2VwdCkge1xuICAgIC8vIFLCsuWApOOBruioiOeul1xuICAgIGNvbnN0IHkgPSBkYXRhLm1hcChkID0+IGQudmFsdWUgfHwgZC5yZWdpc3RyYXRpb25zIHx8IGQuc3VibWlzc2lvbnMgfHwgMCk7XG4gICAgY29uc3QgeU1lYW4gPSB5LnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8geS5sZW5ndGg7XG5cbiAgICBsZXQgc3NSZXMgPSAwO1xuICAgIGxldCBzc1RvdCA9IDA7XG5cbiAgICB5LmZvckVhY2goKHlpLCBpKSA9PiB7XG4gICAgICBjb25zdCBwcmVkaWN0ZWQgPSBzbG9wZSAqIGkgKyBpbnRlcmNlcHQ7XG4gICAgICBzc1JlcyArPSBNYXRoLnBvdyh5aSAtIHByZWRpY3RlZCwgMik7XG4gICAgICBzc1RvdCArPSBNYXRoLnBvdyh5aSAtIHlNZWFuLCAyKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJTcXVhcmVkID0gMSAtIHNzUmVzIC8gc3NUb3Q7XG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHJTcXVhcmVkKSk7XG4gIH1cblxuICBnZW5lcmF0ZVRyZW5kSW5zaWdodHMocmVnaXN0cmF0aW9ucywgc3VibWlzc2lvbnMsIHBhcnRpY2lwYXRpb25UeXBlcykge1xuICAgIGNvbnN0IGluc2lnaHRzID0gW107XG5cbiAgICAvLyDnmbvpjLLjg4jjg6zjg7Pjg4nliIbmnpBcbiAgICBpZiAocmVnaXN0cmF0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCByZWNlbnQgPSByZWdpc3RyYXRpb25zLnNsaWNlKC03KTtcbiAgICAgIGNvbnN0IGVhcmxpZXIgPSByZWdpc3RyYXRpb25zLnNsaWNlKC0xNCwgLTcpO1xuICAgICAgY29uc3QgcmVjZW50QXZnID0gcmVjZW50LnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLnJlZ2lzdHJhdGlvbnMsIDApIC8gcmVjZW50Lmxlbmd0aDtcbiAgICAgIGNvbnN0IGVhcmxpZXJBdmcgPSBlYXJsaWVyLnJlZHVjZSgoc3VtLCBkKSA9PiBzdW0gKyBkLnJlZ2lzdHJhdGlvbnMsIDApIC8gZWFybGllci5sZW5ndGg7XG5cbiAgICAgIGlmIChyZWNlbnRBdmcgPiBlYXJsaWVyQXZnICogMS4yKSB7XG4gICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdwb3NpdGl2ZScsXG4gICAgICAgICAgbWVzc2FnZTogJ+eZu+mMsuaVsOOBjOWil+WKoOWCvuWQkeOBq+OBguOCiuOBvuOBmScsXG4gICAgICAgICAgbWV0cmljOiAncmVnaXN0cmF0aW9ucycsXG4gICAgICAgICAgY2hhbmdlOiAoKChyZWNlbnRBdmcgLSBlYXJsaWVyQXZnKSAvIGVhcmxpZXJBdmcpICogMTAwKS50b0ZpeGVkKDEpXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChyZWNlbnRBdmcgPCBlYXJsaWVyQXZnICogMC44KSB7XG4gICAgICAgIGluc2lnaHRzLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgICAgICBtZXNzYWdlOiAn55m76Yyy5pWw44GM5rib5bCR5YK+5ZCR44Gr44GC44KK44G+44GZJyxcbiAgICAgICAgICBtZXRyaWM6ICdyZWdpc3RyYXRpb25zJyxcbiAgICAgICAgICBjaGFuZ2U6ICgoKHJlY2VudEF2ZyAtIGVhcmxpZXJBdmcpIC8gZWFybGllckF2ZykgKiAxMDApLnRvRml4ZWQoMSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgYW5hbHl6ZUV2ZW50Q29tcGFyaXNvbnMoY29tcGFyaXNvbnMpIHtcbiAgICBjb25zdCBtZXRyaWNzID0gWydwYXJ0aWNpcGFudHMnLCAndGFsa3MnLCAnb25saW5lUmF0aW8nLCAnYXZnVGFsa0R1cmF0aW9uJ107XG4gICAgY29uc3QgYW5hbHlzaXMgPSB7fTtcblxuICAgIG1ldHJpY3MuZm9yRWFjaChtZXRyaWMgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzID0gY29tcGFyaXNvbnMubWFwKGMgPT4gYy5tZXRyaWNzW21ldHJpY10pO1xuICAgICAgYW5hbHlzaXNbbWV0cmljXSA9IHtcbiAgICAgICAgbWluOiBNYXRoLm1pbiguLi52YWx1ZXMpLFxuICAgICAgICBtYXg6IE1hdGgubWF4KC4uLnZhbHVlcyksXG4gICAgICAgIGF2ZXJhZ2U6IHZhbHVlcy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSAvIHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIHN0YW5kYXJkRGV2aWF0aW9uOiB0aGlzLmNhbGN1bGF0ZVN0YW5kYXJkRGV2aWF0aW9uKHZhbHVlcylcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYW5hbHlzaXM7XG4gIH1cblxuICBjYWxjdWxhdGVTdGFuZGFyZERldmlhdGlvbih2YWx1ZXMpIHtcbiAgICBjb25zdCBtZWFuID0gdmFsdWVzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gdmFsdWVzLmxlbmd0aDtcbiAgICBjb25zdCBzcXVhcmVEaWZmcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gTWF0aC5wb3codmFsdWUgLSBtZWFuLCAyKSk7XG4gICAgY29uc3QgYXZnU3F1YXJlRGlmZiA9IHNxdWFyZURpZmZzLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApIC8gdmFsdWVzLmxlbmd0aDtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGF2Z1NxdWFyZURpZmYpO1xuICB9XG5cbiAgZ2VuZXJhdGVDb21wYXJpc29uSW5zaWdodHMoY29tcGFyaXNvbnMsIGFuYWx5c2lzKSB7XG4gICAgY29uc3QgaW5zaWdodHMgPSBbXTtcblxuICAgIC8vIOWPguWKoOiAheaVsOOBruWIhuaekFxuICAgIGNvbnN0IHBhcnRpY2lwYW50VmFsdWVzID0gY29tcGFyaXNvbnMubWFwKGMgPT4gYy5tZXRyaWNzLnBhcnRpY2lwYW50cyk7XG4gICAgY29uc3QgbWF4UGFydGljaXBhbnRzID0gTWF0aC5tYXgoLi4ucGFydGljaXBhbnRWYWx1ZXMpO1xuICAgIGNvbnN0IGJlc3RFdmVudCA9IGNvbXBhcmlzb25zLmZpbmQoYyA9PiBjLm1ldHJpY3MucGFydGljaXBhbnRzID09PSBtYXhQYXJ0aWNpcGFudHMpO1xuXG4gICAgaW5zaWdodHMucHVzaCh7XG4gICAgICB0eXBlOiAnaGlnaGxpZ2h0JyxcbiAgICAgIG1lc3NhZ2U6IGDmnIDjgoLlj4LliqDogIXjgYzlpJrjgYvjgaPjgZ/jga7jga/jgIwke2Jlc3RFdmVudC50aXRsZX3jgI3jgacke21heFBhcnRpY2lwYW50c33lkI3jgafjgZfjgZ9gLFxuICAgICAgY2F0ZWdvcnk6ICdwYXJ0aWNpcGF0aW9uJ1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgZ2VuZXJhdGVTdW1tYXJ5UmVwb3J0KHN0YXRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdzdW1tYXJ5JyxcbiAgICAgIHRpdGxlOiBgJHtzdGF0cy5zdGF0aXN0aWNzLmJhc2ljLmV2ZW50SW5mby50aXRsZX0gLSDjgrXjg57jg6rjg7zjg6zjg53jg7zjg4hgLFxuICAgICAgZ2VuZXJhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIGtleU1ldHJpY3M6IHtcbiAgICAgICAgcGFydGljaXBhbnRzOiBzdGF0cy5zdGF0aXN0aWNzLmJhc2ljLnN1bW1hcnkudG90YWxQYXJ0aWNpcGFudHMsXG4gICAgICAgIHRhbGtzOiBzdGF0cy5zdGF0aXN0aWNzLmJhc2ljLnN1bW1hcnkudG90YWxUYWxrcyxcbiAgICAgICAgb25saW5lUmF0aW86XG4gICAgICAgICAgc3RhdHMuc3RhdGlzdGljcy5wYXJ0aWNpcGFudHMuZGlzdHJpYnV0aW9uLmJ5VHlwZS5maW5kKHQgPT4gdC50eXBlID09PSAnb25saW5lJylcbiAgICAgICAgICAgID8ucGVyY2VudGFnZSB8fCAwXG4gICAgICB9LFxuICAgICAgaGlnaGxpZ2h0czogW1xuICAgICAgICBg57eP5Y+C5Yqg6ICF5pWwOiAke3N0YXRzLnN0YXRpc3RpY3MuYmFzaWMuc3VtbWFyeS50b3RhbFBhcnRpY2lwYW50c33lkI1gLFxuICAgICAgICBg57eP55m66KGo5pWwOiAke3N0YXRzLnN0YXRpc3RpY3MuYmFzaWMuc3VtbWFyeS50b3RhbFRhbGtzfeS7tmAsXG4gICAgICAgIGDjgqrjg7Pjg6njgqTjg7Plj4LliqDnjoc6ICR7XG4gICAgICAgICAgc3RhdHMuc3RhdGlzdGljcy5wYXJ0aWNpcGFudHMuZGlzdHJpYnV0aW9uLmJ5VHlwZS5maW5kKHQgPT4gdC50eXBlID09PSAnb25saW5lJylcbiAgICAgICAgICAgID8ucGVyY2VudGFnZSB8fCAwXG4gICAgICAgIH0lYFxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICBhc3luYyBnZXREYWlseVJlZ2lzdHJhdGlvbnMoZXZlbnRJZCwgb3B0aW9ucykge1xuICAgIC8vIOWun+ijheOBr+ewoeeVpeWMllxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGdldERhaWx5U3VibWlzc2lvbnMoZXZlbnRJZCwgb3B0aW9ucykge1xuICAgIC8vIOWun+ijheOBr+ewoeeVpeWMllxuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGFzeW5jIGdldFBhcnRpY2lwYXRpb25UeXBlVHJlbmRzKGV2ZW50SWQsIG9wdGlvbnMpIHtcbiAgICAvLyDlrp/oo4Xjga/nsKHnlaXljJZcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBhc3luYyBnZXRGZWVkYmFja1N1bW1hcnkoZXZlbnRJZCkge1xuICAgIC8vIOWun+ijheOBr+ewoeeVpeWMllxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGdlbmVyYXRlUGFydGljaXBhbnRzQ3N2KHBhcnRpY2lwYW50cykge1xuICAgIC8vIENTVueUn+aIkOOBruWun+ijhVxuICAgIHJldHVybiAnQ1NWIGRhdGEnO1xuICB9XG5cbiAgZ2VuZXJhdGVUYWxrc0Nzdih0YWxrcykge1xuICAgIC8vIENTVueUn+aIkOOBruWun+ijhVxuICAgIHJldHVybiAnQ1NWIGRhdGEnO1xuICB9XG5cbiAgZ2VuZXJhdGVEZXRhaWxlZFJlcG9ydChzdGF0cykge1xuICAgIC8vIOips+e0sOODrOODneODvOODiOeUn+aIkFxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGdlbmVyYXRlRXhlY3V0aXZlUmVwb3J0KHN0YXRzKSB7XG4gICAgLy8g44Ko44Kw44K844Kv44OG44Kj44OW44Os44Od44O844OI55Sf5oiQXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgZ2VuZXJhdGVQYXJ0aWNpcGFudFJlcG9ydChzdGF0cykge1xuICAgIC8vIOWPguWKoOiAheODrOODneODvOODiOeUn+aIkFxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGdlbmVyYXRlU3BlYWtlclJlcG9ydChzdGF0cykge1xuICAgIC8vIOeZuuihqOiAheODrOODneODvOODiOeUn+aIkFxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBBbmFseXRpY3NTZXJ2aWNlKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLHNCQUFzQixDQUFDO0FBQzlDLE1BQU07RUFBRUM7QUFBZ0IsQ0FBQyxHQUFHRCxPQUFPLENBQUMsWUFBWSxDQUFDO0FBRWpELE1BQU1FLGdCQUFnQixDQUFDO0VBQ3JCQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0gsZUFBZSxDQUFDSSxXQUFXLENBQUMsQ0FBQztFQUN6Qzs7RUFFQTtBQUNGO0FBQ0E7RUFDRSxNQUFNQyxrQkFBa0JBLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzlDLElBQUk7TUFDRixNQUFNO1FBQUVDLFNBQVM7UUFBRUMsT0FBTztRQUFFQyxjQUFjLEdBQUcsS0FBSztRQUFFQyxhQUFhLEdBQUc7TUFBTSxDQUFDLEdBQUdKLE9BQU87O01BRXJGO01BQ0EsTUFBTUssVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0IsQ0FBQ1AsT0FBTyxDQUFDOztNQUV6RDtNQUNBLE1BQU1RLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDQyxtQkFBbUIsQ0FBQ1QsT0FBTyxFQUFFO1FBQUVFLFNBQVM7UUFBRUM7TUFBUSxDQUFDLENBQUM7O01BRXhGO01BQ0EsTUFBTU8sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDQyxZQUFZLENBQUNYLE9BQU8sQ0FB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