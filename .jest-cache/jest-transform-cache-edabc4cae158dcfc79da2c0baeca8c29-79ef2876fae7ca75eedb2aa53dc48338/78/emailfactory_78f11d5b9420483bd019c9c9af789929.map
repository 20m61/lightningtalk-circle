{"version":3,"names":["cov_17imprm56z","actualCoverage","EmailService","ProductionEmailService","EmailServiceFactory","create","options","b","f","emailProvider","s","provider","process","env","EMAIL_PROVIDER","environment","NODE_ENV","includes","console","log","EMAIL_ENABLED","createAndInitialize","emailService","setupQueue","Promise","resolve","initialized","once","getSupportedProviders","name","description","recommended","features","requirements","validateConfiguration","validation","valid","errors","warnings","SENDGRID_API_KEY","push","EMAIL_FROM","startsWith","requiredAwsVars","missingVars","filter","varName","length","join","AWS_REGION","REDIS_URL","testEmailConfiguration","healthCheck","status","message","error"],"sources":["email-factory.js"],"sourcesContent":["/**\n * Email Service Factory - Strategy Pattern for Email Service Selection\n * Allows seamless switching between development and production email services\n */\n\nimport { EmailService } from './email.js';\nimport { ProductionEmailService } from './email-production.js';\n\nexport class EmailServiceFactory {\n    static create(options = {}) {\n        const emailProvider = options.provider || process.env.EMAIL_PROVIDER || 'simulation';\n        const environment = options.environment || process.env.NODE_ENV || 'development';\n        \n        // Force production service for specific providers\n        if (['sendgrid', 'ses'].includes(emailProvider)) {\n            console.log(`ðŸ“§ Using Production Email Service (${emailProvider})`);\n            return new ProductionEmailService();\n        }\n        \n        // Use production service in production environment\n        if (environment === 'production' && process.env.EMAIL_ENABLED === 'true') {\n            console.log('ðŸ“§ Using Production Email Service (production mode)');\n            return new ProductionEmailService();\n        }\n        \n        // Default to simulation service for development\n        console.log('ðŸ“§ Using Simulation Email Service (development mode)');\n        return new EmailService();\n    }\n\n    static async createAndInitialize(options = {}) {\n        const emailService = this.create(options);\n        \n        // Wait for service to be ready if it has async initialization\n        if (emailService.setupQueue && typeof emailService.setupQueue === 'function') {\n            await new Promise((resolve) => {\n                if (emailService.initialized) {\n                    resolve();\n                } else {\n                    emailService.once('ready', resolve);\n                }\n            });\n        }\n        \n        return emailService;\n    }\n\n    static getSupportedProviders() {\n        return [\n            {\n                provider: 'simulation',\n                name: 'Simulation Service',\n                description: 'Console logging for development',\n                recommended: 'development',\n                features: ['template-testing', 'console-output']\n            },\n            {\n                provider: 'sendgrid',\n                name: 'SendGrid',\n                description: 'Cloud email delivery platform',\n                recommended: 'production',\n                features: ['high-deliverability', 'analytics', 'templates', 'queue-support'],\n                requirements: ['SENDGRID_API_KEY']\n            },\n            {\n                provider: 'ses',\n                name: 'Amazon SES',\n                description: 'AWS Simple Email Service',\n                recommended: 'production',\n                features: ['cost-effective', 'aws-integration', 'high-volume'],\n                requirements: ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_REGION']\n            }\n        ];\n    }\n\n    static validateConfiguration(provider = null) {\n        const emailProvider = provider || process.env.EMAIL_PROVIDER || 'simulation';\n        const validation = {\n            provider: emailProvider,\n            valid: true,\n            errors: [],\n            warnings: []\n        };\n\n        switch (emailProvider) {\n            case 'sendgrid':\n                // Check SendGrid configuration\n                if (!process.env.SENDGRID_API_KEY) {\n                    validation.errors.push('SENDGRID_API_KEY is required for SendGrid provider');\n                    validation.valid = false;\n                }\n                \n                if (!process.env.EMAIL_FROM) {\n                    validation.warnings.push('EMAIL_FROM should be set for better deliverability');\n                }\n                \n                // Validate API key format\n                if (process.env.SENDGRID_API_KEY && !process.env.SENDGRID_API_KEY.startsWith('SG.')) {\n                    validation.warnings.push('SendGrid API key should start with \"SG.\"');\n                }\n                break;\n\n            case 'ses':\n                // Check AWS SES configuration\n                const requiredAwsVars = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY'];\n                const missingVars = requiredAwsVars.filter(varName => !process.env[varName]);\n                \n                if (missingVars.length > 0) {\n                    validation.errors.push(`Missing AWS credentials: ${missingVars.join(', ')}`);\n                    validation.valid = false;\n                }\n                \n                if (!process.env.AWS_REGION) {\n                    validation.warnings.push('AWS_REGION not set, defaulting to us-east-1');\n                }\n                break;\n\n            case 'simulation':\n                // Simulation mode warnings\n                if (process.env.NODE_ENV === 'production') {\n                    validation.warnings.push('Using simulation mode in production environment');\n                }\n                break;\n\n            default:\n                validation.errors.push(`Unsupported email provider: ${emailProvider}`);\n                validation.valid = false;\n        }\n\n        // Check Redis configuration for queue support\n        if (['sendgrid', 'ses'].includes(emailProvider)) {\n            if (!process.env.REDIS_URL) {\n                validation.warnings.push('REDIS_URL not set, email queue will use default Redis connection');\n            }\n        }\n\n        // Check general email configuration\n        if (process.env.EMAIL_ENABLED === 'true' && !process.env.EMAIL_FROM) {\n            validation.warnings.push('EMAIL_FROM should be set when email is enabled');\n        }\n\n        return validation;\n    }\n\n    static async testEmailConfiguration(provider = null) {\n        try {\n            const emailService = this.create({ provider });\n            \n            // Perform health check if available\n            if (emailService.healthCheck && typeof emailService.healthCheck === 'function') {\n                return await emailService.healthCheck();\n            }\n            \n            return {\n                status: 'healthy',\n                provider: provider || process.env.EMAIL_PROVIDER || 'simulation',\n                message: 'Email service created successfully'\n            };\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                provider: provider || process.env.EMAIL_PROVIDER || 'simulation',\n                error: error.message\n            };\n        }\n    }\n}\n\nexport default EmailServiceFactory;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}