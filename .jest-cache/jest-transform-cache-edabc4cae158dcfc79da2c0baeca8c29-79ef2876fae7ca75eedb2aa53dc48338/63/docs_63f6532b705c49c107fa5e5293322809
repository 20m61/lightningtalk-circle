751a65c114724e5acd3e7f53dce8f8e0
/* istanbul ignore next */
function cov_1a81gl3a9v() {
  var path = "/home/ec2-user/workspace/lightningtalk-circle/server/routes/docs.js";
  var hash = "e25e293e8c04e698384f227dc9d27c3ab6982537";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/ec2-user/workspace/lightningtalk-circle/server/routes/docs.js",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 16
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "1": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 47
        }
      },
      "2": {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "3": {
        start: {
          line: 9,
          column: 13
        },
        end: {
          line: 9,
          column: 28
        }
      },
      "4": {
        start: {
          line: 10,
          column: 11
        },
        end: {
          line: 10,
          column: 24
        }
      },
      "5": {
        start: {
          line: 11,
          column: 19
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "6": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "7": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 32,
          column: 1
        }
      },
      "8": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 73
        }
      },
      "9": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 43
        }
      },
      "10": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 20,
          column: 59
        }
      },
      "11": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 22,
          column: 63
        }
      },
      "12": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 31,
          column: 4
        }
      },
      "13": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 59,
          column: 1
        }
      },
      "14": {
        start: {
          line: 65,
          column: 0
        },
        end: {
          line: 65,
          column: 33
        }
      },
      "15": {
        start: {
          line: 66,
          column: 0
        },
        end: {
          line: 66,
          column: 66
        }
      },
      "16": {
        start: {
          line: 72,
          column: 0
        },
        end: {
          line: 83,
          column: 3
        }
      },
      "17": {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "18": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 30
        }
      },
      "19": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 57
        }
      },
      "20": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 81,
          column: 7
        }
      },
      "21": {
        start: {
          line: 89,
          column: 0
        },
        end: {
          line: 110,
          column: 3
        }
      },
      "22": {
        start: {
          line: 90,
          column: 2
        },
        end: {
          line: 109,
          column: 3
        }
      },
      "23": {
        start: {
          line: 91,
          column: 24
        },
        end: {
          line: 91,
          column: 75
        }
      },
      "24": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "25": {
        start: {
          line: 94,
          column: 6
        },
        end: {
          line: 94,
          column: 58
        }
      },
      "26": {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 32
        }
      },
      "27": {
        start: {
          line: 97,
          column: 6
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "28": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 57
        }
      },
      "29": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 108,
          column: 7
        }
      },
      "30": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 282,
          column: 3
        }
      },
      "31": {
        start: {
          line: 117,
          column: 2
        },
        end: {
          line: 281,
          column: 3
        }
      },
      "32": {
        start: {
          line: 118,
          column: 28
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "33": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 272,
          column: 7
        }
      },
      "34": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 64
        }
      },
      "35": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "36": {
        start: {
          line: 288,
          column: 0
        },
        end: {
          line: 349,
          column: 3
        }
      },
      "37": {
        start: {
          line: 289,
          column: 2
        },
        end: {
          line: 348,
          column: 3
        }
      },
      "38": {
        start: {
          line: 290,
          column: 22
        },
        end: {
          line: 316,
          column: 5
        }
      },
      "39": {
        start: {
          line: 319,
          column: 4
        },
        end: {
          line: 334,
          column: 5
        }
      },
      "40": {
        start: {
          line: 320,
          column: 6
        },
        end: {
          line: 333,
          column: 9
        }
      },
      "41": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 332,
          column: 11
        }
      },
      "42": {
        start: {
          line: 322,
          column: 10
        },
        end: {
          line: 331,
          column: 11
        }
      },
      "43": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 324,
          column: 76
        }
      },
      "44": {
        start: {
          line: 326,
          column: 25
        },
        end: {
          line: 326,
          column: 61
        }
      },
      "45": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 330,
          column: 15
        }
      },
      "46": {
        start: {
          line: 328,
          column: 14
        },
        end: {
          line: 329,
          column: 58
        }
      },
      "47": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 339,
          column: 7
        }
      },
      "48": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 342,
          column: 53
        }
      },
      "49": {
        start: {
          line: 343,
          column: 4
        },
        end: {
          line: 347,
          column: 7
        }
      },
      "50": {
        start: {
          line: 355,
          column: 0
        },
        end: {
          line: 518,
          column: 3
        }
      },
      "51": {
        start: {
          line: 356,
          column: 2
        },
        end: {
          line: 517,
          column: 3
        }
      },
      "52": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 503,
          column: 5
        }
      },
      "53": {
        start: {
          line: 505,
          column: 4
        },
        end: {
          line: 508,
          column: 7
        }
      },
      "54": {
        start: {
          line: 511,
          column: 4
        },
        end: {
          line: 511,
          column: 58
        }
      },
      "55": {
        start: {
          line: 512,
          column: 4
        },
        end: {
          line: 516,
          column: 7
        }
      },
      "56": {
        start: {
          line: 524,
          column: 0
        },
        end: {
          line: 611,
          column: 3
        }
      },
      "57": {
        start: {
          line: 525,
          column: 2
        },
        end: {
          line: 610,
          column: 3
        }
      },
      "58": {
        start: {
          line: 526,
          column: 22
        },
        end: {
          line: 596,
          column: 5
        }
      },
      "59": {
        start: {
          line: 598,
          column: 4
        },
        end: {
          line: 601,
          column: 7
        }
      },
      "60": {
        start: {
          line: 604,
          column: 4
        },
        end: {
          line: 604,
          column: 52
        }
      },
      "61": {
        start: {
          line: 605,
          column: 4
        },
        end: {
          line: 609,
          column: 7
        }
      },
      "62": {
        start: {
          line: 613,
          column: 0
        },
        end: {
          line: 613,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 29
          }
        },
        loc: {
          start: {
            line: 72,
            column: 42
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 72
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 89,
            column: 28
          },
          end: {
            line: 89,
            column: 29
          }
        },
        loc: {
          start: {
            line: 89,
            column: 42
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 89
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 116,
            column: 27
          }
        },
        loc: {
          start: {
            line: 116,
            column: 40
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 116
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 288,
            column: 22
          },
          end: {
            line: 288,
            column: 23
          }
        },
        loc: {
          start: {
            line: 288,
            column: 36
          },
          end: {
            line: 349,
            column: 1
          }
        },
        line: 288
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 320,
            column: 52
          },
          end: {
            line: 320,
            column: 53
          }
        },
        loc: {
          start: {
            line: 320,
            column: 73
          },
          end: {
            line: 333,
            column: 7
          }
        },
        line: 320
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 321,
            column: 37
          },
          end: {
            line: 321,
            column: 38
          }
        },
        loc: {
          start: {
            line: 321,
            column: 47
          },
          end: {
            line: 332,
            column: 9
          }
        },
        line: 321
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 327,
            column: 25
          },
          end: {
            line: 327,
            column: 26
          }
        },
        loc: {
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 330,
            column: 13
          }
        },
        line: 327
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 355,
            column: 20
          },
          end: {
            line: 355,
            column: 21
          }
        },
        loc: {
          start: {
            line: 355,
            column: 34
          },
          end: {
            line: 518,
            column: 1
          }
        },
        line: 355
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 524,
            column: 25
          },
          end: {
            line: 524,
            column: 26
          }
        },
        loc: {
          start: {
            line: 524,
            column: 39
          },
          end: {
            line: 611,
            column: 1
          }
        },
        line: 524
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: 96,
            column: 11
          },
          end: {
            line: 101,
            column: 5
          }
        }],
        line: 93
      },
      "1": {
        loc: {
          start: {
            line: 223,
            column: 53
          },
          end: {
            line: 223,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 80
          },
          end: {
            line: 223,
            column: 85
          }
        }, {
          start: {
            line: 223,
            column: 88
          },
          end: {
            line: 223,
            column: 92
          }
        }],
        line: 223
      },
      "2": {
        loc: {
          start: {
            line: 299,
            column: 27
          },
          end: {
            line: 299,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 299,
            column: 27
          },
          end: {
            line: 299,
            column: 48
          }
        }, {
          start: {
            line: 299,
            column: 52
          },
          end: {
            line: 299,
            column: 54
          }
        }],
        line: 299
      },
      "3": {
        loc: {
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "4": {
        loc: {
          start: {
            line: 322,
            column: 10
          },
          end: {
            line: 331,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 10
          },
          end: {
            line: 331,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "5": {
        loc: {
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 65
          }
        }, {
          start: {
            line: 324,
            column: 69
          },
          end: {
            line: 324,
            column: 70
          }
        }],
        line: 324
      },
      "6": {
        loc: {
          start: {
            line: 326,
            column: 25
          },
          end: {
            line: 326,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 25
          },
          end: {
            line: 326,
            column: 45
          }
        }, {
          start: {
            line: 326,
            column: 49
          },
          end: {
            line: 326,
            column: 61
          }
        }],
        line: 326
      },
      "7": {
        loc: {
          start: {
            line: 329,
            column: 17
          },
          end: {
            line: 329,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 17
          },
          end: {
            line: 329,
            column: 47
          }
        }, {
          start: {
            line: 329,
            column: 51
          },
          end: {
            line: 329,
            column: 52
          }
        }],
        line: 329
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e25e293e8c04e698384f227dc9d27c3ab6982537"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a81gl3a9v = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a81gl3a9v();
/**
 * API Documentation Routes
 * OpenAPI/Swagger統合とAPIドキュメント提供
 */

const express =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[0]++, require('express'));
const swaggerUi =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[1]++, require('swagger-ui-express'));
const YAML =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[2]++, require('yamljs'));
const path =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[3]++, require('path'));
const fs =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[4]++, require('fs'));
const {
  logger
} =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[5]++, require('../middleware/logger'));
const router =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[6]++, express.Router());

// OpenAPI仕様を読み込み
let swaggerDocument;
/* istanbul ignore next */
cov_1a81gl3a9v().s[7]++;
try {
  const openApiPath =
  /* istanbul ignore next */
  (cov_1a81gl3a9v().s[8]++, path.join(__dirname, '../../docs/api/openapi.yaml'));
  /* istanbul ignore next */
  cov_1a81gl3a9v().s[9]++;
  swaggerDocument = YAML.load(openApiPath);
  /* istanbul ignore next */
  cov_1a81gl3a9v().s[10]++;
  logger.info('OpenAPI specification loaded successfully');
} catch (error) {
  /* istanbul ignore next */
  cov_1a81gl3a9v().s[11]++;
  logger.error('Failed to load OpenAPI specification:', error);
  /* istanbul ignore next */
  cov_1a81gl3a9v().s[12]++;
  swaggerDocument = {
    openapi: '3.0.3',
    info: {
      title: 'Lightning Talk API',
      version: '1.0.0',
      description: 'API documentation is temporarily unavailable'
    },
    paths: {}
  };
}

// Swagger UI設定
const swaggerOptions =
/* istanbul ignore next */
(cov_1a81gl3a9v().s[13]++, {
  explorer: true,
  swaggerOptions: {
    persistAuthorization: true,
    displayRequestDuration: true,
    filter: true,
    showExtensions: true,
    showCommonExtensions: true,
    docExpansion: 'list',
    defaultModelsExpandDepth: 3,
    defaultModelExpandDepth: 3,
    tryItOutEnabled: true
  },
  customCss: `
    .swagger-ui .topbar { display: none; }
    .swagger-ui .info { margin: 20px 0; }
    .swagger-ui .info .title { font-size: 2.5em; color: #2c3e50; }
    .swagger-ui .scheme-container { background: #f8f9fa; padding: 15px; border-radius: 8px; }
    .swagger-ui .opblock-summary-path { font-weight: bold; }
    .swagger-ui .btn.authorize { background-color: #007bff; border-color: #007bff; }
    .swagger-ui .btn.authorize:hover { background-color: #0056b3; border-color: #0056b3; }
  `,
  customSiteTitle: 'Lightning Talk API Documentation',
  customfavIcon: '/favicon.ico'
});

/**
 * Swagger UI ドキュメント
 * GET /api/docs
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[14]++;
router.use('/', swaggerUi.serve);
/* istanbul ignore next */
cov_1a81gl3a9v().s[15]++;
router.get('/', swaggerUi.setup(swaggerDocument, swaggerOptions));

/**
 * OpenAPI仕様のJSON形式取得
 * GET /api/docs/openapi.json
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[16]++;
router.get('/openapi.json', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[0]++;
  cov_1a81gl3a9v().s[17]++;
  try {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[18]++;
    res.json(swaggerDocument);
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[19]++;
    logger.error('Failed to serve OpenAPI JSON:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[20]++;
    res.status(500).json({
      success: false,
      message: 'Failed to load API specification',
      error: error.message
    });
  }
});

/**
 * OpenAPI仕様のYAML形式取得
 * GET /api/docs/openapi.yaml
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[21]++;
router.get('/openapi.yaml', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[1]++;
  cov_1a81gl3a9v().s[22]++;
  try {
    const openApiPath =
    /* istanbul ignore next */
    (cov_1a81gl3a9v().s[23]++, path.join(__dirname, '../../docs/api/openapi.yaml'));
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[24]++;
    if (fs.existsSync(openApiPath)) {
      /* istanbul ignore next */
      cov_1a81gl3a9v().b[0][0]++;
      cov_1a81gl3a9v().s[25]++;
      res.setHeader('Content-Type', 'application/x-yaml');
      /* istanbul ignore next */
      cov_1a81gl3a9v().s[26]++;
      res.sendFile(openApiPath);
    } else {
      /* istanbul ignore next */
      cov_1a81gl3a9v().b[0][1]++;
      cov_1a81gl3a9v().s[27]++;
      res.status(404).json({
        success: false,
        message: 'OpenAPI YAML file not found'
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[28]++;
    logger.error('Failed to serve OpenAPI YAML:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[29]++;
    res.status(500).json({
      success: false,
      message: 'Failed to load API specification',
      error: error.message
    });
  }
});

/**
 * API概要とクイックスタート
 * GET /api/docs/quickstart
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[30]++;
router.get('/quickstart', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[2]++;
  cov_1a81gl3a9v().s[31]++;
  try {
    const quickstartGuide =
    /* istanbul ignore next */
    (cov_1a81gl3a9v().s[32]++, {
      title: 'Lightning Talk API クイックスタート',
      version: swaggerDocument.info.version,
      baseUrl: req.protocol + '://' + req.get('host') + '/api',
      authentication: {
        admin: {
          type: 'Bearer Token (JWT)',
          header: 'Authorization: Bearer YOUR_JWT_TOKEN',
          description: '管理者機能にはJWTトークンが必要です'
        },
        apiKey: {
          type: 'API Key',
          header: 'X-API-Key: YOUR_API_KEY',
          description: '一部のエンドポイントではAPIキーを使用できます'
        }
      },
      quickExamples: {
        'イベント一覧取得': {
          method: 'GET',
          endpoint: '/events',
          description: '公開されているイベントの一覧を取得',
          example: {
            curl: `curl -X GET "${req.protocol}://${req.get('host')}/api/events"`,
            response: {
              success: true,
              data: [{
                id: 'event-001',
                title: '第1回 なんでもライトニングトーク',
                date: '2025-06-25T19:00:00+09:00',
                status: 'upcoming'
              }]
            }
          }
        },
        '参加者登録': {
          method: 'POST',
          endpoint: '/participants/register',
          description: 'イベントへの参加登録',
          example: {
            curl: `curl -X POST "${req.protocol}://${req.get('host')}/api/participants/register" \\
  -H "Content-Type: application/json" \\
  -d '{
    "name": "テスト太郎",
    "email": "test@example.com",
    "eventId": "event-001",
    "participationType": "online"
  }'`,
            response: {
              success: true,
              message: '参加登録が完了しました',
              data: {
                id: 'participant-001',
                name: 'テスト太郎',
                eventId: 'event-001'
              }
            }
          }
        },
        '発表提出': {
          method: 'POST',
          endpoint: '/talks',
          description: 'ライトニングトークの発表提出',
          example: {
            curl: `curl -X POST "${req.protocol}://${req.get('host')}/api/talks" \\
  -H "Content-Type: application/json" \\
  -d '{
    "title": "JavaScriptの新機能紹介",
    "description": "ES2025の新機能を簡単に紹介します",
    "speakerName": "発表太郎",
    "speakerEmail": "speaker@example.com",
    "eventId": "event-001",
    "category": "技術"
  }'`,
            response: {
              success: true,
              message: '発表が正常に提出されました',
              data: {
                id: 'talk-001',
                title: 'JavaScriptの新機能紹介',
                status: 'pending'
              }
            }
          }
        }
      },
      realTimeFeatures: {
        'Server-Sent Events': {
          endpoint: '/notifications/stream',
          description: 'リアルタイム通知のSSEストリーム',
          example: {
            javascript: `const eventSource = new EventSource('${req.protocol}://${req.get('host')}/api/notifications/stream');
eventSource.addEventListener('connected', (event) => {
  console.log('接続完了:', JSON.parse(event.data));
});
eventSource.addEventListener('participant_registered', (event) => {
  console.log('新規参加者:', JSON.parse(event.data));
});`
          }
        },
        'WebSocket': {
          endpoint: '/ws',
          description: 'WebSocket接続によるリアルタイム通信',
          example: {
            javascript: `const ws = new WebSocket('${req.protocol === 'https' ?
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[1][0]++, 'wss') :
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[1][1]++, 'ws')}://${req.get('host')}/ws');
ws.onmessage = (event) => {
  const message = JSON.parse(event.data);
  console.log('受信メッセージ:', message);
};
ws.send(JSON.stringify({
  type: 'subscribe',
  topics: ['all']
}));`
          }
        }
      },
      multiEventFeatures: {
        '複数イベント一括作成': {
          endpoint: '/multi-events/create-batch',
          description: '複数のイベントを一括で作成',
          authentication: 'Admin Required'
        },
        '並行イベント管理': {
          endpoint: '/multi-events/concurrent',
          description: '同時実行中のイベント管理',
          authentication: 'Admin Required'
        },
        'リアルタイムダッシュボード': {
          endpoint: '/multi-events/dashboard',
          description: 'マルチイベント管理ダッシュボード',
          authentication: 'Admin Required'
        }
      },
      errorHandling: {
        '400 Bad Request': '不正なリクエスト（バリデーションエラー）',
        '401 Unauthorized': '認証が必要',
        '403 Forbidden': 'アクセス権限なし',
        '404 Not Found': 'リソースが見つからない',
        '409 Conflict': '重複データ（例：重複登録）',
        '429 Too Many Requests': 'レート制限に達した',
        '500 Internal Server Error': 'サーバー内部エラー'
      },
      nextSteps: ['詳細なAPI仕様は /api/docs で確認してください', 'WebSocketやSSEを使用したリアルタイム機能を試してみてください', '管理者機能を使用する場合は、適切な認証トークンを取得してください', 'GitHub Repositoryでソースコードとより詳しいドキュメントを確認できます']
    });
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[33]++;
    res.json({
      success: true,
      data: quickstartGuide
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[34]++;
    logger.error('Failed to generate quickstart guide:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[35]++;
    res.status(500).json({
      success: false,
      message: 'Failed to generate quickstart guide',
      error: error.message
    });
  }
});

/**
 * APIステータスとメトリクス
 * GET /api/docs/status
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[36]++;
router.get('/status', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[3]++;
  cov_1a81gl3a9v().s[37]++;
  try {
    const apiStatus =
    /* istanbul ignore next */
    (cov_1a81gl3a9v().s[38]++, {
      api: {
        version: swaggerDocument.info.version,
        title: swaggerDocument.info.title,
        description: swaggerDocument.info.description,
        contact: swaggerDocument.info.contact,
        license: swaggerDocument.info.license
      },
      endpoints: {
        total: Object.keys(
        /* istanbul ignore next */
        (cov_1a81gl3a9v().b[2][0]++, swaggerDocument.paths) ||
        /* istanbul ignore next */
        (cov_1a81gl3a9v().b[2][1]++, {})).length,
        byMethod: {},
        byTag: {}
      },
      features: {
        authentication: ['JWT Bearer Token', 'API Key'],
        realTime: ['WebSocket', 'Server-Sent Events'],
        multiEvent: ['Batch Creation', 'Concurrent Management', 'Analytics'],
        monitoring: ['Health Checks', 'Rate Limiting', 'Error Tracking']
      },
      lastUpdated: new Date().toISOString(),
      documentation: {
        swagger: '/api/docs',
        openapi_json: '/api/docs/openapi.json',
        openapi_yaml: '/api/docs/openapi.yaml',
        quickstart: '/api/docs/quickstart'
      }
    });

    // エンドポイント統計の計算
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[39]++;
    if (swaggerDocument.paths) {
      /* istanbul ignore next */
      cov_1a81gl3a9v().b[3][0]++;
      cov_1a81gl3a9v().s[40]++;
      Object.entries(swaggerDocument.paths).forEach(([path, methods]) => {
        /* istanbul ignore next */
        cov_1a81gl3a9v().f[4]++;
        cov_1a81gl3a9v().s[41]++;
        Object.keys(methods).forEach(method => {
          /* istanbul ignore next */
          cov_1a81gl3a9v().f[5]++;
          cov_1a81gl3a9v().s[42]++;
          if (method !== 'parameters') {
            /* istanbul ignore next */
            cov_1a81gl3a9v().b[4][0]++;
            cov_1a81gl3a9v().s[43]++;
            apiStatus.endpoints.byMethod[method.toUpperCase()] = (
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[5][0]++, apiStatus.endpoints.byMethod[method.toUpperCase()]) ||
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[5][1]++, 0)) + 1;
            const tags =
            /* istanbul ignore next */
            (cov_1a81gl3a9v().s[44]++,
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[6][0]++, methods[method].tags) ||
            /* istanbul ignore next */
            (cov_1a81gl3a9v().b[6][1]++, ['Untagged']));
            /* istanbul ignore next */
            cov_1a81gl3a9v().s[45]++;
            tags.forEach(tag => {
              /* istanbul ignore next */
              cov_1a81gl3a9v().f[6]++;
              cov_1a81gl3a9v().s[46]++;
              apiStatus.endpoints.byTag[tag] = (
              /* istanbul ignore next */
              (cov_1a81gl3a9v().b[7][0]++, apiStatus.endpoints.byTag[tag]) ||
              /* istanbul ignore next */
              (cov_1a81gl3a9v().b[7][1]++, 0)) + 1;
            });
          } else
          /* istanbul ignore next */
          {
            cov_1a81gl3a9v().b[4][1]++;
          }
        });
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a81gl3a9v().b[3][1]++;
    }
    cov_1a81gl3a9v().s[47]++;
    res.json({
      success: true,
      data: apiStatus
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[48]++;
    logger.error('Failed to get API status:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[49]++;
    res.status(500).json({
      success: false,
      message: 'Failed to get API status',
      error: error.message
    });
  }
});

/**
 * SDKとクライアントライブラリ情報
 * GET /api/docs/sdks
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[50]++;
router.get('/sdks', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[7]++;
  cov_1a81gl3a9v().s[51]++;
  try {
    const sdkInfo =
    /* istanbul ignore next */
    (cov_1a81gl3a9v().s[52]++, {
      title: 'Lightning Talk API - SDK & Client Libraries',
      description: 'API利用のためのSDKとクライアントライブラリ情報',
      officialSdks: {
        javascript: {
          name: 'lightning-talk-js-sdk',
          version: '1.0.0',
          description: 'JavaScript/TypeScript用公式SDK',
          installation: 'npm install lightning-talk-js-sdk',
          github: 'https://github.com/example/lightning-talk-js-sdk',
          example: `import { LightningTalkAPI } from 'lightning-talk-js-sdk';

const api = new LightningTalkAPI('${req.protocol}://${req.get('host')}/api');

// イベント取得
const events = await api.events.list();

// 参加者登録
const participant = await api.participants.register({
  name: 'テスト太郎',
  email: 'test@example.com',
  eventId: 'event-001',
  participationType: 'online'
});

// リアルタイム通知
api.notifications.onParticipantRegistered((data) => {
  console.log('新規参加者:', data);
});`
        },
        python: {
          name: 'lightning-talk-python-sdk',
          version: '1.0.0',
          description: 'Python用公式SDK',
          installation: 'pip install lightning-talk-python-sdk',
          github: 'https://github.com/example/lightning-talk-python-sdk',
          example: `from lightning_talk import LightningTalkAPI

api = LightningTalkAPI('${req.protocol}://${req.get('host')}/api')

# イベント取得
events = api.events.list()

# 参加者登録
participant = api.participants.register(
    name='テスト太郎',
    email='test@example.com',
    event_id='event-001',
    participation_type='online'
)

# 統計情報取得（管理者権限必要）
api.set_admin_token('your-jwt-token')
stats = api.analytics.get_event_statistics('event-001')`
        }
      },
      codeGenerators: {
        openapi_generator: {
          description: 'OpenAPI Generatorを使用してクライアントコードを生成',
          installation: 'npm install @openapitools/openapi-generator-cli -g',
          usage: [`openapi-generator-cli generate -i ${req.protocol}://${req.get('host')}/api/docs/openapi.json -g javascript -o ./lightning-talk-client`, `openapi-generator-cli generate -i ${req.protocol}://${req.get('host')}/api/docs/openapi.json -g python -o ./lightning-talk-client-python`, `openapi-generator-cli generate -i ${req.protocol}://${req.get('host')}/api/docs/openapi.json -g typescript-axios -o ./lightning-talk-client-ts`],
          supportedLanguages: ['javascript', 'typescript-axios', 'typescript-node', 'python', 'java', 'csharp', 'go', 'php', 'ruby', 'swift']
        },
        swagger_codegen: {
          description: 'Swagger Codegenを使用してクライアントコードを生成',
          usage: [`swagger-codegen generate -i ${req.protocol}://${req.get('host')}/api/docs/openapi.json -l javascript -o ./client-js`, `swagger-codegen generate -i ${req.protocol}://${req.get('host')}/api/docs/openapi.json -l python -o ./client-python`]
        }
      },
      postmanCollection: {
        description: 'Postman用のAPIコレクション',
        import: {
          method: 'OpenAPI仕様をPostmanにインポート',
          url: `${req.protocol}://${req.get('host')}/api/docs/openapi.json`,
          steps: ['Postmanを開く', 'Import > Link タブを選択', `上記URLを入力: ${req.protocol}://${req.get('host')}/api/docs/openapi.json`, 'Importボタンをクリック']
        }
      },
      examples: {
        curl: {
          description: 'cURLを使用したAPIアクセス例',
          basicUsage: [`# イベント一覧取得
curl -X GET "${req.protocol}://${req.get('host')}/api/events"`, `# 参加者登録
curl -X POST "${req.protocol}://${req.get('host')}/api/participants/register" \\
  -H "Content-Type: application/json" \\
  -d '{
    "name": "テスト太郎",
    "email": "test@example.com",
    "eventId": "event-001",
    "participationType": "online"
  }'`, `# 管理者機能（JWTトークン必要）
curl -X GET "${req.protocol}://${req.get('host')}/api/participants/event-001" \\
  -H "Authorization: Bearer YOUR_JWT_TOKEN"`]
        },
        httpie: {
          description: 'HTTPieを使用したAPIアクセス例',
          basicUsage: [`# イベント一覧取得
http GET ${req.protocol}://${req.get('host')}/api/events`, `# 参加者登録
http POST ${req.protocol}://${req.get('host')}/api/participants/register \\
  name="テスト太郎" \\
  email="test@example.com" \\
  eventId="event-001" \\
  participationType="online"`, `# 管理者機能
http GET ${req.protocol}://${req.get('host')}/api/participants/event-001 \\
  Authorization:"Bearer YOUR_JWT_TOKEN"`]
        }
      },
      community: {
        discord: 'https://discord.gg/lightningtalk',
        github: 'https://github.com/example/lightningtalk-circle',
        discussions: 'https://github.com/example/lightningtalk-circle/discussions',
        issues: 'https://github.com/example/lightningtalk-circle/issues'
      }
    });
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[53]++;
    res.json({
      success: true,
      data: sdkInfo
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[54]++;
    logger.error('Failed to get SDK information:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[55]++;
    res.status(500).json({
      success: false,
      message: 'Failed to get SDK information',
      error: error.message
    });
  }
});

/**
 * APIの更新履歴
 * GET /api/docs/changelog
 */
/* istanbul ignore next */
cov_1a81gl3a9v().s[56]++;
router.get('/changelog', (req, res) => {
  /* istanbul ignore next */
  cov_1a81gl3a9v().f[8]++;
  cov_1a81gl3a9v().s[57]++;
  try {
    const changelog =
    /* istanbul ignore next */
    (cov_1a81gl3a9v().s[58]++, {
      title: 'Lightning Talk API - Changelog',
      description: 'APIの変更履歴とバージョン情報',
      currentVersion: swaggerDocument.info.version,
      versions: [{
        version: '1.0.0',
        releaseDate: '2025-06-22',
        type: 'major',
        changes: {
          added: ['基本的なイベント管理API', '参加者登録・管理機能', '発表提出・管理機能', 'リアルタイム通知機能（WebSocket, SSE）', '複数イベント同時管理機能', '詳細な分析・レポート機能', 'OpenAPI 3.0準拠のAPI仕様', 'Swagger UI統合ドキュメント'],
          changed: [],
          deprecated: [],
          removed: [],
          fixed: [],
          security: ['JWT認証システム', 'レート制限機能', '入力値検証強化', 'CORS設定最適化']
        },
        migration: {
          breakingChanges: [],
          recommendations: ['新規プロジェクトでは最新のSDKを使用してください', 'リアルタイム機能を活用してユーザーエクスペリエンスを向上させてください']
        }
      }],
      upcomingFeatures: [{
        version: '1.1.0',
        expectedRelease: '2025-07-15',
        features: ['GraphQL API対応', 'ファイルアップロード機能', 'カレンダー統合', 'メール通知テンプレートカスタマイズ']
      }, {
        version: '1.2.0',
        expectedRelease: '2025-08-30',
        features: ['マルチテナント対応', '決済システム統合', 'モバイルアプリ用API拡張', '高度な分析ダッシュボード']
      }],
      deprecationPolicy: {
        notice: 'APIの重要な変更は最低3ヶ月前に通知します',
        supportPeriod: 'メジャーバージョンは最低12ヶ月間サポートします',
        migration: '移行ガイドと互換性情報を提供します'
      }
    });
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[59]++;
    res.json({
      success: true,
      data: changelog
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[60]++;
    logger.error('Failed to get changelog:', error);
    /* istanbul ignore next */
    cov_1a81gl3a9v().s[61]++;
    res.status(500).json({
      success: false,
      message: 'Failed to get changelog',
      error: error.message
    });
  }
});
/* istanbul ignore next */
cov_1a81gl3a9v().s[62]++;
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,