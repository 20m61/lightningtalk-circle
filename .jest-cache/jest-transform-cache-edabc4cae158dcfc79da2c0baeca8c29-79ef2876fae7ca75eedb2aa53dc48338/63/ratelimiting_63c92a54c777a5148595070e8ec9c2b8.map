{"version":3,"names":["cov_kz438n1j9","actualCoverage","rateLimit","slowDown","attemptStore","s","Map","suspiciousIPs","Set","customKeyGenerator","req","f","userAgent","b","get","forwarded","ip","substring","createSecurityHandler","endpoint","res","key","now","Date","has","set","count","firstAttempt","lastAttempt","attempts","add","console","error","timeSpan","timestamp","toISOString","delete","warn","method","url","originalUrl","totalAttempts","status","json","success","message","retryAfter","createSlowDown","delayAfter","delayMs","windowMs","maxDelayMs","keyGenerator","skip","includes","endpointLimiters","auth","max","handler","standardHeaders","legacyHeaders","registration","email","upload","search","creation","admin","wordpress","api","progressiveSlowDown","light","medium","heavy","adaptiveRateLimit","next","strictLimiter","ddosProtection","conditionalRateLimit","path","rateLimitMonitor","getStats","size","suspiciousIPsList","Array","from","recentAttempts","entries","filter","_","data","map","clearSuspicious","clear","log","addToSuspicious","cleanupRateLimit","oneHourAgo","setInterval"],"sources":["rate-limiting.js"],"sourcesContent":["/**\n * Advanced Rate Limiting Configuration\n * Comprehensive rate limiting for all API endpoints\n */\n\nimport rateLimit from 'express-rate-limit';\nimport slowDown from 'express-slow-down';\n\n// Store for tracking failed attempts and suspicious activity\nconst attemptStore = new Map();\nconst suspiciousIPs = new Set();\n\n/**\n * Custom key generator for more granular rate limiting\n */\nconst customKeyGenerator = (req) => {\n    // Combine IP with user agent for better fingerprinting\n    const userAgent = req.get('User-Agent') || 'unknown';\n    const forwarded = req.get('X-Forwarded-For') || req.ip;\n    return `${forwarded}-${userAgent.substring(0, 50)}`;\n};\n\n/**\n * Enhanced handler with security logging and adaptive measures\n */\nconst createSecurityHandler = (endpoint) => {\n    return (req, res) => {\n        const key = customKeyGenerator(req);\n        const now = Date.now();\n\n        // Track failed attempts\n        if (!attemptStore.has(key)) {\n            attemptStore.set(key, { count: 0, firstAttempt: now, lastAttempt: now });\n        }\n\n        const attempts = attemptStore.get(key);\n        attempts.count++;\n        attempts.lastAttempt = now;\n\n        // Mark as suspicious after multiple rate limit hits\n        if (attempts.count > 5) {\n            suspiciousIPs.add(req.ip);\n            console.error('Suspicious activity detected:', {\n                ip: req.ip,\n                userAgent: req.get('User-Agent'),\n                endpoint: endpoint,\n                attempts: attempts.count,\n                timeSpan: now - attempts.firstAttempt,\n                timestamp: new Date().toISOString()\n            });\n        }\n\n        // Clean old entries (older than 1 hour)\n        if (now - attempts.firstAttempt > 3600000) {\n            attemptStore.delete(key);\n        }\n\n        // Log rate limit hit\n        console.warn('Rate limit exceeded:', {\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            endpoint: endpoint,\n            method: req.method,\n            url: req.originalUrl,\n            totalAttempts: attempts.count,\n            timestamp: new Date().toISOString()\n        });\n\n        res.status(429).json({\n            success: false,\n            message: 'Rate limit exceeded',\n            endpoint: endpoint,\n            retryAfter: 3600,\n            timestamp: new Date().toISOString()\n        });\n    };\n};\n\n/**\n * Progressive delay for repeated requests\n */\nconst createSlowDown = (delayAfter, delayMs) => {\n    return slowDown({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        delayAfter: delayAfter,\n        delayMs: delayMs,\n        maxDelayMs: 20000, // Max 20 second delay\n        keyGenerator: customKeyGenerator,\n        skip: (req) => {\n            // Skip delay for health checks\n            return req.url.includes('/health');\n        }\n    });\n};\n\n/**\n * Endpoint-specific rate limiters\n */\nexport const endpointLimiters = {\n    // Authentication endpoints (very strict)\n    auth: rateLimit({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 5,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('auth'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // Registration endpoints\n    registration: rateLimit({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 5,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('registration'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // Email endpoints\n    email: rateLimit({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 10,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('email'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // File upload endpoints\n    upload: rateLimit({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 20,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('upload'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // Search endpoints\n    search: rateLimit({\n        windowMs: 5 * 60 * 1000, // 5 minutes\n        max: 100,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('search'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // API creation endpoints (POST/PUT/DELETE)\n    creation: rateLimit({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 30,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('creation'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // Admin endpoints\n    admin: rateLimit({\n        windowMs: 10 * 60 * 1000, // 10 minutes\n        max: 50,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('admin'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // WordPress integration endpoints\n    wordpress: rateLimit({\n        windowMs: 60 * 60 * 1000, // 1 hour\n        max: 30,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('wordpress'),\n        standardHeaders: true,\n        legacyHeaders: false\n    }),\n\n    // General API endpoints\n    api: rateLimit({\n        windowMs: 15 * 60 * 1000, // 15 minutes\n        max: 100,\n        keyGenerator: customKeyGenerator,\n        handler: createSecurityHandler('api'),\n        standardHeaders: true,\n        legacyHeaders: false\n    })\n};\n\n/**\n * Progressive slow-down middleware\n */\nexport const progressiveSlowDown = {\n    // Slow down after 20 requests\n    light: createSlowDown(20, 500),\n    \n    // Slow down after 10 requests\n    medium: createSlowDown(10, 1000),\n    \n    // Slow down after 5 requests\n    heavy: createSlowDown(5, 2000)\n};\n\n/**\n * Adaptive rate limiting based on request patterns\n */\nexport const adaptiveRateLimit = (req, res, next) => {\n    const ip = req.ip;\n    const key = customKeyGenerator(req);\n    \n    // Check if IP is marked as suspicious\n    if (suspiciousIPs.has(ip)) {\n        // Apply stricter limits for suspicious IPs\n        const strictLimiter = rateLimit({\n            windowMs: 60 * 60 * 1000, // 1 hour\n            max: 10, // Very low limit\n            keyGenerator: () => key,\n            handler: createSecurityHandler('suspicious'),\n            standardHeaders: true,\n            legacyHeaders: false\n        });\n        \n        return strictLimiter(req, res, next);\n    }\n    \n    next();\n};\n\n/**\n * DDoS protection middleware\n */\nexport const ddosProtection = rateLimit({\n    windowMs: 1 * 60 * 1000, // 1 minute\n    max: 200, // Allow up to 200 requests per minute per IP\n    keyGenerator: (req) => req.ip,\n    handler: (req, res) => {\n        console.error('Potential DDoS attack detected:', {\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            timestamp: new Date().toISOString()\n        });\n        \n        res.status(429).json({\n            success: false,\n            message: 'Too many requests - potential DDoS detected',\n            timestamp: new Date().toISOString()\n        });\n    },\n    standardHeaders: true,\n    legacyHeaders: false\n});\n\n/**\n * Conditional rate limiting based on request type\n */\nexport const conditionalRateLimit = (req, res, next) => {\n    const method = req.method;\n    const path = req.path;\n    \n    // Apply different limits based on operation type\n    if (method === 'GET' && path.includes('/health')) {\n        // No limits for health checks\n        return next();\n    }\n    \n    if (method === 'POST' && path.includes('/register')) {\n        return endpointLimiters.registration(req, res, next);\n    }\n    \n    if (method === 'POST' && path.includes('/email')) {\n        return endpointLimiters.email(req, res, next);\n    }\n    \n    if (['POST', 'PUT', 'DELETE'].includes(method)) {\n        return endpointLimiters.creation(req, res, next);\n    }\n    \n    // Default to general API limits\n    return endpointLimiters.api(req, res, next);\n};\n\n/**\n * Rate limit monitoring and reporting\n */\nexport const rateLimitMonitor = {\n    getStats: () => {\n        return {\n            totalAttempts: attemptStore.size,\n            suspiciousIPs: suspiciousIPs.size,\n            suspiciousIPsList: Array.from(suspiciousIPs),\n            recentAttempts: Array.from(attemptStore.entries())\n                .filter(([_, data]) => Date.now() - data.lastAttempt < 3600000)\n                .map(([key, data]) => ({\n                    key: key.substring(0, 50),\n                    attempts: data.count,\n                    timeSpan: Date.now() - data.firstAttempt\n                })),\n            timestamp: new Date().toISOString()\n        };\n    },\n    \n    clearSuspicious: () => {\n        suspiciousIPs.clear();\n        console.log('Suspicious IPs list cleared');\n    },\n    \n    addToSuspicious: (ip) => {\n        suspiciousIPs.add(ip);\n        console.warn('IP added to suspicious list:', ip);\n    }\n};\n\n/**\n * Cleanup middleware to prevent memory leaks\n */\nexport const cleanupRateLimit = () => {\n    const now = Date.now();\n    const oneHourAgo = now - 3600000;\n    \n    // Clean old attempt records\n    for (const [key, data] of attemptStore.entries()) {\n        if (data.lastAttempt < oneHourAgo) {\n            attemptStore.delete(key);\n        }\n    }\n    \n    console.log('Rate limit cleanup completed');\n};\n\n// Run cleanup every 30 minutes\nsetInterval(cleanupRateLimit, 30 * 60 * 1000);\n\nexport default {\n    endpointLimiters,\n    progressiveSlowDown,\n    adaptiveRateLimit,\n    ddosProtection,\n    conditionalRateLimit,\n    rateLimitMonitor,\n    cleanupRateLimit\n};"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ;AACA;AACA;AACA;;AAEA,OAAOE,SAAS,MAAM,oBAAoB;AAC1C,OAAOC,QAAQ,MAAM,mBAAmB;;AAExC;AACA,MAAMC,YAAY;AAAA;AAAA,CAAAJ,aAAA,GAAAK,CAAA,OAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B,MAAMC,aAAa;AAAA;AAAA,CAAAP,aAAA,GAAAK,CAAA,OAAG,IAAIG,GAAG,CAAC,CAAC;;AAE/B;AACA;AACA;AAFA;AAAAR,aAAA,GAAAK,CAAA;AAGA,MAAMI,kBAAkB,GAAIC,GAAG,IAAK;EAAA;EAAAV,aAAA,GAAAW,CAAA;EAChC;EACA,MAAMC,SAAS;EAAA;EAAA,CAAAZ,aAAA,GAAAK,CAAA;EAAG;EAAA,CAAAL,aAAA,GAAAa,CAAA,UAAAH,GAAG,CAACI,GAAG,CAAC,YAAY,CAAC;EAAA;EAAA,CAAAd,aAAA,GAAAa,CAAA,UAAI,SAAS;EACpD,MAAME,SAAS;EAAA;EAAA,CAAAf,aAAA,GAAAK,CAAA;EAAG;EAAA,CAAAL,aAAA,GAAAa,CAAA,UAAAH,GAAG,CAACI,GAAG,CAAC,iBAAiB,CAAC;EAAA;EAAA,CAAAd,aAAA,GAAAa,CAAA,UAAIH,GAAG,CAACM,EAAE;EAAC;EAAAhB,aAAA,GAAAK,CAAA;EACvD,OAAO,GAAGU,SAAS,IAAIH,SAAS,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;AACvD,CAAC;;AAED;AACA;AACA;AAFA;AAAAjB,aAAA,GAAAK,CAAA;AAGA,MAAMa,qBAAqB,GAAIC,QAAQ,IAAK;EAAA;EAAAnB,aAAA,GAAAW,CAAA;EAAAX,aAAA,GAAAK,CAAA;EACxC,OAAO,CAACK,GAAG,EAAEU,GAAG,KAAK;IAAA;IAAApB,aAAA,GAAAW,CAAA;IACjB,MAAMU,GAAG;IAAA;IAAA,CAAArB,aAAA,GAAAK,CAAA,OAAGI,kBAAkB,CAACC,GAAG,CAAC;IACnC,MAAMY,GAAG;IAAA;IAAA,CAAAtB,aAAA,GAAAK,CAAA,OAAGkB,IAAI,CAACD,GAAG,CAAC,CAAC;;IAEtB;IAAA;IAAAtB,aAAA,GAAAK,CAAA;IACA,IAAI,CAACD,YAAY,CAACoB,GAAG,CAACH,GAAG,CAAC,EAAE;MAAA;MAAArB,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAK,CAAA;MACxBD,YAAY,CAACqB,GAAG,CAACJ,GAAG,EAAE;QAAEK,KAAK,EAAE,CAAC;QAAEC,YAAY,EAAEL,GAAG;QAAEM,WAAW,EAAEN;MAAI,CAAC,CAAC;IAC5E,CAAC;IAAA;IAAA;MAAAtB,aAAA,GAAAa,CAAA;IAAA;IAED,MAAMgB,QAAQ;IAAA;IAAA,CAAA7B,aAAA,GAAAK,CAAA,QAAGD,YAAY,CAACU,GAAG,CAACO,GAAG,CAAC;IAAC;IAAArB,aAAA,GAAAK,CAAA;IACvCwB,QAAQ,CAACH,KAAK,EAAE;IAAC;IAAA1B,aAAA,GAAAK,CAAA;IACjBwB,QAAQ,CAACD,WAAW,GAAGN,GAAG;;IAE1B;IAAA;IAAAtB,aAAA,GAAAK,CAAA;IACA,IAAIwB,QAAQ,CAACH,KAAK,GAAG,CAAC,EAAE;MAAA;MAAA1B,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAK,CAAA;MACpBE,aAAa,CAACuB,GAAG,CAACpB,GAAG,CAACM,EAAE,CAAC;MAAC;MAAAhB,aAAA,GAAAK,CAAA;MAC1B0B,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAE;QAC3ChB,EAAE,EAAEN,GAAG,CAACM,EAAE;QACVJ,SAAS,EAAEF,GAAG,CAACI,GAAG,CAAC,YAAY,CAAC;QAChCK,QAAQ,EAAEA,QAAQ;QAClBU,QAAQ,EAAEA,QAAQ,CAACH,KAAK;QACxBO,QAAQ,EAAEX,GAAG,GAAGO,QAAQ,CAACF,YAAY;QACrCO,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;MACtC,CAAC,CAAC;IACN,CAAC;IAAA;IAAA;MAAAnC,aAAA,GAAAa,CAAA;IAAA;;IAED;IAAAb,aAAA,GAAAK,CAAA;IACA,IAAIiB,GAAG,GAAGO,QAAQ,CAACF,YAAY,GAAG,OAAO,EAAE;MAAA;MAAA3B,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAK,CAAA;MACvCD,YAAY,CAACgC,MAAM,CAACf,GAAG,CAAC;IAC5B,CAAC;IAAA;IAAA;MAAArB,aAAA,GAAAa,CAAA;IAAA;;IAED;IAAAb,aAAA,GAAAK,CAAA;IACA0B,OAAO,CAACM,IAAI,CAAC,sBAAsB,EAAE;MACjCrB,EAAE,EAAEN,GAAG,CAACM,EAAE;MACVJ,SAAS,EAAEF,GAAG,CAACI,GAAG,CAAC,YAAY,CAAC;MAChCK,QAAQ,EAAEA,QAAQ;MAClBmB,MAAM,EAAE5B,GAAG,CAAC4B,MAAM;MAClBC,GAAG,EAAE7B,GAAG,CAAC8B,WAAW;MACpBC,aAAa,EAAEZ,QAAQ,CAACH,KAAK;MAC7BQ,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC,CAAC;IAAC;IAAAnC,aAAA,GAAAK,CAAA;IAEHe,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,qBAAqB;MAC9B1B,QAAQ,EAAEA,QAAQ;MAClB2B,UAAU,EAAE,IAAI;MAChBZ,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC,CAAC;EACN,CAAC;AACL,CAAC;;AAED;AACA;AACA;AAFA;AAAAnC,aAAA,GAAAK,CAAA;AAGA,MAAM0C,cAAc,GAAGA,CAACC,UAAU,EAAEC,OAAO,KAAK;EAAA;EAAAjD,aAAA,GAAAW,CAAA;EAAAX,aAAA,GAAAK,CAAA;EAC5C,OAAOF,QAAQ,CAAC;IACZ+C,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BF,UAAU,EAAEA,UAAU;IACtBC,OAAO,EAAEA,OAAO;IAChBE,UAAU,EAAE,KAAK;IAAE;IACnBC,YAAY,EAAE3C,kBAAkB;IAChC4C,IAAI,EAAG3C,GAAG,IAAK;MAAA;MAAAV,aAAA,GAAAW,CAAA;MAAAX,aAAA,GAAAK,CAAA;MACX;MACA,OAAOK,GAAG,CAAC6B,GAAG,CAACe,QAAQ,CAAC,SAAS,CAAC;IACtC;EACJ,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB;AAAA;AAAA,CAAAvD,aAAA,GAAAK,CAAA,QAAG;EAC5B;EACAmD,IAAI,EAAEtD,SAAS,CAAC;IACZgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,CAAC;IACNL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,MAAM,CAAC;IACtCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAC,YAAY,EAAE3D,SAAS,CAAC;IACpBgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,CAAC;IACNL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,cAAc,CAAC;IAC9CyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAE,KAAK,EAAE5D,SAAS,CAAC;IACbgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,EAAE;IACPL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,OAAO,CAAC;IACvCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAG,MAAM,EAAE7D,SAAS,CAAC;IACdgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,EAAE;IACPL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,QAAQ,CAAC;IACxCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAI,MAAM,EAAE9D,SAAS,CAAC;IACdgD,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IACzBO,GAAG,EAAE,GAAG;IACRL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,QAAQ,CAAC;IACxCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAK,QAAQ,EAAE/D,SAAS,CAAC;IAChBgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,EAAE;IACPL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,UAAU,CAAC;IAC1CyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAM,KAAK,EAAEhE,SAAS,CAAC;IACbgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,EAAE;IACPL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,OAAO,CAAC;IACvCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAO,SAAS,EAAEjE,SAAS,CAAC;IACjBgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,EAAE;IACPL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,WAAW,CAAC;IAC3CyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC,CAAC;EAEF;EACAQ,GAAG,EAAElE,SAAS,CAAC;IACXgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC1BO,GAAG,EAAE,GAAG;IACRL,YAAY,EAAE3C,kBAAkB;IAChCiD,OAAO,EAAExC,qBAAqB,CAAC,KAAK,CAAC;IACrCyC,eAAe,EAAE,IAAI;IACrBC,aAAa,EAAE;EACnB,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMS,mBAAmB;AAAA;AAAA,CAAArE,aAAA,GAAAK,CAAA,QAAG;EAC/B;EACAiE,KAAK,EAAEvB,cAAc,CAAC,EAAE,EAAE,GAAG,CAAC;EAE9B;EACAwB,MAAM,EAAExB,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC;EAEhC;EACAyB,KAAK,EAAEzB,cAAc,CAAC,CAAC,EAAE,IAAI;AACjC,CAAC;;AAED;AACA;AACA;AAFA;AAAA/C,aAAA,GAAAK,CAAA;AAGA,OAAO,MAAMoE,iBAAiB,GAAGA,CAAC/D,GAAG,EAAEU,GAAG,EAAEsD,IAAI,KAAK;EAAA;EAAA1E,aAAA,GAAAW,CAAA;EACjD,MAAMK,EAAE;EAAA;EAAA,CAAAhB,aAAA,GAAAK,CAAA,QAAGK,GAAG,CAACM,EAAE;EACjB,MAAMK,GAAG;EAAA;EAAA,CAAArB,aAAA,GAAAK,CAAA,QAAGI,kBAAkB,CAACC,GAAG,CAAC;;EAEnC;EAAA;EAAAV,aAAA,GAAAK,CAAA;EACA,IAAIE,aAAa,CAACiB,GAAG,CAACR,EAAE,CAAC,EAAE;IAAA;IAAAhB,aAAA,GAAAa,CAAA;IACvB;IACA,MAAM8D,aAAa;IAAA;IAAA,CAAA3E,aAAA,GAAAK,CAAA,QAAGH,SAAS,CAAC;MAC5BgD,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;MAAE;MAC1BO,GAAG,EAAE,EAAE;MAAE;MACTL,YAAY,EAAEA,CAAA,KAAM/B;QAAAA;QAAAA,sBAAA;QAAAA,uBAAA;QAAAA,MAAA,CAAAA,GAAG;MAAD,CAAC;MACvBqC,OAAO,EAAExC,qBAAqB,CAAC,YAAY,CAAC;MAC5CyC,eAAe,EAAE,IAAI;MACrBC,aAAa,EAAE;IACnB,CAAC,CAAC;IAAC;IAAA5D,aAAA,GAAAK,CAAA;IAEH,OAAOsE,aAAa,CAACjE,GAAG,EAAEU,GAAG,EAAEsD,IAAI,CAAC;EACxC,CAAC;EAAA;EAAA;IAAA1E,aAAA,GAAAa,CAAA;EAAA;EAAAb,aAAA,GAAAK,CAAA;EAEDqE,IAAI,CAAC,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,cAAc;AAAA;AAAA,CAAA5E,aAAA,GAAAK,CAAA,QAAGH,SAAS,CAAC;EACpCgD,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;EAAE;EACzBO,GAAG,EAAE,GAAG;EAAE;EACVL,YAAY,EAAG1C,GAAG,IAAK;IAAA;IAAAV,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAK,CAAA;IAAA,OAAAK,GAAG,CAACM,EAAE;EAAD,CAAC;EAC7B0C,OAAO,EAAEA,CAAChD,GAAG,EAAEU,GAAG,KAAK;IAAA;IAAApB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAK,CAAA;IACnB0B,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAE;MAC7ChB,EAAE,EAAEN,GAAG,CAACM,EAAE;MACVJ,SAAS,EAAEF,GAAG,CAACI,GAAG,CAAC,YAAY,CAAC;MAChCoB,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC,CAAC;IAAC;IAAAnC,aAAA,GAAAK,CAAA;IAEHe,GAAG,CAACsB,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MACjBC,OAAO,EAAE,KAAK;MACdC,OAAO,EAAE,6CAA6C;MACtDX,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC,CAAC;EACN,CAAC;EACDwB,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AAFA;AAAA5D,aAAA,GAAAK,CAAA;AAGA,OAAO,MAAMwE,oBAAoB,GAAGA,CAACnE,GAAG,EAAEU,GAAG,EAAEsD,IAAI,KAAK;EAAA;EAAA1E,aAAA,GAAAW,CAAA;EACpD,MAAM2B,MAAM;EAAA;EAAA,CAAAtC,aAAA,GAAAK,CAAA,QAAGK,GAAG,CAAC4B,MAAM;EACzB,MAAMwC,IAAI;EAAA;EAAA,CAAA9E,aAAA,GAAAK,CAAA,QAAGK,GAAG,CAACoE,IAAI;;EAErB;EAAA;EAAA9E,aAAA,GAAAK,CAAA;EACA;EAAI;EAAA,CAAAL,aAAA,GAAAa,CAAA,UAAAyB,MAAM,KAAK,KAAK;EAAA;EAAA,CAAAtC,aAAA,GAAAa,CAAA,UAAIiE,IAAI,CAACxB,QAAQ,CAAC,SAAS,CAAC,GAAE;IAAA;IAAAtD,aAAA,GAAAa,CAAA;IAAAb,aAAA,GAAAK,CAAA;IAC9C;IACA,OAAOqE,IAAI,CAAC,CAAC;EACjB,CAAC;EAAA;EAAA;IAAA1E,aAAA,GAAAa,CAAA;EAAA;EAAAb,aAAA,GAAAK,CAAA;EAED;EAAI;EAAA,CAAAL,aAAA,GAAAa,CAAA,UAAAyB,MAAM,KAAK,MAAM;EAAA;EAAA,CAAAtC,aAAA,GAAAa,CAAA,UAAIiE,IAAI,CAACxB,QAAQ,CAAC,WAAW,CAAC,GAAE;IAAA;IAAAtD,aAAA,GAAAa,CAAA;IAAAb,aAAA,GAAAK,CAAA;IACjD,OAAOkD,gBAAgB,CAACM,YAAY,CAACnD,GAAG,EAAEU,GAAG,EAAEsD,IAAI,CAAC;EACxD,CAAC;EAAA;EAAA;IAAA1E,aAAA,GAAAa,CAAA;EAAA;EAAAb,aAAA,GAAAK,CAAA;EAED;EAAI;EAAA,CAAAL,aAAA,GAAAa,CAAA,WAAAyB,MAAM,KAAK,MAAM;EAAA;EAAA,CAAAtC,aAAA,GAAAa,CAAA,WAAIiE,IAAI,CAACxB,QAAQ,CAAC,QAAQ,CAAC,GAAE;IAAA;IAAAtD,aAAA,GAAAa,CAAA;IAAAb,aAAA,GAAAK,CAAA;IAC9C,OAAOkD,gBAAgB,CAACO,KAAK,CAACpD,GAAG,EAAEU,GAAG,EAAEsD,IAAI,CAAC;EACjD,CAAC;EAAA;EAAA;IAAA1E,aAAA,GAAAa,CAAA;EAAA;EAAAb,aAAA,GAAAK,CAAA;EAED,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAACiD,QAAQ,CAAChB,MAAM,CAAC,EAAE;IAAA;IAAAtC,aAAA,GAAAa,CAAA;IAAAb,aAAA,GAAAK,CAAA;IAC5C,OAAOkD,gBAAgB,CAACU,QAAQ,CAACvD,GAAG,EAAEU,GAAG,EAAEsD,IAAI,CAAC;EACpD,CAAC;EAAA;EAAA;IAAA1E,aAAA,GAAAa,CAAA;EAAA;;EAED;EAAAb,aAAA,GAAAK,CAAA;EACA,OAAOkD,gBAAgB,CAACa,GAAG,CAAC1D,GAAG,EAAEU,GAAG,EAAEsD,IAAI,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,gBAAgB;AAAA;AAAA,CAAA/E,aAAA,GAAAK,CAAA,QAAG;EAC5B2E,QAAQ,EAAEA,CAAA,KAAM;IAAA;IAAAhF,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAK,CAAA;IACZ,OAAO;MACHoC,aAAa,EAAErC,YAAY,CAAC6E,IAAI;MAChC1E,aAAa,EAAEA,aAAa,CAAC0E,IAAI;MACjCC,iBAAiB,EAAEC,KAAK,CAACC,IAAI,CAAC7E,aAAa,CAAC;MAC5C8E,cAAc,EAAEF,KAAK,CAACC,IAAI,CAAChF,YAAY,CAACkF,OAAO,CAAC,CAAC,CAAC,CAC7CC,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,IAAI,CAAC,KAAK;QAAA;QAAAzF,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAK,CAAA;QAAA,OAAAkB,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGmE,IAAI,CAAC7D,WAAW,GAAG,OAAO;MAAD,CAAC,CAAC,CAC9D8D,GAAG,CAAC,CAAC,CAACrE,GAAG,EAAEoE,IAAI,CAAC,KAAM;QAAA;QAAAzF,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAK,CAAA;QAAA;UACnBgB,GAAG,EAAEA,GAAG,CAACJ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UACzBY,QAAQ,EAAE4D,IAAI,CAAC/D,KAAK;UACpBO,QAAQ,EAAEV,IAAI,CAACD,GAAG,CAAC,CAAC,GAAGmE,IAAI,CAAC9D;QAChC,CAAC;MAAD,CAAE,CAAC;MACPO,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;IACtC,CAAC;EACL,CAAC;EAEDwD,eAAe,EAAEA,CAAA,KAAM;IAAA;IAAA3F,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAK,CAAA;IACnBE,aAAa,CAACqF,KAAK,CAAC,CAAC;IAAC;IAAA5F,aAAA,GAAAK,CAAA;IACtB0B,OAAO,CAAC8D,GAAG,CAAC,6BAA6B,CAAC;EAC9C,CAAC;EAEDC,eAAe,EAAG9E,EAAE,IAAK;IAAA;IAAAhB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAK,CAAA;IACrBE,aAAa,CAACuB,GAAG,CAACd,EAAE,CAAC;IAAC;IAAAhB,aAAA,GAAAK,CAAA;IACtB0B,OAAO,CAACM,IAAI,CAAC,8BAA8B,EAAErB,EAAE,CAAC;EACpD;AACJ,CAAC;;AAED;AACA;AACA;AAFA;AAAAhB,aAAA,GAAAK,CAAA;AAGA,OAAO,MAAM0F,gBAAgB,GAAGA,CAAA,KAAM;EAAA;EAAA/F,aAAA,GAAAW,CAAA;EAClC,MAAMW,GAAG;EAAA;EAAA,CAAAtB,aAAA,GAAAK,CAAA,QAAGkB,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAM0E,UAAU;EAAA;EAAA,CAAAhG,aAAA,GAAAK,CAAA,QAAGiB,GAAG,GAAG,OAAO;;EAEhC;EAAA;EAAAtB,aAAA,GAAAK,CAAA;EACA,KAAK,MAAM,CAACgB,GAAG,EAAEoE,IAAI,CAAC,IAAIrF,YAAY,CAACkF,OAAO,CAAC,CAAC,EAAE;IAAA;IAAAtF,aAAA,GAAAK,CAAA;IAC9C,IAAIoF,IAAI,CAAC7D,WAAW,GAAGoE,UAAU,EAAE;MAAA;MAAAhG,aAAA,GAAAa,CAAA;MAAAb,aAAA,GAAAK,CAAA;MAC/BD,YAAY,CAACgC,MAAM,CAACf,GAAG,CAAC;IAC5B,CAAC;IAAA;IAAA;MAAArB,aAAA,GAAAa,CAAA;IAAA;EACL;EAAC;EAAAb,aAAA,GAAAK,CAAA;EAED0B,OAAO,CAAC8D,GAAG,CAAC,8BAA8B,CAAC;AAC/C,CAAC;;AAED;AAAA;AAAA7F,aAAA,GAAAK,CAAA;AACA4F,WAAW,CAACF,gBAAgB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AAE7C,eAAe;EACXxC,gBAAgB;EAChBc,mBAAmB;EACnBI,iBAAiB;EACjBG,cAAc;EACdC,oBAAoB;EACpBE,gBAAgB;EAChBgB;AACJ,CAAC","ignoreList":[]}