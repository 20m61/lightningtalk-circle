6cf95492d131658d7709c07471068830
"use strict";

var _globals = require("@jest/globals");
var _issues = require("../fixtures/issues.js");
/**
 * Issue バリデーター ユニットテスト
 */

// バリデーター関数（実装予定）
function validateIssue(issue) {
  if (!issue) {
    throw new Error('Issue is required');
  }
  if (!issue.title || typeof issue.title !== 'string' || issue.title.trim() === '') {
    throw new Error('Issue title is required');
  }
  if (!issue.description || typeof issue.description !== 'string' || issue.description.trim() === '') {
    throw new Error('Issue description is required');
  }
  if (!Array.isArray(issue.labels) || issue.labels.length === 0) {
    throw new Error('Issue must have at least one label');
  }
  const validPriorities = ['low', 'medium', 'high'];
  if (!issue.priority || !validPriorities.includes(issue.priority)) {
    throw new Error('Issue must have a valid priority (low, medium, high)');
  }
  return true;
}
function validateIssueLabels(labels) {
  if (!Array.isArray(labels)) {
    return false;
  }

  // 必須ラベルの検証
  const hasTypeLabel = labels.some(label => ['bug', 'enhancement', 'documentation', 'infrastructure'].includes(label));
  const hasPriorityLabel = labels.some(label => ['low-priority', 'medium-priority', 'high-priority'].includes(label));
  return hasTypeLabel && hasPriorityLabel;
}
(0, _globals.describe)('Issue Validator', () => {
  (0, _globals.describe)('validateIssue', () => {
    (0, _globals.it)('should validate a valid issue structure', () => {
      const validIssue = _issues.issueFixtures.valid.infrastructure;
      (0, _globals.expect)(() => validateIssue(validIssue)).not.toThrow();
      (0, _globals.expect)(validateIssue(validIssue)).toBe(true);
    });
    (0, _globals.it)('should reject issue without title', () => {
      const invalidIssue = _issues.issueFixtures.invalid.missingTitle;
      (0, _globals.expect)(() => validateIssue(invalidIssue)).toThrow('Issue title is required');
    });
    (0, _globals.it)('should reject issue without description', () => {
      const invalidIssue = _issues.issueFixtures.invalid.missingDescription;
      (0, _globals.expect)(() => validateIssue(invalidIssue)).toThrow('Issue description is required');
    });
    (0, _globals.it)('should reject issue with empty labels', () => {
      const invalidIssue = _issues.issueFixtures.invalid.emptyLabels;
      (0, _globals.expect)(() => validateIssue(invalidIssue)).toThrow('Issue must have at least one label');
    });
    (0, _globals.it)('should reject issue with invalid priority', () => {
      const invalidIssue = _issues.issueFixtures.invalid.invalidPriority;
      (0, _globals.expect)(() => validateIssue(invalidIssue)).toThrow('Issue must have a valid priority (low, medium, high)');
    });
    (0, _globals.it)('should reject null or undefined issue', () => {
      (0, _globals.expect)(() => validateIssue(null)).toThrow('Issue is required');
      (0, _globals.expect)(() => validateIssue(undefined)).toThrow('Issue is required');
    });
    (0, _globals.it)('should reject issue with empty title', () => {
      const issueWithEmptyTitle = {
        ..._issues.issueFixtures.valid.infrastructure,
        title: ''
      };
      (0, _globals.expect)(() => validateIssue(issueWithEmptyTitle)).toThrow('Issue title is required');
    });
    (0, _globals.it)('should reject issue with whitespace-only title', () => {
      const issueWithWhitespaceTitle = {
        ..._issues.issueFixtures.valid.infrastructure,
        title: '   '
      };
      (0, _globals.expect)(() => validateIssue(issueWithWhitespaceTitle)).toThrow('Issue title is required');
    });
  });
  (0, _globals.describe)('validateIssueLabels', () => {
    (0, _globals.it)('should validate labels with type and priority', () => {
      const validLabels = ['enhancement', 'frontend', 'high-priority'];
      (0, _globals.expect)(validateIssueLabels(validLabels)).toBe(true);
    });
    (0, _globals.it)('should reject labels without type', () => {
      const labelsWithoutType = ['frontend', 'high-priority'];
      (0, _globals.expect)(validateIssueLabels(labelsWithoutType)).toBe(false);
    });
    (0, _globals.it)('should reject labels without priority', () => {
      const labelsWithoutPriority = ['enhancement', 'frontend'];
      (0, _globals.expect)(validateIssueLabels(labelsWithoutPriority)).toBe(false);
    });
    (0, _globals.it)('should reject non-array labels', () => {
      (0, _globals.expect)(validateIssueLabels('not-array')).toBe(false);
      (0, _globals.expect)(validateIssueLabels(null)).toBe(false);
      (0, _globals.expect)(validateIssueLabels(undefined)).toBe(false);
    });
  });
  (0, _globals.describe)('Edge Cases', () => {
    (0, _globals.it)('should handle very long titles', () => {
      const longTitle = 'A'.repeat(1000);
      const issueWithLongTitle = (0, _issues.generateTestIssue)({
        title: longTitle
      });
      (0, _globals.expect)(() => validateIssue(issueWithLongTitle)).not.toThrow();
    });
    (0, _globals.it)('should handle special characters in title', () => {
      const specialTitle = 'Fix #123: Handle UTF-8 characters 日本語 🚀';
      const issueWithSpecialTitle = (0, _issues.generateTestIssue)({
        title: specialTitle
      });
      (0, _globals.expect)(() => validateIssue(issueWithSpecialTitle)).not.toThrow();
    });
    (0, _globals.it)('should handle multiple labels of same type', () => {
      const multipleLabels = ['enhancement', 'bug', 'high-priority', 'medium-priority'];
      const issueWithMultipleLabels = (0, _issues.generateTestIssue)({
        labels: multipleLabels
      });
      (0, _globals.expect)(() => validateIssue(issueWithMultipleLabels)).not.toThrow();
    });
  });
  (0, _globals.describe)('Custom Matchers', () => {
    (0, _globals.it)('should use custom toBeValidIssue matcher', () => {
      const validIssue = _issues.issueFixtures.valid.feature;
      (0, _globals.expect)(validIssue).toBeValidIssue();
    });
    (0, _globals.it)('should fail custom matcher for invalid issue', () => {
      const invalidIssue = _issues.issueFixtures.invalid.missingTitle;
      (0, _globals.expect)(invalidIssue).not.toBeValidIssue();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,