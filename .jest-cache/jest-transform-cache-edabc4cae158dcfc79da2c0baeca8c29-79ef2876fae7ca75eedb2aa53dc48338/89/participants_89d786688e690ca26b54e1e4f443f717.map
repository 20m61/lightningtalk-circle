{"version":3,"names":["cov_y6ek39cwm","actualCoverage","express","body","param","query","validationResult","rateLimit","router","s","Router","registrationLimiter","windowMs","max","message","error","retryAfter","validateRegistration","trim","isLength","min","withMessage","isEmail","normalizeEmail","isIn","optional","isBoolean","validateSpeakerRegistration","handleValidationErrors","req","res","next","f","errors","isEmpty","b","status","json","details","array","post","database","emailService","eventService","app","locals","name","email","participationType","eventId","newsletter","event","findById","getCurrentEvent","registrationOpen","existingParticipant","findOne","id","participant","registeredAt","createdAt","currentParticipants","count","settings","getSettings","maxParticipants","registrationSettings","create","requireApproval","checkedIn","registrationSource","ipAddress","ip","userAgent","get","emailEnabled","notificationSettings","emailOnRegistration","sendRegistrationConfirmation","emailError","console","trackAnalytics","source","success","title","date","talkTitle","talkDescription","category","talkSubmissionOpen","currentTalks","maxTalks","isSpeaker","talk","description","speakerId","speakerName","speakerEmail","duration","talkDuration","talkSettings","submissionSource","emailOnTalkSubmission","sendSpeakerConfirmation","submittedAt","params","limit","offset","sortBy","sortOrder","filter","undefined","participants","findAll","sort","a","aValue","bValue","total","length","paginatedParticipants","slice","parseInt","sanitizedParticipants","map","pagination","hasMore","summary","confirmed","p","pending","speakers","onsite","online","put","updates","updatedParticipant","update","from","to","updatedAt","delete","talks","participantId"],"sources":["participants.js"],"sourcesContent":["/**\n * Participants API Routes\n * Handle participant registration, management, and queries\n */\n\nimport express from 'express';\nimport { body, param, query, validationResult } from 'express-validator';\nimport rateLimit from 'express-rate-limit';\n\nconst router = express.Router();\n\n// Rate limiting for registration\nconst registrationLimiter = rateLimit({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    max: 3, // limit each IP to 3 registrations per hour\n    message: {\n        error: 'Too many registration attempts. Please try again later.',\n        retryAfter: 3600\n    }\n});\n\n// Validation middleware\nconst validateRegistration = [\n    body('name')\n        .trim()\n        .isLength({ min: 1, max: 100 })\n        .withMessage('名前は1文字以上100文字以内で入力してください'),\n    body('email')\n        .isEmail()\n        .normalizeEmail()\n        .withMessage('有効なメールアドレスを入力してください'),\n    body('participationType')\n        .isIn(['onsite', 'online', 'undecided'])\n        .withMessage('参加方法を選択してください'),\n    body('eventId')\n        .optional()\n        .isLength({ min: 1 })\n        .withMessage('イベントIDが無効です'),\n    body('message')\n        .optional()\n        .isLength({ max: 1000 })\n        .withMessage('メッセージは1000文字以内で入力してください'),\n    body('newsletter')\n        .optional()\n        .isBoolean()\n        .withMessage('ニュースレター購読設定が無効です')\n];\n\nconst validateSpeakerRegistration = [\n    ...validateRegistration,\n    body('talkTitle')\n        .trim()\n        .isLength({ min: 1, max: 200 })\n        .withMessage('発表タイトルは1文字以上200文字以内で入力してください'),\n    body('talkDescription')\n        .trim()\n        .isLength({ min: 1, max: 2000 })\n        .withMessage('発表概要は1文字以上2000文字以内で入力してください'),\n    body('category')\n        .optional()\n        .isIn(['tech', 'hobby', 'learning', 'travel', 'food', 'game', 'lifehack', 'pet', 'garden', 'money', 'sports', 'music', 'other'])\n        .withMessage('有効なカテゴリーを選択してください')\n];\n\n// Helper function to handle validation errors\nconst handleValidationErrors = (req, res, next) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n            error: 'Validation failed',\n            details: errors.array()\n        });\n    }\n    next();\n};\n\n/**\n * POST /api/participants/register\n * Register a participant for an event\n */\nrouter.post('/register', registrationLimiter, validateRegistration, handleValidationErrors, async (req, res) => {\n    try {\n        const { database, emailService, eventService } = req.app.locals;\n        const {\n            name,\n            email,\n            participationType,\n            eventId,\n            message = '',\n            newsletter = false\n        } = req.body;\n\n        // Get current event if no eventId provided\n        const event = eventId ? \n            await database.findById('events', eventId) : \n            await database.getCurrentEvent();\n\n        if (!event) {\n            return res.status(404).json({\n                error: 'Event not found',\n                message: 'イベントが見つかりません'\n            });\n        }\n\n        // Check if registration is open\n        if (!event.registrationOpen) {\n            return res.status(400).json({\n                error: 'Registration closed',\n                message: 'このイベントの参加登録は締め切られています'\n            });\n        }\n\n        // Check for duplicate registration\n        const existingParticipant = await database.findOne('participants', {\n            email,\n            eventId: event.id\n        });\n\n        if (existingParticipant) {\n            return res.status(400).json({\n                error: 'Already registered',\n                message: 'このメールアドレスで既に登録されています',\n                participant: {\n                    id: existingParticipant.id,\n                    registeredAt: existingParticipant.createdAt\n                }\n            });\n        }\n\n        // Check capacity\n        const currentParticipants = await database.count('participants', { eventId: event.id });\n        const settings = await database.getSettings();\n        const maxParticipants = settings.registrationSettings?.maxParticipants || 100;\n\n        if (currentParticipants >= maxParticipants) {\n            return res.status(400).json({\n                error: 'Event full',\n                message: 'このイベントは定員に達しています'\n            });\n        }\n\n        // Create participant record\n        const participant = await database.create('participants', {\n            name,\n            email,\n            participationType,\n            eventId: event.id,\n            message,\n            newsletter,\n            status: settings.registrationSettings?.requireApproval ? 'pending' : 'confirmed',\n            checkedIn: false,\n            registrationSource: 'web',\n            ipAddress: req.ip,\n            userAgent: req.get('User-Agent')\n        });\n\n        // Send confirmation email\n        if (settings.emailEnabled && settings.notificationSettings?.emailOnRegistration) {\n            try {\n                await emailService.sendRegistrationConfirmation(participant, event);\n            } catch (emailError) {\n                console.error('Failed to send confirmation email:', emailError);\n                // Don't fail the registration if email fails\n            }\n        }\n\n        // Track analytics\n        await eventService.trackAnalytics(event.id, 'participant_registered', {\n            participationType,\n            source: 'web'\n        });\n\n        res.status(201).json({\n            success: true,\n            message: 'Registered successfully',\n            participant: {\n                id: participant.id,\n                name: participant.name,\n                participationType: participant.participationType,\n                status: participant.status,\n                registeredAt: participant.createdAt\n            },\n            event: {\n                id: event.id,\n                title: event.title,\n                date: event.date\n            }\n        });\n\n    } catch (error) {\n        console.error('Registration error:', error);\n        res.status(500).json({\n            error: 'Registration failed',\n            message: '登録処理中にエラーが発生しました。しばらく待ってから再度お試しください。'\n        });\n    }\n});\n\n/**\n * POST /api/participants/register-speaker\n * Register a speaker with talk submission\n */\nrouter.post('/register-speaker', registrationLimiter, validateSpeakerRegistration, handleValidationErrors, async (req, res) => {\n    try {\n        const { database, emailService, eventService } = req.app.locals;\n        const {\n            name,\n            email,\n            participationType,\n            eventId,\n            message = '',\n            newsletter = false,\n            talkTitle,\n            talkDescription,\n            category = 'other'\n        } = req.body;\n\n        // Get current event if no eventId provided\n        const event = eventId ? \n            await database.findById('events', eventId) : \n            await database.getCurrentEvent();\n\n        if (!event) {\n            return res.status(404).json({\n                error: 'Event not found',\n                message: 'イベントが見つかりません'\n            });\n        }\n\n        // Check if registration and talk submission are open\n        if (!event.registrationOpen || !event.talkSubmissionOpen) {\n            return res.status(400).json({\n                error: 'Registration or talk submission closed',\n                message: '参加登録または発表申込みが締め切られています'\n            });\n        }\n\n        // Check for duplicate registration\n        const existingParticipant = await database.findOne('participants', {\n            email,\n            eventId: event.id\n        });\n\n        if (existingParticipant) {\n            return res.status(400).json({\n                error: 'Already registered',\n                message: 'このメールアドレスで既に登録されています'\n            });\n        }\n\n        // Check talk slots\n        const currentTalks = await database.count('talks', { eventId: event.id });\n        const maxTalks = event.maxTalks || 20;\n\n        if (currentTalks >= maxTalks) {\n            return res.status(400).json({\n                error: 'Talk slots full',\n                message: '発表枠が満席です。聴講参加をご検討ください'\n            });\n        }\n\n        const settings = await database.getSettings();\n\n        // Create participant record\n        const participant = await database.create('participants', {\n            name,\n            email,\n            participationType,\n            eventId: event.id,\n            message,\n            newsletter,\n            status: settings.registrationSettings?.requireApproval ? 'pending' : 'confirmed',\n            checkedIn: false,\n            registrationSource: 'web',\n            isSpeaker: true,\n            ipAddress: req.ip,\n            userAgent: req.get('User-Agent')\n        });\n\n        // Create talk record\n        const talk = await database.create('talks', {\n            title: talkTitle,\n            description: talkDescription,\n            category,\n            eventId: event.id,\n            speakerId: participant.id,\n            speakerName: name,\n            speakerEmail: email,\n            duration: event.talkDuration || 5,\n            status: settings.talkSettings?.requireApproval ? 'pending' : 'confirmed',\n            submissionSource: 'web'\n        });\n\n        // Send confirmation email\n        if (settings.emailEnabled && settings.notificationSettings?.emailOnTalkSubmission) {\n            try {\n                await emailService.sendSpeakerConfirmation(participant, talk, event);\n            } catch (emailError) {\n                console.error('Failed to send speaker confirmation email:', emailError);\n            }\n        }\n\n        // Track analytics\n        await eventService.trackAnalytics(event.id, 'speaker_registered', {\n            participationType,\n            category,\n            source: 'web'\n        });\n\n        res.status(201).json({\n            success: true,\n            message: 'Speaker registration successful',\n            participant: {\n                id: participant.id,\n                name: participant.name,\n                participationType: participant.participationType,\n                status: participant.status,\n                isSpeaker: true,\n                registeredAt: participant.createdAt\n            },\n            talk: {\n                id: talk.id,\n                title: talk.title,\n                category: talk.category,\n                status: talk.status,\n                submittedAt: talk.createdAt\n            },\n            event: {\n                id: event.id,\n                title: event.title,\n                date: event.date\n            }\n        });\n\n    } catch (error) {\n        console.error('Speaker registration error:', error);\n        res.status(500).json({\n            error: 'Speaker registration failed',\n            message: '発表者登録処理中にエラーが発生しました。しばらく待ってから再度お試しください。'\n        });\n    }\n});\n\n/**\n * GET /api/participants/:eventId\n * Get participants for an event (admin only for now)\n */\nrouter.get('/:eventId', \n    param('eventId').isLength({ min: 1 }).withMessage('Event ID is required'),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database } = req.app.locals;\n            const { eventId } = req.params;\n            const { \n                status, \n                participationType, \n                isSpeaker,\n                limit = 50,\n                offset = 0,\n                sortBy = 'createdAt',\n                sortOrder = 'desc'\n            } = req.query;\n\n            // Build filter\n            const filter = { eventId };\n            if (status) filter.status = status;\n            if (participationType) filter.participationType = participationType;\n            if (isSpeaker !== undefined) filter.isSpeaker = isSpeaker === 'true';\n\n            // Get participants\n            let participants = await database.findAll('participants', filter);\n\n            // Sort\n            participants.sort((a, b) => {\n                const aValue = a[sortBy];\n                const bValue = b[sortBy];\n                if (sortOrder === 'desc') {\n                    return bValue > aValue ? 1 : -1;\n                }\n                return aValue > bValue ? 1 : -1;\n            });\n\n            // Paginate\n            const total = participants.length;\n            const paginatedParticipants = participants.slice(\n                parseInt(offset), \n                parseInt(offset) + parseInt(limit)\n            );\n\n            // Remove sensitive information\n            const sanitizedParticipants = paginatedParticipants.map(participant => ({\n                id: participant.id,\n                name: participant.name,\n                participationType: participant.participationType,\n                status: participant.status,\n                isSpeaker: participant.isSpeaker || false,\n                checkedIn: participant.checkedIn || false,\n                registeredAt: participant.createdAt\n            }));\n\n            res.json({\n                participants: sanitizedParticipants,\n                pagination: {\n                    total,\n                    limit: parseInt(limit),\n                    offset: parseInt(offset),\n                    hasMore: (parseInt(offset) + parseInt(limit)) < total\n                },\n                summary: {\n                    total,\n                    confirmed: participants.filter(p => p.status === 'confirmed').length,\n                    pending: participants.filter(p => p.status === 'pending').length,\n                    speakers: participants.filter(p => p.isSpeaker).length,\n                    onsite: participants.filter(p => p.participationType === 'onsite').length,\n                    online: participants.filter(p => p.participationType === 'online').length\n                }\n            });\n\n        } catch (error) {\n            console.error('Error fetching participants:', error);\n            res.status(500).json({\n                error: 'Failed to fetch participants',\n                message: '参加者情報の取得に失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * PUT /api/participants/:id\n * Update participant information\n */\nrouter.put('/:id',\n    param('id').isLength({ min: 1 }).withMessage('Participant ID is required'),\n    body('name').optional().trim().isLength({ min: 1, max: 100 }),\n    body('participationType').optional().isIn(['onsite', 'online', 'undecided']),\n    body('status').optional().isIn(['pending', 'confirmed', 'cancelled']),\n    body('checkedIn').optional().isBoolean(),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const { id } = req.params;\n            const updates = req.body;\n\n            // Find existing participant\n            const participant = await database.findById('participants', id);\n            if (!participant) {\n                return res.status(404).json({\n                    error: 'Participant not found',\n                    message: '参加者が見つかりません'\n                });\n            }\n\n            // Update participant\n            const updatedParticipant = await database.update('participants', id, updates);\n\n            // Track analytics for status changes\n            if (updates.status && updates.status !== participant.status) {\n                await eventService.trackAnalytics(participant.eventId, 'participant_status_changed', {\n                    from: participant.status,\n                    to: updates.status\n                });\n            }\n\n            res.json({\n                success: true,\n                message: 'Participant updated successfully',\n                participant: {\n                    id: updatedParticipant.id,\n                    name: updatedParticipant.name,\n                    participationType: updatedParticipant.participationType,\n                    status: updatedParticipant.status,\n                    checkedIn: updatedParticipant.checkedIn,\n                    updatedAt: updatedParticipant.updatedAt\n                }\n            });\n\n        } catch (error) {\n            console.error('Error updating participant:', error);\n            res.status(500).json({\n                error: 'Failed to update participant',\n                message: '参加者情報の更新に失敗しました'\n            });\n        }\n    }\n);\n\n/**\n * DELETE /api/participants/:id\n * Delete/cancel participant registration (admin only)\n */\nrouter.delete('/:id',\n    param('id').isLength({ min: 1 }).withMessage('Participant ID is required'),\n    handleValidationErrors,\n    async (req, res) => {\n        try {\n            const { database, eventService } = req.app.locals;\n            const { id } = req.params;\n\n            // Find existing participant\n            const participant = await database.findById('participants', id);\n            if (!participant) {\n                return res.status(404).json({\n                    error: 'Participant not found',\n                    message: '参加者が見つかりません'\n                });\n            }\n\n            // If participant is a speaker, also remove their talk\n            if (participant.isSpeaker) {\n                const talks = await database.findAll('talks', { speakerId: id });\n                for (const talk of talks) {\n                    await database.delete('talks', talk.id);\n                }\n            }\n\n            // Delete participant\n            await database.delete('participants', id);\n\n            // Track analytics\n            await eventService.trackAnalytics(participant.eventId, 'participant_cancelled', {\n                participationType: participant.participationType,\n                isSpeaker: participant.isSpeaker\n            });\n\n            res.json({\n                success: true,\n                message: 'Participant registration cancelled',\n                participantId: id\n            });\n\n        } catch (error) {\n            console.error('Error deleting participant:', error);\n            res.status(500).json({\n                error: 'Failed to cancel registration',\n                message: '登録キャンセル処理に失敗しました'\n            });\n        }\n    }\n);\n\nexport default router;"],"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","ignoreList":[]}