{"version":3,"names":["cov_1gf10biczx","actualCoverage","logger","s","require","DatabaseService","AnalyticsService","constructor","f","db","getInstance","getEventStatistics","eventId","options","b","startDate","endDate","includeDetails","includeTrends","basicStats","getBasicEventStats","participantStats","getParticipantStats","talkStats","getTalkStats","trends","getEventTrends","details","getEventDetails","generatedAt","Date","toISOString","period","statistics","basic","participants","talks","error","Error","stats","query","length","event","eventInfo","id","title","date","venue","status","summary","totalParticipants","total_participants","totalTalks","total_talks","onlineParticipants","online_participants","offlineParticipants","offline_participants","confirmedTalks","confirmed_talks","pendingTalks","pending_talks","averageTalkDuration","parseFloat","avg_talk_duration","registrationPeriod","first","first_registration","last","last_registration","dateFilter","params","push","participantDistribution","registrationTimeline","geographicDistribution","attributeAnalysis","distribution","byType","map","row","type","participation_type","count","percentage","toFixed","byLocation","location","byOrganization","organizationType","organization_type","averageExperienceLevel","avg_experience_level","timeline","processRegistrationTimeline","totalRegistrations","reduce","sum","averagePerDay","calculateAveragePerDay","peakRegistrationDay","findPeakRegistrationDay","talkDistribution","speakerAnalysis","submissionTimeline","categoryPopularity","speakerStats","byCategory","category","averageDuration","avg_duration","byStatus","groupByStatus","speakers","uniqueSpeakers","unique_speakers","talksPerSpeaker","talks_per_speaker","firstTimeSpeakers","first_time_speakers","experiencedSpeakers","experienced_speakers","processSubmissionTimeline","duration","average","calculateAverageDuration","analyzeDurationDistribution","dailyRegistrations","getDailyRegistrations","dailySubmissions","getDailySubmissions","participationTypeTrends","getParticipationTypeTrends","predictions","calculatePredictions","registrations","daily","cumulative","calculateCumulative","submissions","participationTypes","insights","generateTrendInsights","participantsList","talksList","feedbackSummary","getFeedbackSummary","feedback","export","participantsCsv","generateParticipantsCsv","talksCsv","generateTalksCsv","compareEvents","eventIds","comparisons","metrics","onlineRatio","find","t","avgTalkDuration","analysis","analyzeEventComparisons","events","generateComparisonInsights","generateReport","reportType","generateSummaryReport","generateDetailedReport","generateExecutiveReport","generateParticipantReport","generateSpeakerReport","processed","forEach","online","offline","total","Object","values","confirmed","pending","statusGroups","totalDays","Set","size","peak","current","totalDuration","totalCount","durations","Math","round","dailyData","day","value","linearRegression","data","nextWeek","confidence","n","x","_","i","y","d","sumX","a","sumY","sumXY","xi","sumXX","slope","intercept","nextWeekPrediction","max","calculateConfidence","yMean","ssRes","ssTot","yi","predicted","pow","rSquared","min","recent","slice","earlier","recentAvg","earlierAvg","message","metric","change","c","standardDeviation","calculateStandardDeviation","mean","squareDiffs","avgSquareDiff","sqrt","participantValues","maxParticipants","bestEvent","keyMetrics","highlights","module","exports"],"sources":["analyticsService.js"],"sourcesContent":["/**\n * Analytics Service\n * イベント分析とレポート機能を提供するサービス\n */\n\nconst logger = require('../middleware/logger');\nconst { DatabaseService } = require('./database');\n\nclass AnalyticsService {\n  constructor() {\n    this.db = DatabaseService.getInstance();\n  }\n\n  /**\n   * イベント統計の取得\n   */\n  async getEventStatistics(eventId, options = {}) {\n    try {\n      const {\n        startDate,\n        endDate,\n        includeDetails = false,\n        includeTrends = false\n      } = options;\n\n      // 基本統計\n      const basicStats = await this.getBasicEventStats(eventId);\n      \n      // 参加者統計\n      const participantStats = await this.getParticipantStats(eventId, { startDate, endDate });\n      \n      // 発表統計\n      const talkStats = await this.getTalkStats(eventId);\n      \n      // 時系列データ（トレンド分析）\n      let trends = null;\n      if (includeTrends) {\n        trends = await this.getEventTrends(eventId, { startDate, endDate });\n      }\n\n      // 詳細データ\n      let details = null;\n      if (includeDetails) {\n        details = await this.getEventDetails(eventId);\n      }\n\n      return {\n        eventId,\n        generatedAt: new Date().toISOString(),\n        period: {\n          startDate: startDate || null,\n          endDate: endDate || null\n        },\n        statistics: {\n          basic: basicStats,\n          participants: participantStats,\n          talks: talkStats\n        },\n        trends,\n        details\n      };\n\n    } catch (error) {\n      logger.error('Failed to get event statistics:', error);\n      throw new Error('Failed to generate event statistics');\n    }\n  }\n\n  /**\n   * 基本イベント統計\n   */\n  async getBasicEventStats(eventId) {\n    const stats = await this.db.query(`\n      SELECT \n        e.id,\n        e.title,\n        e.date,\n        e.venue,\n        e.status,\n        COUNT(DISTINCT p.id) as total_participants,\n        COUNT(DISTINCT t.id) as total_talks,\n        COUNT(DISTINCT CASE WHEN p.participation_type = 'online' THEN p.id END) as online_participants,\n        COUNT(DISTINCT CASE WHEN p.participation_type = 'offline' THEN p.id END) as offline_participants,\n        COUNT(DISTINCT CASE WHEN t.status = 'confirmed' THEN t.id END) as confirmed_talks,\n        COUNT(DISTINCT CASE WHEN t.status = 'pending' THEN t.id END) as pending_talks,\n        AVG(CASE WHEN t.duration IS NOT NULL THEN t.duration END) as avg_talk_duration,\n        MAX(p.created_at) as last_registration,\n        MIN(p.created_at) as first_registration\n      FROM events e\n      LEFT JOIN participants p ON e.id = p.event_id\n      LEFT JOIN talks t ON e.id = t.event_id\n      WHERE e.id = ?\n      GROUP BY e.id\n    `, [eventId]);\n\n    if (!stats || stats.length === 0) {\n      throw new Error('Event not found');\n    }\n\n    const event = stats[0];\n    \n    return {\n      eventInfo: {\n        id: event.id,\n        title: event.title,\n        date: event.date,\n        venue: event.venue,\n        status: event.status\n      },\n      summary: {\n        totalParticipants: event.total_participants || 0,\n        totalTalks: event.total_talks || 0,\n        onlineParticipants: event.online_participants || 0,\n        offlineParticipants: event.offline_participants || 0,\n        confirmedTalks: event.confirmed_talks || 0,\n        pendingTalks: event.pending_talks || 0,\n        averageTalkDuration: parseFloat(event.avg_talk_duration) || 0,\n        registrationPeriod: {\n          first: event.first_registration,\n          last: event.last_registration\n        }\n      }\n    };\n  }\n\n  /**\n   * 参加者統計\n   */\n  async getParticipantStats(eventId, options = {}) {\n    const { startDate, endDate } = options;\n    \n    let dateFilter = '';\n    let params = [eventId];\n    \n    if (startDate && endDate) {\n      dateFilter = 'AND p.created_at BETWEEN ? AND ?';\n      params.push(startDate, endDate);\n    }\n\n    // 参加者の基本分布\n    const participantDistribution = await this.db.query(`\n      SELECT \n        participation_type,\n        COUNT(*) as count,\n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM participants WHERE event_id = ?) as percentage\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY participation_type\n    `, params);\n\n    // 時間別登録数\n    const registrationTimeline = await this.db.query(`\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as registrations,\n        participation_type\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY DATE(created_at), participation_type\n      ORDER BY date\n    `, params);\n\n    // 地域別分布（optional field）\n    const geographicDistribution = await this.db.query(`\n      SELECT \n        COALESCE(location, 'Unknown') as location,\n        COUNT(*) as count\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY location\n      ORDER BY count DESC\n    `, params);\n\n    // 参加者の属性分析\n    const attributeAnalysis = await this.db.query(`\n      SELECT \n        COALESCE(organization, 'Individual') as organization_type,\n        COUNT(*) as count,\n        AVG(CASE WHEN experience_level IS NOT NULL THEN \n          CASE experience_level \n            WHEN 'beginner' THEN 1 \n            WHEN 'intermediate' THEN 2 \n            WHEN 'advanced' THEN 3 \n            ELSE 2 \n          END \n        END) as avg_experience_level\n      FROM participants p\n      WHERE event_id = ? ${dateFilter}\n      GROUP BY organization_type\n      ORDER BY count DESC\n    `, params);\n\n    return {\n      distribution: {\n        byType: participantDistribution.map(row => ({\n          type: row.participation_type,\n          count: row.count,\n          percentage: parseFloat(row.percentage.toFixed(2))\n        })),\n        byLocation: geographicDistribution.map(row => ({\n          location: row.location,\n          count: row.count\n        })),\n        byOrganization: attributeAnalysis.map(row => ({\n          organizationType: row.organization_type,\n          count: row.count,\n          averageExperienceLevel: parseFloat(row.avg_experience_level?.toFixed(2)) || 0\n        }))\n      },\n      timeline: this.processRegistrationTimeline(registrationTimeline),\n      summary: {\n        totalRegistrations: participantDistribution.reduce((sum, row) => sum + row.count, 0),\n        averagePerDay: this.calculateAveragePerDay(registrationTimeline),\n        peakRegistrationDay: this.findPeakRegistrationDay(registrationTimeline)\n      }\n    };\n  }\n\n  /**\n   * 発表統計\n   */\n  async getTalkStats(eventId) {\n    // 発表の基本統計\n    const talkDistribution = await this.db.query(`\n      SELECT \n        category,\n        status,\n        COUNT(*) as count,\n        AVG(duration) as avg_duration,\n        MIN(duration) as min_duration,\n        MAX(duration) as max_duration\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY category, status\n      ORDER BY category, status\n    `, [eventId]);\n\n    // 発表者の属性\n    const speakerAnalysis = await this.db.query(`\n      SELECT \n        COUNT(DISTINCT speaker_name) as unique_speakers,\n        COUNT(*) as total_talks,\n        COUNT(*) * 1.0 / COUNT(DISTINCT speaker_name) as talks_per_speaker,\n        COUNT(CASE WHEN experience_level = 'first_time' THEN 1 END) as first_time_speakers,\n        COUNT(CASE WHEN experience_level = 'experienced' THEN 1 END) as experienced_speakers\n      FROM talks\n      WHERE event_id = ?\n    `, [eventId]);\n\n    // 申込み時系列\n    const submissionTimeline = await this.db.query(`\n      SELECT \n        DATE(created_at) as date,\n        COUNT(*) as submissions,\n        status\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY DATE(created_at), status\n      ORDER BY date\n    `, [eventId]);\n\n    // カテゴリ別人気度\n    const categoryPopularity = await this.db.query(`\n      SELECT \n        category,\n        COUNT(*) as count,\n        COUNT(*) * 100.0 / (SELECT COUNT(*) FROM talks WHERE event_id = ?) as percentage,\n        AVG(duration) as avg_duration\n      FROM talks\n      WHERE event_id = ?\n      GROUP BY category\n      ORDER BY count DESC\n    `, [eventId, eventId]);\n\n    const speakerStats = speakerAnalysis[0];\n\n    return {\n      distribution: {\n        byCategory: categoryPopularity.map(row => ({\n          category: row.category,\n          count: row.count,\n          percentage: parseFloat(row.percentage.toFixed(2)),\n          averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0\n        })),\n        byStatus: this.groupByStatus(talkDistribution)\n      },\n      speakers: {\n        uniqueSpeakers: speakerStats.unique_speakers || 0,\n        totalTalks: speakerStats.total_talks || 0,\n        talksPerSpeaker: parseFloat(speakerStats.talks_per_speaker?.toFixed(2)) || 0,\n        firstTimeSpeakers: speakerStats.first_time_speakers || 0,\n        experiencedSpeakers: speakerStats.experienced_speakers || 0\n      },\n      timeline: this.processSubmissionTimeline(submissionTimeline),\n      duration: {\n        average: this.calculateAverageDuration(talkDistribution),\n        distribution: this.analyzeDurationDistribution(talkDistribution)\n      }\n    };\n  }\n\n  /**\n   * イベントトレンド分析\n   */\n  async getEventTrends(eventId, options = {}) {\n    const { startDate, endDate } = options;\n    \n    // 日別登録数推移\n    const dailyRegistrations = await this.getDailyRegistrations(eventId, { startDate, endDate });\n    \n    // 日別発表申込み推移\n    const dailySubmissions = await this.getDailySubmissions(eventId, { startDate, endDate });\n    \n    // 参加タイプの推移\n    const participationTypeTrends = await this.getParticipationTypeTrends(eventId, { startDate, endDate });\n\n    // 予測データ（回帰分析）\n    const predictions = this.calculatePredictions(dailyRegistrations, dailySubmissions);\n\n    return {\n      registrations: {\n        daily: dailyRegistrations,\n        cumulative: this.calculateCumulative(dailyRegistrations),\n        predictions: predictions.registrations\n      },\n      submissions: {\n        daily: dailySubmissions,\n        cumulative: this.calculateCumulative(dailySubmissions),\n        predictions: predictions.submissions\n      },\n      participationTypes: participationTypeTrends,\n      insights: this.generateTrendInsights(dailyRegistrations, dailySubmissions, participationTypeTrends)\n    };\n  }\n\n  /**\n   * イベント詳細データ\n   */\n  async getEventDetails(eventId) {\n    // 参加者詳細リスト\n    const participantsList = await this.db.query(`\n      SELECT \n        id,\n        name,\n        email,\n        participation_type,\n        organization,\n        location,\n        experience_level,\n        created_at\n      FROM participants\n      WHERE event_id = ?\n      ORDER BY created_at DESC\n    `, [eventId]);\n\n    // 発表詳細リスト\n    const talksList = await this.db.query(`\n      SELECT \n        id,\n        title,\n        speaker_name,\n        speaker_email,\n        category,\n        duration,\n        description,\n        status,\n        experience_level,\n        created_at\n      FROM talks\n      WHERE event_id = ?\n      ORDER BY created_at DESC\n    `, [eventId]);\n\n    // フィードバック集計\n    const feedbackSummary = await this.getFeedbackSummary(eventId);\n\n    return {\n      participants: participantsList,\n      talks: talksList,\n      feedback: feedbackSummary,\n      export: {\n        participantsCsv: this.generateParticipantsCsv(participantsList),\n        talksCsv: this.generateTalksCsv(talksList)\n      }\n    };\n  }\n\n  /**\n   * 複数イベント比較分析\n   */\n  async compareEvents(eventIds, options = {}) {\n    const comparisons = [];\n    \n    for (const eventId of eventIds) {\n      const stats = await this.getEventStatistics(eventId, options);\n      comparisons.push({\n        eventId,\n        title: stats.statistics.basic.eventInfo.title,\n        date: stats.statistics.basic.eventInfo.date,\n        metrics: {\n          participants: stats.statistics.basic.summary.totalParticipants,\n          talks: stats.statistics.basic.summary.totalTalks,\n          onlineRatio: stats.statistics.participants.distribution.byType\n            .find(t => t.type === 'online')?.percentage || 0,\n          avgTalkDuration: stats.statistics.basic.summary.averageTalkDuration\n        }\n      });\n    }\n\n    // 比較分析\n    const analysis = this.analyzeEventComparisons(comparisons);\n\n    return {\n      events: comparisons,\n      analysis,\n      insights: this.generateComparisonInsights(comparisons, analysis)\n    };\n  }\n\n  /**\n   * レポート生成\n   */\n  async generateReport(eventId, reportType, options = {}) {\n    try {\n      const stats = await this.getEventStatistics(eventId, {\n        includeDetails: true,\n        includeTrends: true,\n        ...options\n      });\n\n      switch (reportType) {\n        case 'summary':\n          return this.generateSummaryReport(stats);\n        case 'detailed':\n          return this.generateDetailedReport(stats);\n        case 'executive':\n          return this.generateExecutiveReport(stats);\n        case 'participant':\n          return this.generateParticipantReport(stats);\n        case 'speaker':\n          return this.generateSpeakerReport(stats);\n        default:\n          throw new Error('Invalid report type');\n      }\n    } catch (error) {\n      logger.error('Failed to generate report:', error);\n      throw new Error('Failed to generate report');\n    }\n  }\n\n  // ヘルパーメソッド\n\n  processRegistrationTimeline(timeline) {\n    const processed = {};\n    timeline.forEach(row => {\n      if (!processed[row.date]) {\n        processed[row.date] = { date: row.date, online: 0, offline: 0, total: 0 };\n      }\n      processed[row.date][row.participation_type] = row.registrations;\n      processed[row.date].total += row.registrations;\n    });\n    return Object.values(processed);\n  }\n\n  processSubmissionTimeline(timeline) {\n    const processed = {};\n    timeline.forEach(row => {\n      if (!processed[row.date]) {\n        processed[row.date] = { date: row.date, confirmed: 0, pending: 0, total: 0 };\n      }\n      processed[row.date][row.status] = row.submissions;\n      processed[row.date].total += row.submissions;\n    });\n    return Object.values(processed);\n  }\n\n  groupByStatus(distribution) {\n    const statusGroups = {};\n    distribution.forEach(row => {\n      if (!statusGroups[row.status]) {\n        statusGroups[row.status] = [];\n      }\n      statusGroups[row.status].push({\n        category: row.category,\n        count: row.count,\n        averageDuration: parseFloat(row.avg_duration?.toFixed(1)) || 0\n      });\n    });\n    return statusGroups;\n  }\n\n  calculateAveragePerDay(timeline) {\n    if (!timeline.length) return 0;\n    const totalDays = new Set(timeline.map(row => row.date)).size;\n    const totalRegistrations = timeline.reduce((sum, row) => sum + row.registrations, 0);\n    return parseFloat((totalRegistrations / totalDays).toFixed(2));\n  }\n\n  findPeakRegistrationDay(timeline) {\n    if (!timeline.length) return null;\n    return timeline.reduce((peak, current) => \n      current.registrations > peak.registrations ? current : peak\n    );\n  }\n\n  calculateAverageDuration(distribution) {\n    let totalDuration = 0;\n    let totalCount = 0;\n    \n    distribution.forEach(row => {\n      if (row.avg_duration) {\n        totalDuration += row.avg_duration * row.count;\n        totalCount += row.count;\n      }\n    });\n    \n    return totalCount > 0 ? parseFloat((totalDuration / totalCount).toFixed(1)) : 0;\n  }\n\n  analyzeDurationDistribution(distribution) {\n    const durations = {};\n    distribution.forEach(row => {\n      const duration = Math.round(row.avg_duration / 5) * 5; // 5分単位で丸める\n      durations[`${duration}min`] = (durations[`${duration}min`] || 0) + row.count;\n    });\n    return durations;\n  }\n\n  calculateCumulative(dailyData) {\n    let cumulative = 0;\n    return dailyData.map(day => ({\n      date: day.date,\n      value: cumulative += day.value || day.registrations || day.submissions || 0\n    }));\n  }\n\n  calculatePredictions(registrations, submissions) {\n    // 簡易線形回帰による予測\n    return {\n      registrations: this.linearRegression(registrations),\n      submissions: this.linearRegression(submissions)\n    };\n  }\n\n  linearRegression(data) {\n    if (data.length < 2) return { nextWeek: 0, confidence: 0 };\n    \n    const n = data.length;\n    const x = data.map((_, i) => i);\n    const y = data.map(d => d.value || d.registrations || d.submissions || 0);\n    \n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n    \n    const nextWeekPrediction = slope * (n + 7) + intercept;\n    \n    return {\n      nextWeek: Math.max(0, Math.round(nextWeekPrediction)),\n      confidence: this.calculateConfidence(data, slope, intercept)\n    };\n  }\n\n  calculateConfidence(data, slope, intercept) {\n    // R²値の計算\n    const y = data.map(d => d.value || d.registrations || d.submissions || 0);\n    const yMean = y.reduce((a, b) => a + b, 0) / y.length;\n    \n    let ssRes = 0;\n    let ssTot = 0;\n    \n    y.forEach((yi, i) => {\n      const predicted = slope * i + intercept;\n      ssRes += Math.pow(yi - predicted, 2);\n      ssTot += Math.pow(yi - yMean, 2);\n    });\n    \n    const rSquared = 1 - (ssRes / ssTot);\n    return Math.max(0, Math.min(1, rSquared));\n  }\n\n  generateTrendInsights(registrations, submissions, participationTypes) {\n    const insights = [];\n    \n    // 登録トレンド分析\n    if (registrations.length > 1) {\n      const recent = registrations.slice(-7);\n      const earlier = registrations.slice(-14, -7);\n      const recentAvg = recent.reduce((sum, d) => sum + d.registrations, 0) / recent.length;\n      const earlierAvg = earlier.reduce((sum, d) => sum + d.registrations, 0) / earlier.length;\n      \n      if (recentAvg > earlierAvg * 1.2) {\n        insights.push({\n          type: 'positive',\n          message: '登録数が増加傾向にあります',\n          metric: 'registrations',\n          change: ((recentAvg - earlierAvg) / earlierAvg * 100).toFixed(1)\n        });\n      } else if (recentAvg < earlierAvg * 0.8) {\n        insights.push({\n          type: 'warning',\n          message: '登録数が減少傾向にあります',\n          metric: 'registrations',\n          change: ((recentAvg - earlierAvg) / earlierAvg * 100).toFixed(1)\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  analyzeEventComparisons(comparisons) {\n    const metrics = ['participants', 'talks', 'onlineRatio', 'avgTalkDuration'];\n    const analysis = {};\n    \n    metrics.forEach(metric => {\n      const values = comparisons.map(c => c.metrics[metric]);\n      analysis[metric] = {\n        min: Math.min(...values),\n        max: Math.max(...values),\n        average: values.reduce((a, b) => a + b, 0) / values.length,\n        standardDeviation: this.calculateStandardDeviation(values)\n      };\n    });\n    \n    return analysis;\n  }\n\n  calculateStandardDeviation(values) {\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const squareDiffs = values.map(value => Math.pow(value - mean, 2));\n    const avgSquareDiff = squareDiffs.reduce((a, b) => a + b, 0) / values.length;\n    return Math.sqrt(avgSquareDiff);\n  }\n\n  generateComparisonInsights(comparisons, analysis) {\n    const insights = [];\n    \n    // 参加者数の分析\n    const participantValues = comparisons.map(c => c.metrics.participants);\n    const maxParticipants = Math.max(...participantValues);\n    const bestEvent = comparisons.find(c => c.metrics.participants === maxParticipants);\n    \n    insights.push({\n      type: 'highlight',\n      message: `最も参加者が多かったのは「${bestEvent.title}」で${maxParticipants}名でした`,\n      category: 'participation'\n    });\n    \n    return insights;\n  }\n\n  generateSummaryReport(stats) {\n    return {\n      type: 'summary',\n      title: `${stats.statistics.basic.eventInfo.title} - サマリーレポート`,\n      generatedAt: new Date().toISOString(),\n      keyMetrics: {\n        participants: stats.statistics.basic.summary.totalParticipants,\n        talks: stats.statistics.basic.summary.totalTalks,\n        onlineRatio: stats.statistics.participants.distribution.byType\n          .find(t => t.type === 'online')?.percentage || 0\n      },\n      highlights: [\n        `総参加者数: ${stats.statistics.basic.summary.totalParticipants}名`,\n        `総発表数: ${stats.statistics.basic.summary.totalTalks}件`,\n        `オンライン参加率: ${stats.statistics.participants.distribution.byType\n          .find(t => t.type === 'online')?.percentage || 0}%`\n      ]\n    };\n  }\n\n  async getDailyRegistrations(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getDailySubmissions(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getParticipationTypeTrends(eventId, options) {\n    // 実装は簡略化\n    return [];\n  }\n\n  async getFeedbackSummary(eventId) {\n    // 実装は簡略化\n    return {};\n  }\n\n  generateParticipantsCsv(participants) {\n    // CSV生成の実装\n    return 'CSV data';\n  }\n\n  generateTalksCsv(talks) {\n    // CSV生成の実装\n    return 'CSV data';\n  }\n\n  generateDetailedReport(stats) {\n    // 詳細レポート生成\n    return {};\n  }\n\n  generateExecutiveReport(stats) {\n    // エグゼクティブレポート生成\n    return {};\n  }\n\n  generateParticipantReport(stats) {\n    // 参加者レポート生成\n    return {};\n  }\n\n  generateSpeakerReport(stats) {\n    // 発表者レポート生成\n    return {};\n  }\n}\n\nmodule.exports = new AnalyticsService();"],"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","ignoreList":[]}