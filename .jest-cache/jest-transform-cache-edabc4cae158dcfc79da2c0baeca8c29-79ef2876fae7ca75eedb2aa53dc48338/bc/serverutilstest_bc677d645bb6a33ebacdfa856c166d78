c34bd797fab4470f5916a343d9f15964
"use strict";

var _globals = require("@jest/globals");
var _fsExtra = _interopRequireDefault(require("fs-extra"));
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * サーバーユーティリティ関数のユニットテスト
 */

// テスト対象のユーティリティ関数（実装予定）
class DataManager {
  constructor(dataDir = './server/data') {
    this.dataDir = dataDir;
  }
  async loadData(filename) {
    const filePath = _path.default.join(this.dataDir, filename);
    if (await _fsExtra.default.pathExists(filePath)) {
      return await _fsExtra.default.readJson(filePath);
    }
    return null;
  }
  async saveData(filename, data) {
    const filePath = _path.default.join(this.dataDir, filename);
    await _fsExtra.default.ensureDir(_path.default.dirname(filePath));
    await _fsExtra.default.writeJson(filePath, data, {
      spaces: 2
    });
    return true;
  }
  async appendData(filename, newData) {
    const existingData = (await this.loadData(filename)) || [];
    let updatedData;
    if (Array.isArray(existingData)) {
      updatedData = [...existingData, newData];
    } else {
      // オブジェクトの深いマージ
      updatedData = this.deepMerge(existingData, newData);
    }
    return await this.saveData(filename, updatedData);
  }
  deepMerge(target, source) {
    const result = {
      ...target
    };
    for (const key in source) {
      if (source.hasOwnProperty(key)) {
        if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {
          result[key] = this.deepMerge(result[key] || {}, source[key]);
        } else {
          result[key] = source[key];
        }
      }
    }
    return result;
  }
  async deleteData(filename) {
    const filePath = _path.default.join(this.dataDir, filename);
    if (await _fsExtra.default.pathExists(filePath)) {
      await _fsExtra.default.remove(filePath);
      return true;
    }
    return false;
  }
}

// バリデーション関数
function validateEventData(eventData) {
  const requiredFields = ['title', 'date', 'location'];
  const missingFields = requiredFields.filter(field => !eventData[field]);
  if (missingFields.length > 0) {
    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
  }

  // 日付の検証
  const eventDate = new Date(eventData.date);
  if (isNaN(eventDate.getTime())) {
    throw new Error('Invalid date format');
  }

  // 未来の日付かチェック
  if (eventDate < new Date()) {
    throw new Error('Event date must be in the future');
  }
  return true;
}

// レスポンスフォーマッター
function formatApiResponse(data, message = 'Success', status = 200) {
  return {
    status,
    message,
    data,
    timestamp: new Date().toISOString()
  };
}
function formatErrorResponse(error, status = 500) {
  return {
    status,
    message: error.message || 'Internal server error',
    error: process.env.NODE_ENV === 'development' ? error.stack : undefined,
    timestamp: new Date().toISOString()
  };
}
(0, _globals.describe)('DataManager', () => {
  let dataManager;
  const testDataDir = _path.default.join(process.cwd(), 'tests', 'data');
  beforeEach(async () => {
    dataManager = new DataManager(testDataDir);
    await _fsExtra.default.ensureDir(testDataDir);
  });
  afterEach(async () => {
    if (await _fsExtra.default.pathExists(testDataDir)) {
      await _fsExtra.default.remove(testDataDir);
    }
  });
  (0, _globals.describe)('loadData', () => {
    (0, _globals.it)('should load existing JSON file', async () => {
      const testData = {
        name: 'Test Event',
        participants: 10
      };
      const filename = 'test-event.json';
      await _fsExtra.default.writeJson(_path.default.join(testDataDir, filename), testData);
      const loadedData = await dataManager.loadData(filename);
      (0, _globals.expect)(loadedData).toEqual(testData);
    });
    (0, _globals.it)('should return null for non-existent file', async () => {
      const loadedData = await dataManager.loadData('non-existent.json');
      (0, _globals.expect)(loadedData).toBeNull();
    });
    (0, _globals.it)('should handle malformed JSON gracefully', async () => {
      const filename = 'malformed.json';
      await _fsExtra.default.writeFile(_path.default.join(testDataDir, filename), '{ invalid json content');
      await (0, _globals.expect)(dataManager.loadData(filename)).rejects.toThrow();
    });
  });
  (0, _globals.describe)('saveData', () => {
    (0, _globals.it)('should save data to JSON file', async () => {
      const testData = {
        title: 'Lightning Talk',
        date: '2024-12-01'
      };
      const filename = 'save-test.json';
      const result = await dataManager.saveData(filename, testData);
      (0, _globals.expect)(result).toBe(true);
      const savedData = await _fsExtra.default.readJson(_path.default.join(testDataDir, filename));
      (0, _globals.expect)(savedData).toEqual(testData);
    });
    (0, _globals.it)('should create directory if not exists', async () => {
      const testData = {
        test: true
      };
      const filename = 'nested/deep/test.json';
      const result = await dataManager.saveData(filename, testData);
      (0, _globals.expect)(result).toBe(true);
      const filePath = _path.default.join(testDataDir, filename);
      (0, _globals.expect)(await _fsExtra.default.pathExists(filePath)).toBe(true);
    });
    (0, _globals.it)('should overwrite existing file', async () => {
      const filename = 'overwrite-test.json';
      const originalData = {
        version: 1
      };
      const updatedData = {
        version: 2
      };
      await dataManager.saveData(filename, originalData);
      await dataManager.saveData(filename, updatedData);
      const finalData = await dataManager.loadData(filename);
      (0, _globals.expect)(finalData).toEqual(updatedData);
    });
  });
  (0, _globals.describe)('appendData', () => {
    (0, _globals.it)('should append to array data', async () => {
      const filename = 'append-array.json';
      const initialData = [{
        id: 1,
        name: 'First'
      }];
      const newItem = {
        id: 2,
        name: 'Second'
      };
      await dataManager.saveData(filename, initialData);
      await dataManager.appendData(filename, newItem);
      const result = await dataManager.loadData(filename);
      (0, _globals.expect)(result).toHaveLength(2);
      (0, _globals.expect)(result[1]).toEqual(newItem);
    });
    (0, _globals.it)('should merge object data', async () => {
      const filename = 'append-object.json';
      const initialData = {
        settings: {
          theme: 'dark'
        }
      };
      const newData = {
        settings: {
          language: 'ja'
        }
      };
      await dataManager.saveData(filename, initialData);
      await dataManager.appendData(filename, newData);
      const result = await dataManager.loadData(filename);
      (0, _globals.expect)(result.settings).toEqual({
        theme: 'dark',
        language: 'ja'
      });
    });
    (0, _globals.it)('should create new file if not exists', async () => {
      const filename = 'new-append.json';
      const newData = {
        id: 1,
        name: 'First Item'
      };
      await dataManager.appendData(filename, newData);
      const result = await dataManager.loadData(filename);
      (0, _globals.expect)(result).toEqual([newData]);
    });
  });
  (0, _globals.describe)('deleteData', () => {
    (0, _globals.it)('should delete existing file', async () => {
      const filename = 'delete-test.json';
      await dataManager.saveData(filename, {
        test: true
      });
      const result = await dataManager.deleteData(filename);
      (0, _globals.expect)(result).toBe(true);
      const filePath = _path.default.join(testDataDir, filename);
      (0, _globals.expect)(await _fsExtra.default.pathExists(filePath)).toBe(false);
    });
    (0, _globals.it)('should return false for non-existent file', async () => {
      const result = await dataManager.deleteData('non-existent.json');
      (0, _globals.expect)(result).toBe(false);
    });
  });
});
(0, _globals.describe)('validateEventData', () => {
  // 未来の日付を動的に生成（現在から1ヶ月後）
  const futureDate = new Date();
  futureDate.setMonth(futureDate.getMonth() + 1);
  const validEventData = {
    title: 'Tech Lightning Talk',
    date: futureDate.toISOString(),
    location: 'Tokyo Conference Room',
    description: 'Monthly tech sharing event'
  };
  (0, _globals.it)('should validate complete event data', () => {
    (0, _globals.expect)(() => validateEventData(validEventData)).not.toThrow();
    (0, _globals.expect)(validateEventData(validEventData)).toBe(true);
  });
  (0, _globals.it)('should reject event without title', () => {
    const eventWithoutTitle = {
      ...validEventData
    };
    delete eventWithoutTitle.title;
    (0, _globals.expect)(() => validateEventData(eventWithoutTitle)).toThrow('Missing required fields: title');
  });
  (0, _globals.it)('should reject event without date', () => {
    const eventWithoutDate = {
      ...validEventData
    };
    delete eventWithoutDate.date;
    (0, _globals.expect)(() => validateEventData(eventWithoutDate)).toThrow('Missing required fields: date');
  });
  (0, _globals.it)('should reject event without location', () => {
    const eventWithoutLocation = {
      ...validEventData
    };
    delete eventWithoutLocation.location;
    (0, _globals.expect)(() => validateEventData(eventWithoutLocation)).toThrow('Missing required fields: location');
  });
  (0, _globals.it)('should reject event with invalid date', () => {
    const eventWithInvalidDate = {
      ...validEventData,
      date: 'invalid-date-string'
    };
    (0, _globals.expect)(() => validateEventData(eventWithInvalidDate)).toThrow('Invalid date format');
  });
  (0, _globals.it)('should reject event with past date', () => {
    // 過去の日付を動的に生成（現在から1日前）
    const pastDate = new Date();
    pastDate.setDate(pastDate.getDate() - 1);
    const eventWithPastDate = {
      ...validEventData,
      date: pastDate.toISOString()
    };
    (0, _globals.expect)(() => validateEventData(eventWithPastDate)).toThrow('Event date must be in the future');
  });
  (0, _globals.it)('should reject missing multiple fields', () => {
    const incompleteEvent = {
      description: 'Only description'
    };
    (0, _globals.expect)(() => validateEventData(incompleteEvent)).toThrow('Missing required fields: title, date, location');
  });
});
(0, _globals.describe)('API Response Formatters', () => {
  (0, _globals.describe)('formatApiResponse', () => {
    (0, _globals.it)('should format successful response with default values', () => {
      const data = {
        id: 1,
        name: 'Test'
      };
      const response = formatApiResponse(data);
      (0, _globals.expect)(response).toMatchObject({
        status: 200,
        message: 'Success',
        data,
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should format response with custom message and status', () => {
      const data = {
        created: true
      };
      const response = formatApiResponse(data, 'Created successfully', 201);
      (0, _globals.expect)(response).toMatchObject({
        status: 201,
        message: 'Created successfully',
        data
      });
    });
    (0, _globals.it)('should include valid timestamp', () => {
      const response = formatApiResponse({});
      const timestamp = new Date(response.timestamp);
      (0, _globals.expect)(timestamp.getTime()).not.toBeNaN();
      (0, _globals.expect)(Date.now() - timestamp.getTime()).toBeLessThan(1000);
    });
  });
  (0, _globals.describe)('formatErrorResponse', () => {
    (0, _globals.it)('should format error response with default status', () => {
      const error = new Error('Something went wrong');
      const response = formatErrorResponse(error);
      (0, _globals.expect)(response).toMatchObject({
        status: 500,
        message: 'Something went wrong',
        timestamp: _globals.expect.any(String)
      });
    });
    (0, _globals.it)('should format error response with custom status', () => {
      const error = new Error('Not found');
      const response = formatErrorResponse(error, 404);
      (0, _globals.expect)(response.status).toBe(404);
      (0, _globals.expect)(response.message).toBe('Not found');
    });
    (0, _globals.it)('should include stack trace in development mode', () => {
      const originalEnv = process.env.NODE_ENV;
      process.env.NODE_ENV = 'development';
      const error = new Error('Test error');
      const response = formatErrorResponse(error);
      (0, _globals.expect)(response.error).toBeDefined();
      (0, _globals.expect)(response.error).toContain('Error: Test error');
      process.env.NODE_ENV = originalEnv;
    });
    (0, _globals.it)('should exclude stack trace in production mode', () => {
      const originalEnv = process.env.NODE_ENV;
      process.env.NODE_ENV = 'production';
      const error = new Error('Test error');
      const response = formatErrorResponse(error);
      (0, _globals.expect)(response.error).toBeUndefined();
      process.env.NODE_ENV = originalEnv;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,