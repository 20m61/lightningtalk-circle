{"version":3,"names":["cov_2515l7jzlk","actualCoverage","validationResult","s","validateRequest","req","res","next","f","errors","isEmpty","b","status","json","success","error","details","array","map","field","param","message","msg","value","customValidators","isValidDate","date","Date","isNaN","getTime","isValidEmail","emailRegex","test","isValidUrl","URL"],"sources":["validation.js"],"sourcesContent":["/**\n * Request validation middleware\n */\n\nimport { validationResult } from 'express-validator';\n\nexport const validateRequest = (req, res, next) => {\n    const errors = validationResult(req);\n    \n    if (!errors.isEmpty()) {\n        return res.status(400).json({\n            success: false,\n            error: 'Validation failed',\n            details: errors.array().map(error => ({\n                field: error.param,\n                message: error.msg,\n                value: error.value\n            }))\n        });\n    }\n    \n    next();\n};\n\n// Custom validators\nexport const customValidators = {\n    isValidDate: (value) => {\n        const date = new Date(value);\n        return !isNaN(date.getTime()) && date > new Date();\n    },\n    \n    isValidEmail: (value) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(value);\n    },\n    \n    isValidUrl: (value) => {\n        try {\n            new URL(value);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n};"],"mappings":"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","ignoreList":[]}