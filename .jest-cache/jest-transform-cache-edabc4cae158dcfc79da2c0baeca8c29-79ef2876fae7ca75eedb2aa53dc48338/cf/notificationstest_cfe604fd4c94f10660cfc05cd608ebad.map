{"version":3,"names":["request","require","expect","WebSocket","EventSource","app","notificationService","describe","server","baseURL","before","listen","port","address","after","done","shutdown","close","it","eventSource","addEventListener","readyState","to","equal","OPEN","error","setTimeout","Error","event","data","JSON","parse","have","property","connected","post","send","message","type","end","wsURL","replace","ws","on","toString","stringify","topics","include","subscribed","author","response","topic","body","success","be","true","priority","participant","name","email","event_id","talk","title","speaker","description","id","changes","updateType","room","get","stats","history","an","length","greaterThan","testType","status","connectionCount","connectedCount","connections","i","push","forEach","conn","notificationCount","startTime","Date","now","promises","Promise","all","endTime","duration","lessThan","delay","ms","resolve"],"sources":["notifications.test.js"],"sourcesContent":["/**\n * リアルタイム通知機能の統合テスト\n * SSE、WebSocket、通知サービスのテスト\n */\n\nconst request = require('supertest');\nconst { expect } = require('chai');\nconst WebSocket = require('ws');\nconst EventSource = require('eventsource');\nconst { app } = require('../../server/app');\nconst notificationService = require('../../server/services/notificationService');\n\ndescribe('Realtime Notifications Integration Tests', () => {\n  let server;\n  let baseURL;\n\n  before(async () => {\n    server = app.listen(0); // ランダムポート\n    const port = server.address().port;\n    baseURL = `http://localhost:${port}`;\n  });\n\n  after((done) => {\n    notificationService.shutdown();\n    server.close(done);\n  });\n\n  describe('SSE (Server-Sent Events)', () => {\n    it('should establish SSE connection', (done) => {\n      const eventSource = new EventSource(`${baseURL}/api/notifications/stream`);\n      \n      eventSource.addEventListener('open', () => {\n        expect(eventSource.readyState).to.equal(EventSource.OPEN);\n        eventSource.close();\n        done();\n      });\n\n      eventSource.addEventListener('error', (error) => {\n        eventSource.close();\n        done(error);\n      });\n\n      // タイムアウト設定\n      setTimeout(() => {\n        eventSource.close();\n        done(new Error('SSE connection timeout'));\n      }, 5000);\n    });\n\n    it('should receive connection confirmation', (done) => {\n      const eventSource = new EventSource(`${baseURL}/api/notifications/stream`);\n      \n      eventSource.addEventListener('connected', (event) => {\n        const data = JSON.parse(event.data);\n        expect(data).to.have.property('message');\n        expect(data).to.have.property('clientId');\n        expect(data).to.have.property('timestamp');\n        eventSource.close();\n        done();\n      });\n\n      eventSource.addEventListener('error', (error) => {\n        eventSource.close();\n        done(error);\n      });\n\n      setTimeout(() => {\n        eventSource.close();\n        done(new Error('Connection confirmation timeout'));\n      }, 5000);\n    });\n\n    it('should receive notifications via SSE', (done) => {\n      const eventSource = new EventSource(`${baseURL}/api/notifications/stream`);\n      let connected = false;\n\n      eventSource.addEventListener('connected', () => {\n        connected = true;\n        \n        // 通知を送信\n        request(app)\n          .post('/api/notifications/send')\n          .send({\n            event: 'test_notification',\n            message: 'SSE test message',\n            type: 'info'\n          })\n          .expect(200)\n          .end();\n      });\n\n      eventSource.addEventListener('test_notification', (event) => {\n        if (connected) {\n          const data = JSON.parse(event.data);\n          expect(data.message).to.equal('SSE test message');\n          expect(data.type).to.equal('info');\n          eventSource.close();\n          done();\n        }\n      });\n\n      eventSource.addEventListener('error', (error) => {\n        eventSource.close();\n        done(error);\n      });\n\n      setTimeout(() => {\n        eventSource.close();\n        done(new Error('SSE notification timeout'));\n      }, 10000);\n    });\n  });\n\n  describe('WebSocket', () => {\n    it('should establish WebSocket connection', (done) => {\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n      const ws = new WebSocket(wsURL);\n\n      ws.on('open', () => {\n        expect(ws.readyState).to.equal(WebSocket.OPEN);\n        ws.close();\n        done();\n      });\n\n      ws.on('error', (error) => {\n        done(error);\n      });\n\n      setTimeout(() => {\n        ws.close();\n        done(new Error('WebSocket connection timeout'));\n      }, 5000);\n    });\n\n    it('should receive connection confirmation via WebSocket', (done) => {\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n      const ws = new WebSocket(wsURL);\n\n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        if (message.event === 'connected') {\n          expect(message.data).to.have.property('message');\n          expect(message.data).to.have.property('clientId');\n          expect(message.data).to.have.property('timestamp');\n          ws.close();\n          done();\n        }\n      });\n\n      ws.on('error', (error) => {\n        done(error);\n      });\n\n      setTimeout(() => {\n        ws.close();\n        done(new Error('WebSocket connection confirmation timeout'));\n      }, 5000);\n    });\n\n    it('should handle WebSocket subscription', (done) => {\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n      const ws = new WebSocket(wsURL);\n      let connected = false;\n\n      ws.on('open', () => {\n        // トピック購読\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          topics: ['test-topic']\n        }));\n      });\n\n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.event === 'connected') {\n          connected = true;\n        } else if (message.event === 'subscribed' && connected) {\n          expect(message.data.topics).to.include('test-topic');\n          ws.close();\n          done();\n        }\n      });\n\n      ws.on('error', (error) => {\n        done(error);\n      });\n\n      setTimeout(() => {\n        ws.close();\n        done(new Error('WebSocket subscription timeout'));\n      }, 5000);\n    });\n\n    it('should receive notifications via WebSocket', (done) => {\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n      const ws = new WebSocket(wsURL);\n      let subscribed = false;\n\n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          topics: ['all']\n        }));\n      });\n\n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.event === 'subscribed') {\n          subscribed = true;\n          \n          // 通知を送信\n          request(app)\n            .post('/api/notifications/send')\n            .send({\n              event: 'test_notification',\n              message: 'WebSocket test message',\n              type: 'info'\n            })\n            .expect(200)\n            .end();\n            \n        } else if (message.event === 'test_notification' && subscribed) {\n          expect(message.data.message).to.equal('WebSocket test message');\n          expect(message.data.type).to.equal('info');\n          ws.close();\n          done();\n        }\n      });\n\n      ws.on('error', (error) => {\n        done(error);\n      });\n\n      setTimeout(() => {\n        ws.close();\n        done(new Error('WebSocket notification timeout'));\n      }, 10000);\n    });\n\n    it('should handle chat messages via WebSocket', (done) => {\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n      const ws = new WebSocket(wsURL);\n      let subscribed = false;\n\n      ws.on('open', () => {\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          topics: ['all']\n        }));\n      });\n\n      ws.on('message', (data) => {\n        const message = JSON.parse(data.toString());\n        \n        if (message.event === 'subscribed') {\n          subscribed = true;\n          \n          // チャットメッセージを送信\n          ws.send(JSON.stringify({\n            type: 'chat',\n            message: 'Hello from WebSocket test',\n            author: 'Test User'\n          }));\n          \n        } else if (message.event === 'chat_message' && subscribed) {\n          expect(message.data.message).to.equal('Hello from WebSocket test');\n          expect(message.data.author).to.equal('Test User');\n          ws.close();\n          done();\n        }\n      });\n\n      ws.on('error', (error) => {\n        done(error);\n      });\n\n      setTimeout(() => {\n        ws.close();\n        done(new Error('WebSocket chat message timeout'));\n      }, 10000);\n    });\n  });\n\n  describe('Notification API Endpoints', () => {\n    it('should send manual notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/send')\n        .send({\n          event: 'manual_test',\n          message: 'Manual notification test',\n          type: 'info',\n          topic: 'test'\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.event).to.equal('manual_test');\n      expect(response.body.topic).to.equal('test');\n    });\n\n    it('should send system notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/system')\n        .send({\n          message: 'System test notification',\n          type: 'warning',\n          priority: 'high'\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.message).to.equal('System notification sent successfully');\n    });\n\n    it('should send participant registration notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/participant-registered')\n        .send({\n          participant: {\n            name: 'Test Participant',\n            email: 'test@example.com',\n            event_id: 1\n          }\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n    });\n\n    it('should send talk submission notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/talk-submitted')\n        .send({\n          talk: {\n            title: 'Test Talk',\n            speaker: 'Test Speaker',\n            description: 'Test description'\n          }\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n    });\n\n    it('should send event update notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/event-updated')\n        .send({\n          event: {\n            id: 1,\n            title: 'Updated Event',\n            changes: ['venue', 'time']\n          },\n          updateType: 'urgent'\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n    });\n\n    it('should send chat message', async () => {\n      const response = await request(app)\n        .post('/api/notifications/chat')\n        .send({\n          message: 'Test chat message',\n          author: 'API Test',\n          room: 'general'\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n    });\n\n    it('should get connection stats', async () => {\n      const response = await request(app)\n        .get('/api/notifications/stats')\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.stats).to.have.property('sseClients');\n      expect(response.body.stats).to.have.property('wsClients');\n      expect(response.body.stats).to.have.property('totalConnections');\n    });\n\n    it('should get notification history', async () => {\n      // まず通知を送信\n      await request(app)\n        .post('/api/notifications/send')\n        .send({\n          event: 'history_test',\n          message: 'History test message',\n          type: 'info'\n        });\n\n      const response = await request(app)\n        .get('/api/notifications/history?limit=10')\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.history).to.be.an('array');\n      expect(response.body.history.length).to.be.greaterThan(0);\n    });\n\n    it('should get available topics', async () => {\n      const response = await request(app)\n        .get('/api/notifications/topics')\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.topics).to.be.an('array');\n    });\n\n    it('should send test notification', async () => {\n      const response = await request(app)\n        .post('/api/notifications/test')\n        .send({\n          type: 'both'\n        })\n        .expect(200);\n\n      expect(response.body.success).to.be.true;\n      expect(response.body.testType).to.equal('both');\n    });\n\n    it('should return health check', async () => {\n      const response = await request(app)\n        .get('/api/notifications/health')\n        .expect(200);\n\n      expect(response.body.status).to.equal('healthy');\n      expect(response.body).to.have.property('uptime');\n      expect(response.body).to.have.property('connections');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid notification data', async () => {\n      await request(app)\n        .post('/api/notifications/send')\n        .send({\n          // event missing\n          message: 'Invalid notification'\n        })\n        .expect(400);\n    });\n\n    it('should handle invalid participant data', async () => {\n      await request(app)\n        .post('/api/notifications/participant-registered')\n        .send({\n          participant: {\n            // name missing\n            email: 'invalid@example.com'\n          }\n        })\n        .expect(400);\n    });\n\n    it('should handle invalid talk data', async () => {\n      await request(app)\n        .post('/api/notifications/talk-submitted')\n        .send({\n          talk: {\n            // title missing\n            speaker: 'Test Speaker'\n          }\n        })\n        .expect(400);\n    });\n\n    it('should handle invalid event data', async () => {\n      await request(app)\n        .post('/api/notifications/event-updated')\n        .send({\n          event: {\n            // id missing\n            title: 'Test Event'\n          }\n        })\n        .expect(400);\n    });\n  });\n\n  describe('Performance and Load', () => {\n    it('should handle multiple simultaneous SSE connections', (done) => {\n      const connectionCount = 10;\n      let connectedCount = 0;\n      const connections = [];\n\n      for (let i = 0; i < connectionCount; i++) {\n        const eventSource = new EventSource(`${baseURL}/api/notifications/stream`);\n        connections.push(eventSource);\n\n        eventSource.addEventListener('connected', () => {\n          connectedCount++;\n          if (connectedCount === connectionCount) {\n            // 全ての接続を閉じる\n            connections.forEach(conn => conn.close());\n            done();\n          }\n        });\n\n        eventSource.addEventListener('error', (error) => {\n          connections.forEach(conn => conn.close());\n          done(error);\n        });\n      }\n\n      setTimeout(() => {\n        connections.forEach(conn => conn.close());\n        done(new Error('Multiple SSE connections timeout'));\n      }, 10000);\n    });\n\n    it('should handle multiple simultaneous WebSocket connections', (done) => {\n      const connectionCount = 10;\n      let connectedCount = 0;\n      const connections = [];\n      const wsURL = baseURL.replace('http://', 'ws://') + '/ws';\n\n      for (let i = 0; i < connectionCount; i++) {\n        const ws = new WebSocket(wsURL);\n        connections.push(ws);\n\n        ws.on('message', (data) => {\n          const message = JSON.parse(data.toString());\n          if (message.event === 'connected') {\n            connectedCount++;\n            if (connectedCount === connectionCount) {\n              // 全ての接続を閉じる\n              connections.forEach(conn => conn.close());\n              done();\n            }\n          }\n        });\n\n        ws.on('error', (error) => {\n          connections.forEach(conn => conn.close());\n          done(error);\n        });\n      }\n\n      setTimeout(() => {\n        connections.forEach(conn => conn.close());\n        done(new Error('Multiple WebSocket connections timeout'));\n      }, 10000);\n    });\n\n    it('should maintain performance with high notification volume', async () => {\n      const notificationCount = 100;\n      const startTime = Date.now();\n\n      // 大量の通知を並列送信\n      const promises = [];\n      for (let i = 0; i < notificationCount; i++) {\n        promises.push(\n          request(app)\n            .post('/api/notifications/send')\n            .send({\n              event: 'performance_test',\n              message: `Performance test message ${i}`,\n              type: 'info'\n            })\n        );\n      }\n\n      await Promise.all(promises);\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      expect(duration).to.be.lessThan(5000); // 5秒以内\n    });\n  });\n});\n\n// ヘルパー関数\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}"],"mappings":"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","ignoreList":[]}