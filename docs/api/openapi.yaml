openapi: 3.0.3
info:
  title: Lightning Talk Event Management API
  description: |
    ライトニングトークイベント管理システムのREST API
    
    このAPIは以下の機能を提供します：
    - イベント管理 (作成、編集、削除)
    - 参加者管理 (登録、編集、リスト表示)
    - 発表管理 (提出、承認、編集)
    - リアルタイム通知 (WebSocket, Server-Sent Events)
    - 複数イベント管理 (並行実行、競合解決)
    - 分析レポート (統計、トレンド分析)
    - 管理者機能 (ダッシュボード、設定)
  version: 1.0.0
  contact:
    name: Lightning Talk Support
    email: support@lightningtalk.example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: 開発環境
  - url: https://api.lightningtalk.example.com/api
    description: 本番環境

paths:
  # イベント管理
  /events:
    get:
      tags:
        - Events
      summary: イベント一覧取得
      description: 全イベントの一覧を取得します
      parameters:
        - name: status
          in: query
          description: イベントステータスでフィルタリング
          required: false
          schema:
            type: string
            enum: [upcoming, ongoing, completed, cancelled]
        - name: limit
          in: query
          description: 取得件数の上限
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: オフセット
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Events
      summary: イベント作成
      description: 新しいイベントを作成します
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "イベントが正常に作成されました"
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /events/{eventId}:
    get:
      tags:
        - Events
      summary: イベント詳細取得
      description: 指定したイベントの詳細情報を取得します
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: イベントID
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Events
      summary: イベント更新
      description: 指定したイベントを更新します
      security:
        - AdminAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: イベントID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "イベントが正常に更新されました"
                  data:
                    $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Events
      summary: イベント削除
      description: 指定したイベントを削除します
      security:
        - AdminAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: イベントID
      responses:
        '200':
          description: 削除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "イベントが正常に削除されました"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 参加者管理
  /participants/register:
    post:
      tags:
        - Participants
      summary: 参加者登録
      description: イベントへの参加登録を行います
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantRegisterRequest'
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "参加登録が完了しました"
                  data:
                    $ref: '#/components/schemas/Participant'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: 重複登録
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "すでに登録されているメールアドレスです"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /participants/{eventId}:
    get:
      tags:
        - Participants
      summary: イベント参加者一覧
      description: 指定したイベントの参加者一覧を取得します
      security:
        - AdminAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: イベントID
        - name: participation_type
          in: query
          description: 参加形式でフィルタリング
          required: false
          schema:
            type: string
            enum: [online, offline]
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participant'
                  count:
                    type: integer
                    example: 25
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 発表管理
  /talks:
    post:
      tags:
        - Talks
      summary: 発表提出
      description: ライトニングトークの発表を提出します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TalkSubmitRequest'
      responses:
        '201':
          description: 提出成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "発表が正常に提出されました"
                  data:
                    $ref: '#/components/schemas/Talk'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /talks/{eventId}:
    get:
      tags:
        - Talks
      summary: イベント発表一覧
      description: 指定したイベントの発表一覧を取得します
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          description: イベントID
        - name: status
          in: query
          description: 発表状態でフィルタリング
          required: false
          schema:
            type: string
            enum: [pending, confirmed, rejected]
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Talk'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # リアルタイム通知
  /notifications/stream:
    get:
      tags:
        - Notifications
      summary: Server-Sent Events接続
      description: リアルタイム通知のSSEストリームに接続します
      responses:
        '200':
          description: SSEストリーム開始
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  event: connected
                  data: {"message":"Connected to notifications","clientId":"12345","timestamp":"2025-06-22T10:00:00Z"}

  /notifications/send:
    post:
      tags:
        - Notifications
      summary: 手動通知送信
      description: 手動で通知を送信します
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - event
                - message
              properties:
                event:
                  type: string
                  example: "custom_notification"
                message:
                  type: string
                  example: "カスタム通知メッセージ"
                type:
                  type: string
                  enum: [info, warning, error, success]
                  default: info
                topic:
                  type: string
                  example: "general"
      responses:
        '200':
          description: 送信成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "通知が正常に送信されました"
                  event:
                    type: string
                    example: "custom_notification"
                  topic:
                    type: string
                    example: "general"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 複数イベント管理
  /multi-events/create-batch:
    post:
      tags:
        - Multi-Events
      summary: 複数イベント一括作成
      description: 複数のイベントを一括で作成します
      security:
        - AdminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - events
              properties:
                events:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/EventCreateRequest'
                options:
                  type: object
                  properties:
                    checkConflicts:
                      type: boolean
                      default: true
                    autoResolve:
                      type: boolean
                      default: false
                    notifyParticipants:
                      type: boolean
                      default: true
                    batchSize:
                      type: integer
                      minimum: 1
                      maximum: 50
                      default: 10
      responses:
        '201':
          description: 一括作成成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "5件のイベントが正常に作成されました"
                  data:
                    type: object
                    properties:
                      created:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      conflicts:
                        type: array
                        items:
                          type: object
                      errors:
                        type: array
                        items:
                          type: object
                      summary:
                        type: object
                        properties:
                          totalAttempted:
                            type: integer
                          successfullyCreated:
                            type: integer
                          conflictsFound:
                            type: integer
                          errorsOccurred:
                            type: integer
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /multi-events/concurrent:
    get:
      tags:
        - Multi-Events
      summary: 並行イベント管理
      description: 並行実行中のイベントの管理情報を取得します
      security:
        - AdminAuth: []
      parameters:
        - name: dateRange.start
          in: query
          schema:
            type: string
            format: date-time
        - name: dateRange.end
          in: query
          schema:
            type: string
            format: date-time
        - name: includeConflicts
          in: query
          schema:
            type: boolean
            default: true
        - name: resolveConflicts
          in: query
          schema:
            type: boolean
            default: false
        - name: priorityOrder
          in: query
          schema:
            type: string
            enum: [date, priority, participants]
            default: date
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "並行イベント管理情報を取得しました"
                  data:
                    type: object
                    properties:
                      activeEvents:
                        type: integer
                      concurrentGroups:
                        type: array
                      conflicts:
                        type: object
                      managementStatus:
                        type: object
                        properties:
                          healthy:
                            type: boolean
                          warnings:
                            type: array
                            items:
                              type: string
                          recommendations:
                            type: array
                            items:
                              type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /multi-events/dashboard:
    get:
      tags:
        - Multi-Events
      summary: リアルタイムダッシュボード
      description: マルチイベント管理のリアルタイムダッシュボードデータを取得します
      security:
        - AdminAuth: []
      parameters:
        - name: refreshInterval
          in: query
          schema:
            type: integer
            minimum: 5
            maximum: 300
            default: 30
        - name: includeMetrics
          in: query
          schema:
            type: boolean
            default: true
        - name: includeAlerts
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # 分析レポート
  /analytics/{eventId}/statistics:
    get:
      tags:
        - Analytics
      summary: イベント統計
      description: 指定したイベントの詳細統計を取得します
      security:
        - AdminAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: includeDetails
          in: query
          schema:
            type: boolean
            default: false
        - name: includeTrends
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStatistics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # ヘルスチェック
  /health:
    get:
      tags:
        - System
      summary: システムヘルスチェック
      description: システムの状態を確認します
      responses:
        '200':
          description: システム正常
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                  version:
                    type: string
                    example: "1.0.0"
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "connected"
                      email:
                        type: string
                        example: "ready"
                      notifications:
                        type: string
                        example: "active"
        '503':
          description: サービス不可
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "unhealthy"
                  timestamp:
                    type: string
                    format: date-time
                  errors:
                    type: array
                    items:
                      type: string

components:
  schemas:
    Event:
      type: object
      properties:
        id:
          type: string
          example: "event-001"
        title:
          type: string
          example: "第1回 なんでもライトニングトーク"
        description:
          type: string
          example: "5分間で世界を変える！あなたの「なんでも」を聞かせて！"
        date:
          type: string
          format: date-time
          example: "2025-06-25T19:00:00+09:00"
        endDate:
          type: string
          format: date-time
          example: "2025-06-25T22:00:00+09:00"
        venue:
          type: object
          properties:
            name:
              type: string
              example: "新宿某所"
            address:
              type: string
              example: "詳細は6月20日に確定予定"
            capacity:
              type: integer
              example: 50
            online:
              type: boolean
              example: true
            onlineUrl:
              type: string
              example: "https://meet.google.com/ycp-sdec-xsr"
        status:
          type: string
          enum: [upcoming, ongoing, completed, cancelled]
          example: "upcoming"
        registrationOpen:
          type: boolean
          example: true
        talkSubmissionOpen:
          type: boolean
          example: true
        maxTalks:
          type: integer
          example: 20
        talkDuration:
          type: integer
          example: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    EventCreateRequest:
      type: object
      required:
        - title
        - description
        - date
        - venue
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "テストイベント"
        description:
          type: string
          minLength: 1
          maxLength: 1000
          example: "テスト用のイベントです"
        date:
          type: string
          format: date-time
          example: "2025-12-01T19:00:00Z"
        endDate:
          type: string
          format: date-time
          example: "2025-12-01T22:00:00Z"
        venue:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              example: "テスト会場"
            address:
              type: string
              example: "東京都新宿区"
            capacity:
              type: integer
              minimum: 1
              example: 30
            online:
              type: boolean
              default: false
            onlineUrl:
              type: string
              example: "https://meet.google.com/test"
        status:
          type: string
          enum: [upcoming, ongoing, completed, cancelled]
          default: upcoming
        registrationOpen:
          type: boolean
          default: true
        talkSubmissionOpen:
          type: boolean
          default: true
        maxTalks:
          type: integer
          minimum: 1
          default: 20
        talkDuration:
          type: integer
          minimum: 1
          default: 5

    EventUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
          maxLength: 1000
        date:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        venue:
          type: object
        status:
          type: string
          enum: [upcoming, ongoing, completed, cancelled]
        registrationOpen:
          type: boolean
        talkSubmissionOpen:
          type: boolean
        maxTalks:
          type: integer
          minimum: 1
        talkDuration:
          type: integer
          minimum: 1

    Participant:
      type: object
      properties:
        id:
          type: string
          example: "participant-001"
        name:
          type: string
          example: "テスト太郎"
        email:
          type: string
          format: email
          example: "test@example.com"
        eventId:
          type: string
          example: "event-001"
        participationType:
          type: string
          enum: [online, offline]
          example: "online"
        organization:
          type: string
          example: "テスト会社"
        location:
          type: string
          example: "東京都"
        experienceLevel:
          type: string
          enum: [beginner, intermediate, advanced]
          example: "intermediate"
        registeredAt:
          type: string
          format: date-time

    ParticipantRegisterRequest:
      type: object
      required:
        - name
        - email
        - eventId
        - participationType
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "テスト太郎"
        email:
          type: string
          format: email
          example: "test@example.com"
        eventId:
          type: string
          example: "event-001"
        participationType:
          type: string
          enum: [online, offline]
          example: "online"
        organization:
          type: string
          maxLength: 200
          example: "テスト会社"
        location:
          type: string
          maxLength: 100
          example: "東京都"
        experienceLevel:
          type: string
          enum: [beginner, intermediate, advanced]
          example: "intermediate"
        emergencyContact:
          type: string
          example: "090-1234-5678"
        dietaryRestrictions:
          type: string
          example: "ベジタリアン"

    Talk:
      type: object
      properties:
        id:
          type: string
          example: "talk-001"
        title:
          type: string
          example: "JavaScriptの新機能紹介"
        description:
          type: string
          example: "ES2025の新機能を簡単に紹介します"
        speakerName:
          type: string
          example: "発表太郎"
        speakerEmail:
          type: string
          format: email
          example: "speaker@example.com"
        eventId:
          type: string
          example: "event-001"
        category:
          type: string
          example: "技術"
        duration:
          type: integer
          example: 5
        status:
          type: string
          enum: [pending, confirmed, rejected]
          example: "pending"
        experienceLevel:
          type: string
          enum: [first_time, experienced]
          example: "experienced"
        submittedAt:
          type: string
          format: date-time

    TalkSubmitRequest:
      type: object
      required:
        - title
        - description
        - speakerName
        - speakerEmail
        - eventId
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: "JavaScriptの新機能紹介"
        description:
          type: string
          minLength: 1
          maxLength: 1000
          example: "ES2025の新機能を簡単に紹介します"
        speakerName:
          type: string
          minLength: 1
          maxLength: 100
          example: "発表太郎"
        speakerEmail:
          type: string
          format: email
          example: "speaker@example.com"
        eventId:
          type: string
          example: "event-001"
        category:
          type: string
          maxLength: 50
          example: "技術"
        duration:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
        experienceLevel:
          type: string
          enum: [first_time, experienced]
          default: first_time
        requirements:
          type: string
          maxLength: 500
          example: "プロジェクターとスクリーン"

    EventStatistics:
      type: object
      properties:
        eventId:
          type: string
        generatedAt:
          type: string
          format: date-time
        period:
          type: object
          properties:
            startDate:
              type: string
              format: date-time
            endDate:
              type: string
              format: date-time
        statistics:
          type: object
          properties:
            basic:
              type: object
              properties:
                eventInfo:
                  type: object
                summary:
                  type: object
                  properties:
                    totalParticipants:
                      type: integer
                    totalTalks:
                      type: integer
                    onlineParticipants:
                      type: integer
                    offlineParticipants:
                      type: integer
                    confirmedTalks:
                      type: integer
                    pendingTalks:
                      type: integer
                    averageTalkDuration:
                      type: number
            participants:
              type: object
              properties:
                distribution:
                  type: object
                timeline:
                  type: array
                summary:
                  type: object
            talks:
              type: object
              properties:
                distribution:
                  type: object
                speakers:
                  type: object
                timeline:
                  type: array
                duration:
                  type: object
        trends:
          type: object
        details:
          type: object

    DashboardData:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        refreshInterval:
          type: integer
        overview:
          type: object
          properties:
            activeEvents:
              type: integer
            concurrentGroups:
              type: integer
            totalConflicts:
              type: integer
            crossEventParticipants:
              type: integer
        metrics:
          type: object
          properties:
            eventUtilization:
              type: number
              minimum: 0
              maximum: 1
            resourceEfficiency:
              type: number
              minimum: 0
              maximum: 1
            participantSatisfaction:
              type: number
              minimum: 0
              maximum: 1
        alerts:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [warning, error, info]
              message:
                type: string
              action:
                type: string
        recommendations:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [optimization, insight, action]
              message:
                type: string
              priority:
                type: string
                enum: [high, medium, low]

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 25
        totalPages:
          type: integer
          example: 3
        hasNext:
          type: boolean
          example: true
        hasPrev:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "エラーが発生しました"
        error:
          type: string
          example: "詳細エラー情報"
        timestamp:
          type: string
          format: date-time

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "バリデーションエラー"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "有効なメールアドレスを入力してください"
              value:
                type: string
                example: "invalid-email"

  responses:
    BadRequest:
      description: リクエストが不正です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'

    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "認証が必要です"

    Forbidden:
      description: アクセスが禁止されています
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "この操作を実行する権限がありません"

    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "指定されたリソースが見つかりません"

    InternalServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 管理者用JWTトークン

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: APIキー認証

tags:
  - name: Events
    description: イベント管理機能
  - name: Participants
    description: 参加者管理機能
  - name: Talks
    description: 発表管理機能
  - name: Notifications
    description: リアルタイム通知機能
  - name: Multi-Events
    description: 複数イベント管理機能
  - name: Analytics
    description: 分析レポート機能
  - name: System
    description: システム関連機能

externalDocs:
  description: GitHub Repository
  url: https://github.com/example/lightningtalk-circle
