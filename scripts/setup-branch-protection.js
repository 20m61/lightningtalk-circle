#!/usr/bin/env node
/**
 * Lightning Talk Circle - Branch Protection Setup
 * GitHub„Éñ„É©„É≥„ÉÅ‰øùË≠∑„É´„Éº„É´„ÅÆË®≠ÂÆö„Çπ„ÇØ„É™„Éó„Éà
 */

import { Octokit } from '@octokit/rest';
import dotenv from 'dotenv';

dotenv.config();

const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN
});

const owner = process.env.GITHUB_OWNER || '20m61';
const repo = process.env.GITHUB_REPO || 'lightningtalk-circle';

/**
 * „Éñ„É©„É≥„ÉÅ‰øùË≠∑„É´„Éº„É´„ÅÆË®≠ÂÆö
 */
async function setupBranchProtection() {
  console.log('üîê Setting up branch protection rules...\n');

  try {
    // main „Éñ„É©„É≥„ÉÅ„ÅÆ‰øùË≠∑Ë®≠ÂÆö
    await setupMainBranchProtection();

    // developer „Éñ„É©„É≥„ÉÅ„ÅÆ‰øùË≠∑Ë®≠ÂÆö
    await setupDeveloperBranchProtection();

    console.log('\n‚úÖ Branch protection setup completed successfully!');
  } catch (error) {
    console.error('‚ùå Failed to setup branch protection:', error.message);
    process.exit(1);
  }
}

/**
 * main „Éñ„É©„É≥„ÉÅ„ÅÆ‰øùË≠∑Ë®≠ÂÆöÔºàÂé≥Ê†ºÔºâ
 */
async function setupMainBranchProtection() {
  console.log('üèóÔ∏è Setting up main branch protection...');

  const protection = {
    owner,
    repo,
    branch: 'main',
    required_status_checks: {
      strict: true,
      contexts: [
        'ci/unit-tests',
        'ci/integration-tests',
        'ci/e2e-tests',
        'ci/security-scan',
        'ci/lint-check',
        'ci/type-check'
      ]
    },
    enforce_admins: true,
    required_pull_request_reviews: {
      required_approving_review_count: 2,
      dismiss_stale_reviews: true,
      require_code_owner_reviews: true,
      require_last_push_approval: true,
      bypass_pull_request_allowances: {
        users: [],
        teams: [],
        apps: []
      }
    },
    restrictions: null, // Ë™∞„Åß„ÇÇPR„ÅØ‰ΩúÊàêÂèØËÉΩ
    allow_force_pushes: false,
    allow_deletions: false,
    block_creations: false,
    required_conversation_resolution: true,
    lock_branch: false,
    allow_fork_syncing: true
  };

  try {
    await octokit.rest.repos.updateBranchProtection(protection);
    console.log('‚úÖ Main branch protection configured');
  } catch (error) {
    if (error.status === 404) {
      console.log('‚ö†Ô∏è Main branch not found, will be created on first push');
    } else {
      throw error;
    }
  }
}

/**
 * developer „Éñ„É©„É≥„ÉÅ„ÅÆ‰øùË≠∑Ë®≠ÂÆöÔºà‰∏≠Á®ãÂ∫¶Ôºâ
 */
async function setupDeveloperBranchProtection() {
  console.log('üöÄ Setting up developer branch protection...');

  const protection = {
    owner,
    repo,
    branch: 'developer',
    required_status_checks: {
      strict: true,
      contexts: ['ci/unit-tests', 'ci/lint-check', 'ci/type-check']
    },
    enforce_admins: false, // ÁÆ°ÁêÜËÄÖ„ÅØÁ∑äÊÄ•ÊôÇ„Å´bypassÂèØËÉΩ
    required_pull_request_reviews: {
      required_approving_review_count: 1,
      dismiss_stale_reviews: true,
      require_code_owner_reviews: false,
      require_last_push_approval: false
    },
    restrictions: null,
    allow_force_pushes: false,
    allow_deletions: false,
    block_creations: false,
    required_conversation_resolution: false, // Ë≠∞Ë´ñ„ÅÆËß£Ê±∫„ÅØÂøÖÈ†à„Åß„ÅØ„Å™„ÅÑ
    lock_branch: false,
    allow_fork_syncing: true
  };

  try {
    await octokit.rest.repos.updateBranchProtection(protection);
    console.log('‚úÖ Developer branch protection configured');
  } catch (error) {
    if (error.status === 404) {
      console.log('‚úÖ Developer branch already exists');
    } else {
      throw error;
    }
  }
}

/**
 * „Éá„Éï„Ç©„É´„Éà„Éñ„É©„É≥„ÉÅ„ÅÆË®≠ÂÆö
 */
async function setDefaultBranch() {
  console.log('üîÑ Setting default branch to developer...');

  try {
    await octokit.rest.repos.update({
      owner,
      repo,
      default_branch: 'developer'
    });
    console.log('‚úÖ Default branch set to developer');
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to set default branch:', error.message);
  }
}

/**
 * „É™„Éù„Ç∏„Éà„É™Ë®≠ÂÆö„ÅÆÊúÄÈÅ©Âåñ
 */
async function optimizeRepositorySettings() {
  console.log('‚öôÔ∏è Optimizing repository settings...');

  try {
    await octokit.rest.repos.update({
      owner,
      repo,
      // „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàË®≠ÂÆö
      allow_merge_commit: true,
      allow_squash_merge: true,
      allow_rebase_merge: false,
      delete_branch_on_merge: true,

      // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë®≠ÂÆö
      allow_auto_merge: true,
      use_squash_pr_title_as_default: true,

      // Issue/PR „ÉÜ„É≥„Éó„É¨„Éº„Éà
      has_issues: true,
      has_projects: true,
      has_wiki: false,

      // „Åù„ÅÆ‰ªñ
      archived: false,
      disabled: false
    });
    console.log('‚úÖ Repository settings optimized');
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to optimize repository settings:', error.message);
  }
}

/**
 * „Çπ„ÉÜ„Éº„Çø„Çπ„ÉÅ„Çß„ÉÉ„ÇØË®≠ÂÆö„ÅÆË°®Á§∫
 */
function displayStatusCheckInfo() {
  console.log('\nüìã Required Status Checks Configuration:');
  console.log('');
  console.log('Main Branch:');
  console.log('  - ci/unit-tests');
  console.log('  - ci/integration-tests');
  console.log('  - ci/e2e-tests');
  console.log('  - ci/security-scan');
  console.log('  - ci/lint-check');
  console.log('  - ci/type-check');
  console.log('');
  console.log('Developer Branch:');
  console.log('  - ci/unit-tests');
  console.log('  - ci/lint-check');
  console.log('  - ci/type-check');
  console.log('');
  console.log('üí° These checks will be automatically created by GitHub Actions workflows');
}

/**
 * Ë®≠ÂÆö„Çµ„Éû„É™„Éº„ÅÆË°®Á§∫
 */
function displayConfigurationSummary() {
  console.log('\nüìä Branch Protection Summary:');
  console.log('');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Setting      ‚îÇ Main         ‚îÇ Developer    ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  console.log('‚îÇ PR Required  ‚îÇ ‚úÖ (2 reviews)‚îÇ ‚úÖ (1 review) ‚îÇ');
  console.log('‚îÇ Status Checks‚îÇ ‚úÖ (6 checks) ‚îÇ ‚úÖ (3 checks) ‚îÇ');
  console.log('‚îÇ Force Push   ‚îÇ ‚ùå Blocked    ‚îÇ ‚ùå Blocked    ‚îÇ');
  console.log('‚îÇ Deletion     ‚îÇ ‚ùå Blocked    ‚îÇ ‚ùå Blocked    ‚îÇ');
  console.log('‚îÇ Admin Bypass ‚îÇ ‚ùå No         ‚îÇ ‚úÖ Yes       ‚îÇ');
  console.log('‚îÇ Stale Review ‚îÇ ‚úÖ Dismiss    ‚îÇ ‚úÖ Dismiss    ‚îÇ');
  console.log('‚îÇ Auto-Delete  ‚îÇ ‚úÖ Enabled    ‚îÇ ‚úÖ Enabled    ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
}

// „É°„Ç§„É≥ÂÆüË°å
async function main() {
  console.log('üöÄ Lightning Talk Circle - Branch Protection Setup');
  console.log('================================================');
  console.log(`Repository: ${owner}/${repo}`);
  console.log('');

  if (!process.env.GITHUB_TOKEN) {
    console.error('‚ùå GITHUB_TOKEN environment variable is required');
    console.log('Please set your GitHub Personal Access Token:');
    console.log('export GITHUB_TOKEN=your_token_here');
    process.exit(1);
  }

  await setupBranchProtection();
  await setDefaultBranch();
  await optimizeRepositorySettings();

  displayStatusCheckInfo();
  displayConfigurationSummary();

  console.log('\nüéâ Setup completed! Your repository is now optimized for team development.');
  console.log('\nüìö Next steps:');
  console.log('1. Review the GitHub Actions workflows in .github/workflows/');
  console.log('2. Add team members to the repository');
  console.log('3. Create your first feature branch from developer');
  console.log('4. Test the protection rules with a sample PR');
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('unhandledRejection', error => {
  console.error('‚ùå Unhandled rejection:', error);
  process.exit(1);
});

// ÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { setupBranchProtection, setupMainBranchProtection, setupDeveloperBranchProtection };
